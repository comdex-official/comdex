syntax = "proto3";

package comdex.cdp.v1alpha1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "comdex/cdp/v1alpha1/cdp.proto";
import "comdex/cdp/v1alpha1/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/comdex-official/comdex/x/cdp/types";

// Query defines the gRPC querier service.
service QueryService {

  rpc QueryCDP(QueryCDPRequest) returns(QueryCDPResponse){
    option (google.api.http).get =
      "/comdex/cdps/{collateral_type}/{owner}";
  };

  rpc QueryCDPs(QueryCDPsRequest) returns(QueryCDPsResponse){
    option (google.api.http).get =
      "/comdex/cdps/{owner}";
  };

  rpc QueryCDPById(QueryCDPByIdRequest) returns(QueryCDPByIdResponse){
    option (google.api.http).get =
      "/comdex/cdps/{id}";
  };

  rpc QueryParams(QueryParamsRequest) returns(QueryParamsResponse){
    option (google.api.http).get =
      "/comdex/cdp/params";
  };
}

message QueryCDPRequest{
  string collateral_type = 1 [ (gogoproto.moretags) = "yaml:\"collateral_type\"" ];
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
}

message QueryCDPResponse{
  CDP cdp = 1 [
    (gogoproto.moretags) = "yaml:\"cdp\"",
    (gogoproto.nullable) = false
  ];
}

message QueryCDPsRequest{
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryCDPsResponse{
 repeated CDP cdps = 1 [
    (gogoproto.moretags) = "yaml:\"cdps\"",
    (gogoproto.nullable) = false
  ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCDPByIdRequest{
  uint64 id = 1;
}

message QueryCDPByIdResponse{
  CDP cdp = 1 [
    (gogoproto.moretags) = "yaml:\"cdp\"",
    (gogoproto.nullable) = false
  ];
}

message QueryParamsRequest{}

message QueryParamsResponse{
  Params params = 1 [ (gogoproto.nullable) = false ];
}