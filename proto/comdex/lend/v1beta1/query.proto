syntax = "proto3";
package comdex.lend.v1beta1;


import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "comdex/lend/v1beta1/lend.proto";
import "comdex/lend/v1beta1/params.proto";

option go_package = "github.com/comdex-official/comdex/x/lend/types";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

message QueryAssetsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1
  [ (gogoproto.moretags) = "yaml:\"pagination\"" ];
}

message QueryAssetsResponse {
  repeated Asset assets = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"assets\""
  ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2
  [ (gogoproto.moretags) = "yaml:\"pagination\"" ];
}


// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}


message QueryAssetRequest {
  uint64 id = 1;
}

message QueryAssetResponse {
  Asset asset = 1
  [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"asset\"" ];
}

message QueryAssetPerDenomRequest {
  string denom = 1;
}

message QueryAssetPerDenomResponse {
  Asset asset=1
  [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"asset\""];
}

message QueryBalancesPerModuleRequest {
  string module = 1;
}

message QueryBalancesPerModuleResponse {
  string balances = 1;
}

service QueryService {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/comdexofficial/comdex/lend/params";
  }
  rpc QueryAssets(QueryAssetsRequest) returns (QueryAssetsResponse) {
    option (google.api.http).get = "/comdex/lend/v1beta1/assets";
  }
  rpc QueryAsset(QueryAssetRequest) returns (QueryAssetResponse) {
    option (google.api.http).get = "/comdex/lend/v1beta1/assets/{id}";
  }
  rpc QueryAssetPerDenom(QueryAssetPerDenomRequest) returns (QueryAssetPerDenomResponse) {
    option (google.api.http).get = "/comdex/lend/v1beta1/denom/{denom}";
  }
  rpc QueryBalancesPerModule(QueryBalancesPerModuleRequest) returns (QueryBalancesPerModuleResponse) {
    option (google.api.http).get = "/comdex/lend/v1beta1/balances/module/{module}";
  }
}

