syntax = "proto3";
package comdex.oracle.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/comdex-official/comdex/x/oracle/types";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

message MsgAddMarketRequest {
string from      = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
string symbol    = 2 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
uint64 script_id = 3 [
(gogoproto.customname) = "ScriptID",
(gogoproto.moretags)   = "yaml:\"script_id\""
];
}

message MsgAddMarketResponse {}

message MsgUpdateMarketRequest {
string from      = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
string symbol    = 2 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
uint64 script_id = 3 [
(gogoproto.customname) = "ScriptID",
(gogoproto.moretags)   = "yaml:\"script_id\""
];
}

message MsgUpdateMarketResponse {}

message MsgAddAssetRequest {
string from    = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
string name    = 2 [ (gogoproto.moretags) = "yaml:\"name\"" ];
string denom   = 3 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
int64 decimals = 4 [ (gogoproto.moretags) = "yaml:\"decimals\"" ];
}

message MsgAddAssetResponse {}

message MsgUpdateAssetRequest {
string from = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
uint64 id   = 2;
string name    = 3 [ (gogoproto.moretags) = "yaml:\"name\"" ];
string denom   = 4 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
int64 decimals = 5 [ (gogoproto.moretags) = "yaml:\"decimals\"" ];
}

message MsgUpdateAssetResponse {}

message MsgAddMarketForAssetRequest {
string from = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
uint64 id   = 2;
string symbol = 3 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
}

message MsgAddMarketForAssetResponse {}

message MsgRemoveMarketForAssetRequest {
string from = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
uint64 id   = 2;
string symbol = 3 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
}

message MsgRemoveMarketForAssetResponse {}

service MsgService {
    rpc MsgAddMarket(MsgAddMarketRequest) returns (MsgAddMarketResponse);
    rpc MsgUpdateMarket(MsgUpdateMarketRequest) returns (MsgUpdateMarketResponse);
}