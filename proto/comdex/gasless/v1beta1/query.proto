syntax = "proto3";
package comdex.gasless.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "comdex/gasless/v1beta1/params.proto";
import "comdex/gasless/v1beta1/gasless.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/comdex-official/comdex/x/gasless/types";

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryMessagesAndContractsRequest is a request type for the Query/MessagesAndContracts RPC method.
message QueryMessagesAndContractsRequest {}

message ContractDetails {
  uint64 code_id = 1;
  string address = 2;
  string lable = 3;
}

// QueryMessagesAndContractsResponse is a response type for the Query/MessagesAndContracts RPC method.
message QueryMessagesAndContractsResponse {
  repeated string messages = 1;
  repeated ContractDetails contracts = 2;
}

message GasProviderResponse {
  uint64 id = 1;
  string creator = 2;
  string gas_tank_address = 3;
  repeated cosmos.base.v1beta1.Coin gas_tank_balances = 4 [(gogoproto.nullable) = false];
  bool is_active = 5;
  uint64 max_txs_count_per_consumer = 6;
  string max_fee_usage_per_consumer = 7 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  string max_fee_usage_per_tx = 8 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  repeated string txs_allowed = 9;
  repeated string contracts_allowed = 10;
  repeated string authorized_actors = 11;
  string fee_denom = 12;
}

// QueryGasProviderRequest is a request type for the Query/GasProvider RPC method.
message QueryGasProviderRequest {
  uint64 gas_provider_id = 1;
}

// QueryGasProviderResponse is a response type for the Query/GasProvider RPC method.
message QueryGasProviderResponse {
  GasProviderResponse gas_provider = 1 [(gogoproto.nullable) = false];
}

// QueryGasProvidersRequest is a request type for the Query/GasProviders RPC method.
message QueryGasProvidersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGasProvidersResponse is a response type for the Query/GasProviders RPC method.
message QueryGasProvidersResponse {
  repeated GasProviderResponse gas_providers = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGasConsumerRequest is a request type for the Query/GasConsumer RPC method.
message QueryGasConsumerRequest {
  string consumer = 1;
}

// QueryGasConsumerResponse is a response type for the Query/GasConsumer RPC method.
message QueryGasConsumerResponse {
  GasConsumer gas_consumer = 1 [(gogoproto.nullable) = false];
}

// QueryGasConsumersRequest is a request type for the Query/GasConsumers RPC method.
message QueryGasConsumersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGasConsumersResponse is a response type for the Query/GasConsumers RPC method.
message QueryGasConsumersResponse {
  repeated GasConsumer gas_consumers = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGasProviderIdsForAllTXC {}

message QueryGasProviderIdsForAllTXCResponse {
  repeated TxGPIDS tx_to_gp_ids = 1;
}

// Query defines the gRPC querier service.
service Query {
  // Params returns parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/params";
  }

  // MessagesAndContracts return all cosmos.base.v1beta1.Msg messages and available contract details 
  rpc MessagesAndContracts(QueryMessagesAndContractsRequest) returns (QueryMessagesAndContractsResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/mac";
  }

  // GasProvider returns gas provider details 
  rpc GasProvider(QueryGasProviderRequest) returns (QueryGasProviderResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/provider/{gas_provider_id}";
  }

  // GasProviders return details of all the gas providers
  rpc GasProviders(QueryGasProvidersRequest) returns (QueryGasProvidersResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/providers";
  }

  // GasConsumer returns gas consumer details 
  rpc GasConsumer(QueryGasConsumerRequest) returns (QueryGasConsumerResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/consumer/{consumer}";
  }

  // GasConsumers return details of all the gas consumers
  rpc GasConsumers(QueryGasConsumersRequest) returns (QueryGasConsumersResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/consumers";
  }

  // GasProviderIdsForAllTXC returns gas provider ids with all available tx or contracts
  rpc GasProviderIdsForAllTXC(QueryGasProviderIdsForAllTXC) returns (QueryGasProviderIdsForAllTXCResponse) {
    option (google.api.http).get = "/comdex/gasless/v1beta1/txc";
  }
}