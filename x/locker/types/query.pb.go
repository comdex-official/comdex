// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/locker/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/comdex-official/comdex/x/asset/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLockerInfoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryLockerInfoRequest) Reset()         { *m = QueryLockerInfoRequest{} }
func (m *QueryLockerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoRequest) ProtoMessage()    {}
func (*QueryLockerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{0}
}
func (m *QueryLockerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoRequest.Merge(m, src)
}
func (m *QueryLockerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoRequest proto.InternalMessageInfo

type QueryLockerInfoResponse struct {
	LockerInfo Locker `protobuf:"bytes,1,opt,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryLockerInfoResponse) Reset()         { *m = QueryLockerInfoResponse{} }
func (m *QueryLockerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoResponse) ProtoMessage()    {}
func (*QueryLockerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{1}
}
func (m *QueryLockerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoResponse.Merge(m, src)
}
func (m *QueryLockerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoResponse proto.InternalMessageInfo

type QueryLockersByAppToAssetIDRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockersByAppToAssetIDRequest) Reset()         { *m = QueryLockersByAppToAssetIDRequest{} }
func (m *QueryLockersByAppToAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockersByAppToAssetIDRequest) ProtoMessage()    {}
func (*QueryLockersByAppToAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{2}
}
func (m *QueryLockersByAppToAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockersByAppToAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockersByAppToAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockersByAppToAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockersByAppToAssetIDRequest.Merge(m, src)
}
func (m *QueryLockersByAppToAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockersByAppToAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockersByAppToAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockersByAppToAssetIDRequest proto.InternalMessageInfo

type QueryLockersByAppToAssetIDResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryLockersByAppToAssetIDResponse) Reset()         { *m = QueryLockersByAppToAssetIDResponse{} }
func (m *QueryLockersByAppToAssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockersByAppToAssetIDResponse) ProtoMessage()    {}
func (*QueryLockersByAppToAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{3}
}
func (m *QueryLockersByAppToAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockersByAppToAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockersByAppToAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockersByAppToAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockersByAppToAssetIDResponse.Merge(m, src)
}
func (m *QueryLockersByAppToAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockersByAppToAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockersByAppToAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockersByAppToAssetIDResponse proto.InternalMessageInfo

type QueryLockerInfoByAppIDRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerInfoByAppIDRequest) Reset()         { *m = QueryLockerInfoByAppIDRequest{} }
func (m *QueryLockerInfoByAppIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoByAppIDRequest) ProtoMessage()    {}
func (*QueryLockerInfoByAppIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{4}
}
func (m *QueryLockerInfoByAppIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoByAppIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoByAppIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoByAppIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoByAppIDRequest.Merge(m, src)
}
func (m *QueryLockerInfoByAppIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoByAppIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoByAppIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoByAppIDRequest proto.InternalMessageInfo

type QueryLockerInfoByAppIDResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryLockerInfoByAppIDResponse) Reset()         { *m = QueryLockerInfoByAppIDResponse{} }
func (m *QueryLockerInfoByAppIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerInfoByAppIDResponse) ProtoMessage()    {}
func (*QueryLockerInfoByAppIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{5}
}
func (m *QueryLockerInfoByAppIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerInfoByAppIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerInfoByAppIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerInfoByAppIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerInfoByAppIDResponse.Merge(m, src)
}
func (m *QueryLockerInfoByAppIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerInfoByAppIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerInfoByAppIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerInfoByAppIDResponse proto.InternalMessageInfo

type QueryTotalDepositByAppAndAssetIDRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryTotalDepositByAppAndAssetIDRequest) Reset() {
	*m = QueryTotalDepositByAppAndAssetIDRequest{}
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalDepositByAppAndAssetIDRequest) ProtoMessage()    {}
func (*QueryTotalDepositByAppAndAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{6}
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDepositByAppAndAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDepositByAppAndAssetIDRequest.Merge(m, src)
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDepositByAppAndAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDepositByAppAndAssetIDRequest proto.InternalMessageInfo

type QueryTotalDepositByAppAndAssetIDResponse struct {
	TotalDeposit uint64 `protobuf:"varint,1,opt,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit,omitempty"`
}

func (m *QueryTotalDepositByAppAndAssetIDResponse) Reset() {
	*m = QueryTotalDepositByAppAndAssetIDResponse{}
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalDepositByAppAndAssetIDResponse) ProtoMessage()    {}
func (*QueryTotalDepositByAppAndAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{7}
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDepositByAppAndAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDepositByAppAndAssetIDResponse.Merge(m, src)
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDepositByAppAndAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDepositByAppAndAssetIDResponse proto.InternalMessageInfo

type QueryOwnerLockerByAppIDbyOwnerRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerByAppIDbyOwnerRequest) Reset()         { *m = QueryOwnerLockerByAppIDbyOwnerRequest{} }
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerLockerByAppIDbyOwnerRequest) ProtoMessage()    {}
func (*QueryOwnerLockerByAppIDbyOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{8}
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerByAppIDbyOwnerResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryOwnerLockerByAppIDbyOwnerResponse) Reset() {
	*m = QueryOwnerLockerByAppIDbyOwnerResponse{}
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerLockerByAppIDbyOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerLockerByAppIDbyOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{9}
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByAppIDbyOwnerResponse proto.InternalMessageInfo

type QueryOwnerLockerOfAllAppsByOwnerRequest struct {
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) Reset() {
	*m = QueryOwnerLockerOfAllAppsByOwnerRequest{}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerLockerOfAllAppsByOwnerRequest) ProtoMessage()    {}
func (*QueryOwnerLockerOfAllAppsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{10}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerOfAllAppsByOwnerResponse struct {
	LockerIds []string `protobuf:"bytes,1,rep,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"locker_ids"`
}

func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) Reset() {
	*m = QueryOwnerLockerOfAllAppsByOwnerResponse{}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerLockerOfAllAppsByOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerLockerOfAllAppsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{11}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerOfAllAppsByOwnerResponse proto.InternalMessageInfo

type QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AssetId    uint64             `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) Reset() {
	*m = QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest{}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) ProtoMessage() {}
func (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{12}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest.Merge(m, src)
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest proto.InternalMessageInfo

type QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse struct {
	UserTxData []*UserTxData       `protobuf:"bytes,1,rep,name=user_tx_data,json=userTxData,proto3" json:"user_tx_data,omitempty" yaml:"user_tx_data"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) Reset() {
	*m = QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse{}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) ProtoMessage() {}
func (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{13}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse.Merge(m, src)
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse proto.InternalMessageInfo

type QueryOwnerLockerByAppToAssetIDbyOwnerRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) Reset() {
	*m = QueryOwnerLockerByAppToAssetIDbyOwnerRequest{}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByAppToAssetIDbyOwnerRequest) ProtoMessage() {}
func (*QueryOwnerLockerByAppToAssetIDbyOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{14}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerRequest.Merge(m, src)
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerRequest proto.InternalMessageInfo

type QueryOwnerLockerByAppToAssetIDbyOwnerResponse struct {
	LockerInfo []Locker `protobuf:"bytes,1,rep,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) Reset() {
	*m = QueryOwnerLockerByAppToAssetIDbyOwnerResponse{}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse) ProtoMessage() {}
func (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{15}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerLockerByAppToAssetIDbyOwnerResponse proto.InternalMessageInfo

type QueryLockerByAppByOwnerRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryLockerByAppByOwnerRequest) Reset()         { *m = QueryLockerByAppByOwnerRequest{} }
func (m *QueryLockerByAppByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerByAppByOwnerRequest) ProtoMessage()    {}
func (*QueryLockerByAppByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{16}
}
func (m *QueryLockerByAppByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerByAppByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerByAppByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerByAppByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerByAppByOwnerRequest.Merge(m, src)
}
func (m *QueryLockerByAppByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerByAppByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerByAppByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerByAppByOwnerRequest proto.InternalMessageInfo

type QueryLockerByAppByOwnerResponse struct {
	LockerInfo []Locker `protobuf:"bytes,1,rep,name=locker_info,json=lockerInfo,proto3" json:"locker_info" yaml:"locker_info"`
}

func (m *QueryLockerByAppByOwnerResponse) Reset()         { *m = QueryLockerByAppByOwnerResponse{} }
func (m *QueryLockerByAppByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerByAppByOwnerResponse) ProtoMessage()    {}
func (*QueryLockerByAppByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{17}
}
func (m *QueryLockerByAppByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerByAppByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerByAppByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerByAppByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerByAppByOwnerResponse.Merge(m, src)
}
func (m *QueryLockerByAppByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerByAppByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerByAppByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerByAppByOwnerResponse proto.InternalMessageInfo

type QueryLockerCountByAppIDRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerCountByAppIDRequest) Reset()         { *m = QueryLockerCountByAppIDRequest{} }
func (m *QueryLockerCountByAppIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByAppIDRequest) ProtoMessage()    {}
func (*QueryLockerCountByAppIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{18}
}
func (m *QueryLockerCountByAppIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByAppIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByAppIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByAppIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByAppIDRequest.Merge(m, src)
}
func (m *QueryLockerCountByAppIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByAppIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByAppIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByAppIDRequest proto.InternalMessageInfo

type QueryLockerCountByAppIDResponse struct {
	TotalCount uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *QueryLockerCountByAppIDResponse) Reset()         { *m = QueryLockerCountByAppIDResponse{} }
func (m *QueryLockerCountByAppIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByAppIDResponse) ProtoMessage()    {}
func (*QueryLockerCountByAppIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{19}
}
func (m *QueryLockerCountByAppIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByAppIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByAppIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByAppIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByAppIDResponse.Merge(m, src)
}
func (m *QueryLockerCountByAppIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByAppIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByAppIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByAppIDResponse proto.InternalMessageInfo

type QueryLockerCountByAppToAssetIDRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockerCountByAppToAssetIDRequest) Reset()         { *m = QueryLockerCountByAppToAssetIDRequest{} }
func (m *QueryLockerCountByAppToAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByAppToAssetIDRequest) ProtoMessage()    {}
func (*QueryLockerCountByAppToAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{20}
}
func (m *QueryLockerCountByAppToAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByAppToAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByAppToAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByAppToAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByAppToAssetIDRequest.Merge(m, src)
}
func (m *QueryLockerCountByAppToAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByAppToAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByAppToAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByAppToAssetIDRequest proto.InternalMessageInfo

type QueryLockerCountByAppToAssetIDResponse struct {
	TotalCount uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *QueryLockerCountByAppToAssetIDResponse) Reset() {
	*m = QueryLockerCountByAppToAssetIDResponse{}
}
func (m *QueryLockerCountByAppToAssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerCountByAppToAssetIDResponse) ProtoMessage()    {}
func (*QueryLockerCountByAppToAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{21}
}
func (m *QueryLockerCountByAppToAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerCountByAppToAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerCountByAppToAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerCountByAppToAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerCountByAppToAssetIDResponse.Merge(m, src)
}
func (m *QueryLockerCountByAppToAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerCountByAppToAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerCountByAppToAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerCountByAppToAssetIDResponse proto.InternalMessageInfo

type QueryWhiteListedAssetIDsByAppIDRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryWhiteListedAssetIDsByAppIDRequest) Reset() {
	*m = QueryWhiteListedAssetIDsByAppIDRequest{}
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhiteListedAssetIDsByAppIDRequest) ProtoMessage()    {}
func (*QueryWhiteListedAssetIDsByAppIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{22}
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDRequest.Merge(m, src)
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDRequest proto.InternalMessageInfo

type QueryWhiteListedAssetIDsByAppIDResponse struct {
	AssetIds []uint64 `protobuf:"varint,1,rep,packed,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
}

func (m *QueryWhiteListedAssetIDsByAppIDResponse) Reset() {
	*m = QueryWhiteListedAssetIDsByAppIDResponse{}
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhiteListedAssetIDsByAppIDResponse) ProtoMessage()    {}
func (*QueryWhiteListedAssetIDsByAppIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{23}
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDResponse.Merge(m, src)
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetIDsByAppIDResponse proto.InternalMessageInfo

type QueryWhiteListedAssetByAllAppsRequest struct {
}

func (m *QueryWhiteListedAssetByAllAppsRequest) Reset()         { *m = QueryWhiteListedAssetByAllAppsRequest{} }
func (m *QueryWhiteListedAssetByAllAppsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhiteListedAssetByAllAppsRequest) ProtoMessage()    {}
func (*QueryWhiteListedAssetByAllAppsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{24}
}
func (m *QueryWhiteListedAssetByAllAppsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetByAllAppsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetByAllAppsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetByAllAppsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetByAllAppsRequest.Merge(m, src)
}
func (m *QueryWhiteListedAssetByAllAppsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetByAllAppsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetByAllAppsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetByAllAppsRequest proto.InternalMessageInfo

type QueryWhiteListedAssetByAllAppsResponse struct {
	ProductToAllAsset []AppToAllAsset `protobuf:"bytes,1,rep,name=product_to_all_asset,json=productToAllAsset,proto3" json:"product_to_all_asset" yaml:"product_to_all_asset"`
}

func (m *QueryWhiteListedAssetByAllAppsResponse) Reset() {
	*m = QueryWhiteListedAssetByAllAppsResponse{}
}
func (m *QueryWhiteListedAssetByAllAppsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhiteListedAssetByAllAppsResponse) ProtoMessage()    {}
func (*QueryWhiteListedAssetByAllAppsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{25}
}
func (m *QueryWhiteListedAssetByAllAppsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhiteListedAssetByAllAppsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhiteListedAssetByAllAppsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhiteListedAssetByAllAppsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhiteListedAssetByAllAppsResponse.Merge(m, src)
}
func (m *QueryWhiteListedAssetByAllAppsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhiteListedAssetByAllAppsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhiteListedAssetByAllAppsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhiteListedAssetByAllAppsResponse proto.InternalMessageInfo

type AppToAllAsset struct {
	AppId  uint64        `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Assets []types.Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets" yaml:"assets"`
}

func (m *AppToAllAsset) Reset()         { *m = AppToAllAsset{} }
func (m *AppToAllAsset) String() string { return proto.CompactTextString(m) }
func (*AppToAllAsset) ProtoMessage()    {}
func (*AppToAllAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{26}
}
func (m *AppToAllAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppToAllAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppToAllAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppToAllAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppToAllAsset.Merge(m, src)
}
func (m *AppToAllAsset) XXX_Size() int {
	return m.Size()
}
func (m *AppToAllAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_AppToAllAsset.DiscardUnknown(m)
}

var xxx_messageInfo_AppToAllAsset proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{27}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{28}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryLockerLookupTableByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerLookupTableByAppRequest) Reset()         { *m = QueryLockerLookupTableByAppRequest{} }
func (m *QueryLockerLookupTableByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerLookupTableByAppRequest) ProtoMessage()    {}
func (*QueryLockerLookupTableByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{29}
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppRequest.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppRequest proto.InternalMessageInfo

type QueryLockerLookupTableByAppResponse struct {
	TokenToLockerMapping []*TokenToLockerMapping `protobuf:"bytes,1,rep,name=token_to_locker_mapping,json=tokenToLockerMapping,proto3" json:"token_to_locker_mapping,omitempty" yaml:"token_to_locker_mapping"`
}

func (m *QueryLockerLookupTableByAppResponse) Reset()         { *m = QueryLockerLookupTableByAppResponse{} }
func (m *QueryLockerLookupTableByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerLookupTableByAppResponse) ProtoMessage()    {}
func (*QueryLockerLookupTableByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{30}
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppResponse.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppResponse proto.InternalMessageInfo

type QueryLockerLookupTableByAppAndAssetIdRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Reset() {
	*m = QueryLockerLookupTableByAppAndAssetIdRequest{}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerLookupTableByAppAndAssetIdRequest) ProtoMessage() {}
func (*QueryLockerLookupTableByAppAndAssetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{31}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdRequest proto.InternalMessageInfo

type QueryLockerLookupTableByAppAndAssetIdResponse struct {
	TokenToLockerMapping *TokenToLockerMapping `protobuf:"bytes,1,opt,name=token_to_locker_mapping,json=tokenToLockerMapping,proto3" json:"token_to_locker_mapping,omitempty" yaml:"token_to_locker_mapping"`
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Reset() {
	*m = QueryLockerLookupTableByAppAndAssetIdResponse{}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerLookupTableByAppAndAssetIdResponse) ProtoMessage() {}
func (*QueryLockerLookupTableByAppAndAssetIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{32}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.Merge(m, src)
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerLookupTableByAppAndAssetIdResponse proto.InternalMessageInfo

type QueryLockerTotalDepositedByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryLockerTotalDepositedByAppRequest) Reset()         { *m = QueryLockerTotalDepositedByAppRequest{} }
func (m *QueryLockerTotalDepositedByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockerTotalDepositedByAppRequest) ProtoMessage()    {}
func (*QueryLockerTotalDepositedByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{33}
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.Merge(m, src)
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalDepositedByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalDepositedByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalDepositedByAppRequest proto.InternalMessageInfo

type QueryLockerTotalDepositedByAppResponse struct {
	LockedDepositedAmountDataMap []LockedDepositedAmountDataMap `protobuf:"bytes,1,rep,name=locked_deposited_amount_data_map,json=lockedDepositedAmountDataMap,proto3" json:"locked_deposited_amount_data_map" yaml:"locked_deposited_amount_data_map"`
}

func (m *QueryLockerTotalDepositedByAppResponse) Reset() {
	*m = QueryLockerTotalDepositedByAppResponse{}
}
func (m *QueryLockerTotalDepositedByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockerTotalDepositedByAppResponse) ProtoMessage()    {}
func (*QueryLockerTotalDepositedByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{34}
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.Merge(m, src)
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalDepositedByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalDepositedByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalDepositedByAppResponse proto.InternalMessageInfo

type QueryLockerTotalRewardsByAssetAppWiseRequest struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) Reset() {
	*m = QueryLockerTotalRewardsByAssetAppWiseRequest{}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerTotalRewardsByAssetAppWiseRequest) ProtoMessage() {}
func (*QueryLockerTotalRewardsByAssetAppWiseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{35}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseRequest.Merge(m, src)
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseRequest proto.InternalMessageInfo

type QueryLockerTotalRewardsByAssetAppWiseResponse struct {
	TotalRewards LockerTotalRewardsByAssetAppWise `protobuf:"bytes,1,opt,name=total_rewards,json=totalRewards,proto3" json:"total_rewards" yaml:"total_rewards"`
}

func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) Reset() {
	*m = QueryLockerTotalRewardsByAssetAppWiseResponse{}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLockerTotalRewardsByAssetAppWiseResponse) ProtoMessage() {}
func (*QueryLockerTotalRewardsByAssetAppWiseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{36}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseResponse.Merge(m, src)
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockerTotalRewardsByAssetAppWiseResponse proto.InternalMessageInfo

type QueryStateRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Height  string `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	Target  string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *QueryStateRequest) Reset()         { *m = QueryStateRequest{} }
func (m *QueryStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStateRequest) ProtoMessage()    {}
func (*QueryStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{37}
}
func (m *QueryStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateRequest.Merge(m, src)
}
func (m *QueryStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateRequest proto.InternalMessageInfo

type QueryStateResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount" yaml:"amount"`
}

func (m *QueryStateResponse) Reset()         { *m = QueryStateResponse{} }
func (m *QueryStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStateResponse) ProtoMessage()    {}
func (*QueryStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4f9c00f752dba84, []int{38}
}
func (m *QueryStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStateResponse.Merge(m, src)
}
func (m *QueryStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryLockerInfoRequest)(nil), "comdex.locker.v1beta1.QueryLockerInfoRequest")
	proto.RegisterType((*QueryLockerInfoResponse)(nil), "comdex.locker.v1beta1.QueryLockerInfoResponse")
	proto.RegisterType((*QueryLockersByAppToAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryLockersByAppToAssetIDRequest")
	proto.RegisterType((*QueryLockersByAppToAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryLockersByAppToAssetIDResponse")
	proto.RegisterType((*QueryLockerInfoByAppIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerInfoByAppIDRequest")
	proto.RegisterType((*QueryLockerInfoByAppIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerInfoByAppIDResponse")
	proto.RegisterType((*QueryTotalDepositByAppAndAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryTotalDepositByAppAndAssetIDRequest")
	proto.RegisterType((*QueryTotalDepositByAppAndAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryTotalDepositByAppAndAssetIDResponse")
	proto.RegisterType((*QueryOwnerLockerByAppIDbyOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByAppIDbyOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerByAppIDbyOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByAppIDbyOwnerResponse")
	proto.RegisterType((*QueryOwnerLockerOfAllAppsByOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerOfAllAppsByOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerOfAllAppsByOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerOfAllAppsByOwnerResponse")
	proto.RegisterType((*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest)(nil), "comdex.locker.v1beta1.QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest")
	proto.RegisterType((*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse)(nil), "comdex.locker.v1beta1.QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse")
	proto.RegisterType((*QueryOwnerLockerByAppToAssetIDbyOwnerRequest)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByAppToAssetIDbyOwnerRequest")
	proto.RegisterType((*QueryOwnerLockerByAppToAssetIDbyOwnerResponse)(nil), "comdex.locker.v1beta1.QueryOwnerLockerByAppToAssetIDbyOwnerResponse")
	proto.RegisterType((*QueryLockerByAppByOwnerRequest)(nil), "comdex.locker.v1beta1.QueryLockerByAppByOwnerRequest")
	proto.RegisterType((*QueryLockerByAppByOwnerResponse)(nil), "comdex.locker.v1beta1.QueryLockerByAppByOwnerResponse")
	proto.RegisterType((*QueryLockerCountByAppIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerCountByAppIDRequest")
	proto.RegisterType((*QueryLockerCountByAppIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerCountByAppIDResponse")
	proto.RegisterType((*QueryLockerCountByAppToAssetIDRequest)(nil), "comdex.locker.v1beta1.QueryLockerCountByAppToAssetIDRequest")
	proto.RegisterType((*QueryLockerCountByAppToAssetIDResponse)(nil), "comdex.locker.v1beta1.QueryLockerCountByAppToAssetIDResponse")
	proto.RegisterType((*QueryWhiteListedAssetIDsByAppIDRequest)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetIDsByAppIDRequest")
	proto.RegisterType((*QueryWhiteListedAssetIDsByAppIDResponse)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetIDsByAppIDResponse")
	proto.RegisterType((*QueryWhiteListedAssetByAllAppsRequest)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetByAllAppsRequest")
	proto.RegisterType((*QueryWhiteListedAssetByAllAppsResponse)(nil), "comdex.locker.v1beta1.QueryWhiteListedAssetByAllAppsResponse")
	proto.RegisterType((*AppToAllAsset)(nil), "comdex.locker.v1beta1.AppToAllAsset")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.locker.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.locker.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLockerLookupTableByAppRequest)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppRequest")
	proto.RegisterType((*QueryLockerLookupTableByAppResponse)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppResponse")
	proto.RegisterType((*QueryLockerLookupTableByAppAndAssetIdRequest)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppAndAssetIdRequest")
	proto.RegisterType((*QueryLockerLookupTableByAppAndAssetIdResponse)(nil), "comdex.locker.v1beta1.QueryLockerLookupTableByAppAndAssetIdResponse")
	proto.RegisterType((*QueryLockerTotalDepositedByAppRequest)(nil), "comdex.locker.v1beta1.QueryLockerTotalDepositedByAppRequest")
	proto.RegisterType((*QueryLockerTotalDepositedByAppResponse)(nil), "comdex.locker.v1beta1.QueryLockerTotalDepositedByAppResponse")
	proto.RegisterType((*QueryLockerTotalRewardsByAssetAppWiseRequest)(nil), "comdex.locker.v1beta1.QueryLockerTotalRewardsByAssetAppWiseRequest")
	proto.RegisterType((*QueryLockerTotalRewardsByAssetAppWiseResponse)(nil), "comdex.locker.v1beta1.QueryLockerTotalRewardsByAssetAppWiseResponse")
	proto.RegisterType((*QueryStateRequest)(nil), "comdex.locker.v1beta1.QueryStateRequest")
	proto.RegisterType((*QueryStateResponse)(nil), "comdex.locker.v1beta1.QueryStateResponse")
}

func init() { proto.RegisterFile("comdex/locker/v1beta1/query.proto", fileDescriptor_c4f9c00f752dba84) }

var fileDescriptor_c4f9c00f752dba84 = []byte{
	// 2033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0x5d, 0x8c, 0xdc, 0x56,
	0x15, 0x5e, 0x4f, 0x92, 0x6d, 0xf7, 0x6e, 0x56, 0x25, 0x37, 0x9b, 0x66, 0x71, 0x92, 0x99, 0xcd,
	0x0d, 0xcd, 0x6e, 0x0a, 0x33, 0x26, 0x3f, 0x6d, 0x68, 0x49, 0x9a, 0xae, 0xb3, 0xfd, 0xd9, 0xed,
	0x86, 0x24, 0xee, 0x42, 0x44, 0x04, 0x1d, 0x3c, 0x63, 0xef, 0xc4, 0x8a, 0xd7, 0x76, 0xe7, 0x7a,
	0x48, 0x86, 0x68, 0x1f, 0x00, 0x89, 0x1f, 0xf5, 0x05, 0xa9, 0x12, 0xef, 0x48, 0x3c, 0x54, 0x02,
	0x21, 0x1e, 0x79, 0x46, 0x42, 0xca, 0x1b, 0x15, 0x48, 0x80, 0x84, 0x34, 0x82, 0x84, 0x17, 0xc4,
	0x03, 0xd2, 0x88, 0x27, 0x9e, 0x2a, 0x9f, 0x7b, 0xec, 0xb1, 0x67, 0xc7, 0x3f, 0x33, 0x49, 0xf6,
	0x29, 0x63, 0xfb, 0x9c, 0x73, 0xbf, 0xef, 0xdc, 0xe3, 0x73, 0xae, 0xbf, 0x0d, 0x39, 0xd9, 0x74,
	0xb7, 0x0d, 0xf3, 0xbe, 0x62, 0xbb, 0xcd, 0xbb, 0x66, 0x5b, 0xf9, 0xee, 0xd9, 0x86, 0xe9, 0xeb,
	0x67, 0x95, 0x0f, 0x3b, 0x66, 0xbb, 0x5b, 0xf3, 0xda, 0xae, 0xef, 0xd2, 0x23, 0xc2, 0xa4, 0x26,
	0x4c, 0x6a, 0x68, 0x22, 0xcf, 0xb7, 0xdc, 0x96, 0x0b, 0x16, 0x4a, 0xf0, 0x4b, 0x18, 0xcb, 0xc7,
	0x5b, 0xae, 0xdb, 0xb2, 0x4d, 0x45, 0xf7, 0x2c, 0x45, 0x77, 0x1c, 0xd7, 0xd7, 0x7d, 0xcb, 0x75,
	0x38, 0x3e, 0x65, 0xa3, 0x57, 0xc3, 0xc8, 0x99, 0x36, 0x9e, 0xde, 0xd6, 0xb7, 0xc3, 0x38, 0x8b,
	0x68, 0xa3, 0x73, 0x6e, 0xfa, 0x91, 0x09, 0x5c, 0xa1, 0x45, 0xb9, 0xe9, 0xf2, 0x6d, 0x97, 0x2b,
	0x0d, 0x9d, 0x9b, 0x91, 0x41, 0xd3, 0xb5, 0x1c, 0x7c, 0xfe, 0x72, 0xfc, 0x39, 0xb0, 0x8d, 0xad,
	0xd4, 0xb2, 0x1c, 0x80, 0x2d, 0x6c, 0xd9, 0x45, 0xf2, 0xe2, 0xcd, 0xc0, 0x62, 0x03, 0x10, 0xad,
	0x39, 0x5b, 0xae, 0x66, 0x7e, 0xd8, 0x31, 0xb9, 0x4f, 0x4f, 0x90, 0x92, 0x65, 0x2c, 0x48, 0x8b,
	0xd2, 0xf2, 0x8c, 0x3a, 0xd7, 0xef, 0x55, 0x66, 0xba, 0xfa, 0xb6, 0xfd, 0x3a, 0xb3, 0x0c, 0xa6,
	0x95, 0x2c, 0x83, 0x75, 0xc8, 0xd1, 0x5d, 0x8e, 0xdc, 0x73, 0x1d, 0x6e, 0xd2, 0xdb, 0x64, 0x56,
	0x10, 0xac, 0x5b, 0xce, 0x96, 0x0b, 0x21, 0x66, 0xcf, 0x9d, 0xa8, 0x8d, 0x4c, 0x75, 0x4d, 0xf8,
	0xab, 0xf2, 0xc3, 0x5e, 0x65, 0xaa, 0xdf, 0xab, 0x50, 0xb1, 0x4a, 0xcc, 0x9f, 0x69, 0xc4, 0x8e,
	0xd6, 0x60, 0x3b, 0xe4, 0x64, 0x6c, 0x59, 0xae, 0x76, 0x57, 0x3c, 0x6f, 0xd3, 0x5d, 0x09, 0xb2,
	0xb3, 0xb6, 0x1a, 0x42, 0x5f, 0x26, 0xd3, 0xba, 0xe7, 0xd5, 0x11, 0xfe, 0x7e, 0xf5, 0x50, 0xbf,
	0x57, 0x99, 0x13, 0x81, 0xc5, 0x7d, 0xa6, 0x1d, 0xd0, 0x3d, 0x6f, 0xcd, 0xa0, 0x35, 0xf2, 0x3c,
	0x64, 0x36, 0xb0, 0x2d, 0x81, 0xed, 0xe1, 0x7e, 0xaf, 0xf2, 0x02, 0xda, 0xe2, 0x13, 0xa6, 0x3d,
	0x07, 0x3f, 0xd7, 0x0c, 0x76, 0x9b, 0xb0, 0xac, 0xe5, 0x31, 0x01, 0x17, 0x08, 0x09, 0x09, 0x18,
	0x7c, 0x41, 0x5a, 0xdc, 0xb7, 0x3c, 0xa3, 0x1e, 0xe9, 0xf7, 0x2a, 0x87, 0x92, 0xe4, 0x0c, 0xce,
	0xb4, 0x19, 0xe4, 0x66, 0x70, 0xb6, 0x46, 0x4e, 0x0c, 0x65, 0x14, 0xc2, 0x4f, 0x40, 0x8b, 0x7d,
	0x83, 0x94, 0xd3, 0x42, 0x3d, 0x11, 0xc4, 0x1f, 0x4a, 0x64, 0x09, 0x02, 0x6f, 0xba, 0xbe, 0x6e,
	0xaf, 0x9a, 0x9e, 0xcb, 0x2d, 0x1f, 0x42, 0xaf, 0x38, 0xc6, 0x9e, 0x6d, 0xc2, 0x75, 0xb2, 0x9c,
	0x0f, 0x02, 0x79, 0x9e, 0x22, 0x73, 0x7e, 0x60, 0x56, 0x37, 0x84, 0x9d, 0x00, 0xa3, 0x1d, 0xf4,
	0x63, 0xbe, 0xac, 0x4b, 0x5e, 0x82, 0x80, 0xd7, 0xef, 0x39, 0x66, 0x1b, 0x0b, 0x52, 0xe4, 0xab,
	0x21, 0xee, 0x8d, 0xcf, 0xe9, 0x34, 0x39, 0xe0, 0x06, 0x9e, 0x40, 0x68, 0x46, 0xfd, 0x5c, 0xbf,
	0x57, 0x39, 0x28, 0x0c, 0xe1, 0x36, 0xd3, 0xc4, 0x63, 0xf6, 0x01, 0x39, 0x9d, 0xb7, 0xf4, 0x13,
	0xed, 0xd8, 0x4d, 0xdc, 0xb0, 0x58, 0xfc, 0xeb, 0x5b, 0x2b, 0xb6, 0xbd, 0xe2, 0x79, 0x5c, 0x4d,
	0x92, 0x8b, 0x20, 0xef, 0xcb, 0x86, 0xfc, 0x1d, 0x4c, 0x7f, 0x66, 0xc8, 0x27, 0x02, 0xfd, 0xf3,
	0x12, 0x39, 0x3f, 0x58, 0x62, 0xf3, 0xfe, 0xaa, 0xe9, 0xeb, 0x96, 0xcd, 0xa3, 0xb5, 0x3c, 0x0f,
	0xd7, 0x51, 0xbb, 0xb0, 0xdf, 0xcf, 0x6c, 0x7b, 0x12, 0xa5, 0xb9, 0x2f, 0xbf, 0x34, 0xe9, 0xb7,
	0x09, 0x19, 0xb4, 0xd8, 0x85, 0xfd, 0xd0, 0xf9, 0x4e, 0xd7, 0x44, 0x3f, 0xae, 0x05, 0xfd, 0xb8,
	0x26, 0xa6, 0x4f, 0xd8, 0xfd, 0x6e, 0xe8, 0x2d, 0x13, 0xd1, 0xc7, 0xf3, 0x32, 0x88, 0xc1, 0xb4,
	0x58, 0x40, 0xf6, 0x3f, 0x89, 0x5c, 0x18, 0x2f, 0x31, 0xb8, 0x0f, 0xdf, 0x22, 0x07, 0x3b, 0xdc,
	0x6c, 0xd7, 0xfd, 0xfb, 0x75, 0x43, 0xf7, 0x75, 0xd8, 0x89, 0xd9, 0x73, 0x27, 0x53, 0x7a, 0xf2,
	0xd7, 0x39, 0x04, 0xd7, 0x7d, 0x5d, 0x3d, 0xda, 0xef, 0x55, 0x0e, 0x0b, 0x50, 0xf1, 0x00, 0x4c,
	0x23, 0x9d, 0xc8, 0x88, 0x7e, 0x90, 0x60, 0x5d, 0x02, 0xd6, 0x4b, 0xb9, 0xac, 0x05, 0xb4, 0x22,
	0xb4, 0x7f, 0x2b, 0x91, 0x2f, 0x8d, 0x7c, 0x4b, 0xa2, 0xd6, 0x3b, 0xf1, 0x7b, 0x3a, 0x66, 0xef,
	0x29, 0xfc, 0x92, 0x7c, 0x24, 0x91, 0x6a, 0x41, 0xc8, 0x69, 0x53, 0x73, 0xdf, 0xd3, 0x9b, 0x9a,
	0xed, 0xc4, 0x3c, 0x00, 0x1c, 0xea, 0xb3, 0xee, 0x6c, 0x3b, 0xa4, 0x92, 0xba, 0xe6, 0x1e, 0x50,
	0x5e, 0x4f, 0x50, 0xbe, 0xea, 0x76, 0x1c, 0x7f, 0xe2, 0x71, 0xaa, 0x26, 0xa8, 0x24, 0x63, 0x21,
	0x95, 0x0a, 0x99, 0x15, 0x73, 0xa6, 0x19, 0x3c, 0xc5, 0x29, 0x43, 0xe0, 0x16, 0xd8, 0xb3, 0xef,
	0x4b, 0x38, 0x64, 0x86, 0x83, 0xec, 0xe1, 0xe9, 0x65, 0x0d, 0x87, 0x4d, 0x06, 0x84, 0xa2, 0x74,
	0x34, 0x0c, 0x75, 0xeb, 0x8e, 0xe5, 0x9b, 0x1b, 0x16, 0xf7, 0xcd, 0x70, 0xf4, 0xf2, 0x89, 0xd3,
	0xfc, 0x36, 0xce, 0xaa, 0xac, 0x98, 0x88, 0xef, 0x18, 0x99, 0x09, 0xf9, 0x89, 0xb1, 0xb2, 0x5f,
	0x7b, 0x1e, 0x59, 0x72, 0xb6, 0x84, 0x99, 0x1e, 0x8e, 0xa3, 0x76, 0x71, 0x4a, 0x21, 0x34, 0xf6,
	0x4b, 0x29, 0x85, 0x45, 0xcc, 0x12, 0x17, 0xfc, 0x1e, 0x99, 0xf7, 0xda, 0xae, 0xd1, 0x69, 0xfa,
	0x75, 0xdf, 0xad, 0xeb, 0xb6, 0x5d, 0x87, 0xe5, 0xb0, 0x66, 0xbf, 0x90, 0x52, 0xb3, 0x22, 0xb7,
	0xb6, 0x2d, 0x82, 0x9e, 0xc2, 0xd2, 0x3d, 0x86, 0xdd, 0x6e, 0x44, 0x3c, 0xa6, 0x1d, 0xc2, 0xdb,
	0x03, 0x3f, 0xd6, 0x26, 0x73, 0x89, 0x40, 0xf4, 0x48, 0x32, 0xa5, 0x61, 0x39, 0xac, 0x93, 0x69,
	0x08, 0xc2, 0x17, 0x4a, 0x80, 0xea, 0x58, 0x88, 0x4a, 0x7c, 0x3c, 0x44, 0xa0, 0x00, 0xcc, 0x11,
	0x04, 0x33, 0x17, 0xab, 0x16, 0xce, 0x34, 0x8c, 0xc0, 0xe6, 0x09, 0x85, 0xcc, 0xdc, 0x80, 0x4f,
	0x93, 0x30, 0x61, 0x4d, 0x72, 0x38, 0x71, 0x17, 0x93, 0xb3, 0x41, 0xa6, 0xc5, 0x27, 0x4c, 0xce,
	0x59, 0x5f, 0xb8, 0x0d, 0x2f, 0x2d, 0x5c, 0x99, 0x86, 0x31, 0xd8, 0xd7, 0x12, 0x67, 0xec, 0x0d,
	0xd7, 0xbd, 0xdb, 0xf1, 0x36, 0xf5, 0x86, 0x6d, 0x42, 0x11, 0x8c, 0x5f, 0x56, 0xbf, 0x91, 0xc8,
	0xa9, 0xcc, 0x80, 0xc8, 0xe2, 0x47, 0x12, 0x39, 0xea, 0xbb, 0x77, 0x4d, 0x27, 0xd8, 0x11, 0xec,
	0x2b, 0xdb, 0xba, 0xe7, 0x59, 0x4e, 0x0b, 0xb7, 0xf9, 0x8b, 0x29, 0xbc, 0x36, 0x03, 0xaf, 0x4d,
	0x57, 0xc4, 0xbf, 0x26, 0x5c, 0x54, 0xd6, 0xef, 0x55, 0xca, 0x02, 0x50, 0x4a, 0x54, 0xa6, 0xcd,
	0xfb, 0x23, 0x3c, 0xd9, 0x4f, 0xc2, 0x71, 0x37, 0x1a, 0x70, 0x74, 0xca, 0x35, 0x9e, 0x7d, 0xc7,
	0xf8, 0x5d, 0x38, 0xc6, 0xf2, 0xa1, 0x14, 0xca, 0xa2, 0xb4, 0x77, 0x59, 0xbc, 0x99, 0xe8, 0xb7,
	0xf1, 0x6f, 0x05, 0xd3, 0x98, 0xb0, 0x92, 0xfe, 0x2a, 0x25, 0x1a, 0xe8, 0xc8, 0x98, 0x98, 0x86,
	0x5f, 0x4b, 0x64, 0x11, 0x70, 0x1a, 0xe1, 0x97, 0x87, 0x69, 0xd4, 0xf5, 0xed, 0xa0, 0x77, 0xc2,
	0x01, 0x2a, 0x40, 0x8f, 0x55, 0x75, 0x3e, 0x6b, 0xe0, 0x19, 0x51, 0xfc, 0x15, 0x70, 0x0e, 0xce,
	0x5b, 0xd7, 0x74, 0x4f, 0x55, 0xf0, 0x1d, 0x5a, 0x8a, 0x8d, 0xc1, 0x8c, 0xa5, 0x98, 0x76, 0xdc,
	0xce, 0x08, 0x37, 0x5c, 0x72, 0xc0, 0x4c, 0x33, 0xef, 0xe9, 0x6d, 0x83, 0xe3, 0x51, 0x72, 0xc5,
	0xf3, 0x6e, 0x59, 0xdc, 0x7c, 0xf6, 0x25, 0xf7, 0xab, 0x64, 0xc9, 0x65, 0x41, 0x89, 0x7a, 0x33,
	0x7e, 0xe3, 0xb5, 0x85, 0x19, 0xd6, 0xd9, 0xc5, 0xcc, 0x83, 0x44, 0x7a, 0x5c, 0xf5, 0x38, 0xe6,
	0x76, 0x3e, 0xac, 0xbb, 0x58, 0x6c, 0x86, 0x9f, 0x8e, 0xe8, 0xc9, 0x38, 0x39, 0x04, 0x60, 0xdf,
	0xf7, 0x75, 0x3f, 0x4a, 0xce, 0x02, 0x79, 0x4e, 0x37, 0x8c, 0xb6, 0xc9, 0x05, 0x94, 0x19, 0x2d,
	0xbc, 0xa4, 0xf3, 0xe4, 0x80, 0x61, 0x3a, 0xee, 0xb6, 0x38, 0x3c, 0x69, 0xe2, 0x82, 0xbe, 0x48,
	0xa6, 0xef, 0x98, 0x56, 0xeb, 0x8e, 0x2f, 0x4e, 0x95, 0x1a, 0x5e, 0x05, 0xf7, 0x7d, 0xbd, 0xdd,
	0x32, 0x7d, 0xf8, 0x92, 0x98, 0xd1, 0xf0, 0x8a, 0xfd, 0x54, 0xc2, 0xee, 0x8c, 0xab, 0x62, 0x1e,
	0x38, 0x99, 0x16, 0xdb, 0x8e, 0x09, 0xf8, 0x7c, 0xe2, 0x08, 0x1e, 0xd2, 0xbf, 0xea, 0x5a, 0x8e,
	0xfa, 0xe6, 0x50, 0xf7, 0x07, 0x37, 0xf6, 0xff, 0x5e, 0x65, 0xa9, 0x65, 0xf9, 0x77, 0x3a, 0x8d,
	0x20, 0x75, 0x0a, 0xca, 0x48, 0xe2, 0x9f, 0x2a, 0x37, 0xee, 0x2a, 0x7e, 0xd7, 0x33, 0x39, 0x44,
	0xd0, 0x70, 0xa9, 0x73, 0xfd, 0x45, 0x72, 0x00, 0xb0, 0xd0, 0x5f, 0x48, 0xe4, 0x85, 0x21, 0xd5,
	0x81, 0x56, 0x53, 0xf6, 0x60, 0xb4, 0xe6, 0x24, 0xd7, 0x8a, 0x9a, 0x0b, 0xc6, 0x4c, 0xf9, 0xc1,
	0x9f, 0xff, 0xf5, 0x71, 0xe9, 0x0c, 0x5d, 0x52, 0xb2, 0xc4, 0x37, 0x38, 0x1d, 0x2a, 0x0f, 0x2c,
	0x63, 0x87, 0xfe, 0x5d, 0x22, 0x72, 0xba, 0x80, 0x43, 0xbf, 0x92, 0xbf, 0xfe, 0x68, 0xc9, 0x49,
	0x7e, 0x6d, 0x02, 0x4f, 0x24, 0xf1, 0x2e, 0x90, 0x50, 0xe9, 0x9b, 0x99, 0x24, 0x38, 0xb0, 0xa8,
	0x87, 0x2f, 0x8c, 0xf2, 0x40, 0xbc, 0x66, 0x3b, 0xca, 0x83, 0xf0, 0xd6, 0x0e, 0xfd, 0xbd, 0xb4,
	0x4b, 0xcd, 0xc3, 0x83, 0x13, 0xbd, 0x50, 0x2c, 0xb3, 0xc9, 0xb3, 0x9b, 0xfc, 0xca, 0x98, 0x5e,
	0xc8, 0xe8, 0xab, 0xc0, 0xe8, 0x15, 0x7a, 0xbe, 0x10, 0x23, 0xe0, 0x11, 0xf1, 0xa1, 0x7d, 0x89,
	0x2c, 0xe6, 0xc9, 0x3b, 0xf4, 0x8d, 0x2c, 0x60, 0xf9, 0xe2, 0x94, 0x7c, 0x65, 0x62, 0x7f, 0xa4,
	0x78, 0x0d, 0x28, 0xbe, 0x43, 0xdf, 0x4a, 0xa1, 0x98, 0x10, 0x9d, 0x80, 0x63, 0xe6, 0xce, 0xfd,
	0x57, 0xc2, 0xcf, 0x95, 0x54, 0x1d, 0x88, 0x5e, 0xca, 0x82, 0x9c, 0xa7, 0x5c, 0xc9, 0x97, 0x27,
	0xf4, 0x46, 0xba, 0x37, 0x80, 0xee, 0x3a, 0x7d, 0x37, 0x85, 0x2e, 0x7c, 0xf2, 0x85, 0x83, 0xb9,
	0xd1, 0x15, 0x07, 0x5a, 0xcf, 0x0b, 0x7e, 0xc2, 0xa3, 0x18, 0x69, 0xb8, 0x06, 0xc6, 0x8b, 0x79,
	0x32, 0x52, 0xf6, 0x36, 0xe7, 0x4b, 0x5a, 0xd9, 0xdb, 0x5c, 0x40, 0xbf, 0x62, 0xeb, 0xc0, 0x7b,
	0x95, 0xaa, 0x45, 0x78, 0x43, 0x39, 0x0f, 0xc8, 0xf3, 0x90, 0x3a, 0x32, 0xfe, 0xa4, 0x14, 0x57,
	0x31, 0xf2, 0xc5, 0x1b, 0xba, 0x9e, 0x8b, 0xbe, 0xb0, 0x34, 0x26, 0xbf, 0xf7, 0x54, 0x62, 0x61,
	0x56, 0xea, 0x90, 0x95, 0x6f, 0xd2, 0x5b, 0x45, 0xb2, 0xe2, 0xdf, 0xaf, 0x1a, 0x22, 0x30, 0xe4,
	0x26, 0x7c, 0x13, 0x76, 0x55, 0x44, 0xfc, 0x75, 0xf8, 0xb8, 0x94, 0xa2, 0xc8, 0x0e, 0xab, 0x27,
	0xf4, 0xea, 0x38, 0x75, 0x9d, 0x22, 0x17, 0xc9, 0xab, 0x4f, 0x16, 0x64, 0x92, 0xac, 0x44, 0xad,
	0x2f, 0x24, 0xbd, 0xeb, 0x3d, 0x89, 0xb2, 0x11, 0x15, 0xd0, 0x1f, 0xa5, 0xc4, 0xdf, 0x5c, 0xe2,
	0x92, 0x0a, 0x2d, 0xd0, 0xa9, 0x47, 0xc8, 0x3e, 0xf2, 0xab, 0xe3, 0xba, 0x21, 0xd7, 0xb7, 0x80,
	0xeb, 0x15, 0x7a, 0x39, 0x7f, 0xf0, 0x02, 0xcb, 0x94, 0x26, 0xf0, 0x87, 0x24, 0xa3, 0xb8, 0xb2,
	0x52, 0x84, 0xd1, 0x08, 0x55, 0xa7, 0x08, 0xa3, 0x51, 0x02, 0x4e, 0xee, 0xcc, 0x12, 0x0d, 0x1d,
	0x79, 0x0d, 0xcf, 0xac, 0xff, 0x48, 0x29, 0x6a, 0xd3, 0xe0, 0x68, 0x71, 0x69, 0x1c, 0x5c, 0xbb,
	0x8e, 0x17, 0x97, 0x27, 0xf4, 0x46, 0x72, 0x1b, 0x40, 0xee, 0x6d, 0xba, 0x5a, 0x94, 0x5c, 0xe6,
	0xb0, 0xfa, 0xb7, 0x84, 0x7a, 0x58, 0xba, 0x50, 0x43, 0x33, 0x01, 0xe7, 0x8a, 0x46, 0xf2, 0x1b,
	0x93, 0xba, 0x23, 0xe1, 0x77, 0x80, 0xf0, 0x0a, 0xbd, 0x92, 0x42, 0xf8, 0x5e, 0x10, 0xc2, 0x86,
	0x10, 0x11, 0xd7, 0xa8, 0x3f, 0xc5, 0x77, 0xf6, 0x2f, 0xe1, 0xce, 0xa6, 0x4a, 0x44, 0xd9, 0x3b,
	0x9b, 0xa7, 0x41, 0xc9, 0x97, 0x27, 0xf4, 0x46, 0xa2, 0x17, 0x81, 0xe8, 0x59, 0xaa, 0x14, 0x26,
	0x2a, 0x98, 0xd1, 0x8f, 0x24, 0x32, 0x1b, 0xd3, 0x72, 0xe8, 0x99, 0x2c, 0x1c, 0x09, 0x15, 0x48,
	0x7e, 0xb9, 0x88, 0x29, 0xe2, 0x7b, 0x09, 0xf0, 0x55, 0xe8, 0x09, 0x25, 0xeb, 0x4f, 0xdf, 0xf4,
	0x4f, 0x12, 0x39, 0x96, 0xa1, 0x33, 0xd0, 0x02, 0xc7, 0xeb, 0x14, 0xa1, 0x48, 0x7e, 0x7d, 0x12,
	0x57, 0x44, 0x7f, 0x09, 0xd0, 0xbf, 0x4a, 0x2f, 0x64, 0xb6, 0xb9, 0xaa, 0x0d, 0xfe, 0xd5, 0x46,
	0xb7, 0xaa, 0x7b, 0xde, 0xa0, 0x76, 0x7e, 0x5c, 0x4a, 0x48, 0x10, 0xe9, 0xe2, 0x49, 0xf6, 0x14,
	0x2b, 0xa8, 0x02, 0x65, 0x4f, 0xb1, 0xa2, 0xfa, 0x0d, 0x7b, 0x1f, 0x28, 0x5f, 0xa3, 0xef, 0x8d,
	0x41, 0xb9, 0xaa, 0x3b, 0x46, 0x15, 0xbf, 0xdf, 0x47, 0x76, 0x8c, 0xa1, 0x4c, 0xa4, 0x7f, 0x7b,
	0x17, 0xc9, 0x44, 0xae, 0x38, 0x51, 0x24, 0x13, 0xf9, 0xb2, 0x42, 0x81, 0x4c, 0x04, 0x89, 0x40,
	0x5d, 0xa0, 0x68, 0x26, 0x7a, 0xc9, 0x49, 0x31, 0x42, 0x42, 0x2a, 0x32, 0x29, 0xd2, 0xd5, 0xac,
	0x22, 0x93, 0x22, 0x43, 0xb7, 0x62, 0x57, 0x80, 0xf4, 0x6b, 0xf4, 0x62, 0xf6, 0xf6, 0x47, 0x42,
	0xd3, 0xae, 0xa2, 0x6f, 0x12, 0x32, 0x90, 0x26, 0xe8, 0x72, 0x16, 0x9a, 0xb8, 0x66, 0x22, 0x9f,
	0x29, 0x60, 0x89, 0x18, 0xa7, 0x54, 0xed, 0xe1, 0x3f, 0xcb, 0x53, 0x9f, 0x3c, 0x2a, 0x4f, 0x3d,
	0x7c, 0x54, 0x96, 0x3e, 0x7d, 0x54, 0x96, 0xfe, 0xf1, 0xa8, 0x2c, 0xfd, 0xec, 0x71, 0x79, 0xea,
	0xd3, 0xc7, 0xe5, 0xa9, 0xbf, 0x3d, 0x2e, 0x4f, 0xdd, 0xfe, 0x72, 0x42, 0xc7, 0x08, 0x02, 0x57,
	0xdd, 0xad, 0x2d, 0xab, 0x69, 0xe9, 0x76, 0xc8, 0x2c, 0xe2, 0x06, 0xaa, 0x46, 0x63, 0x1a, 0xfe,
	0x43, 0xcc, 0xf9, 0xcf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x98, 0x12, 0x51, 0x36, 0x24, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryLockerInfo(ctx context.Context, in *QueryLockerInfoRequest, opts ...grpc.CallOption) (*QueryLockerInfoResponse, error)
	QueryLockersByAppToAssetID(ctx context.Context, in *QueryLockersByAppToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockersByAppToAssetIDResponse, error)
	QueryLockerInfoByAppID(ctx context.Context, in *QueryLockerInfoByAppIDRequest, opts ...grpc.CallOption) (*QueryLockerInfoByAppIDResponse, error)
	QueryTotalDepositByAppAndAssetID(ctx context.Context, in *QueryTotalDepositByAppAndAssetIDRequest, opts ...grpc.CallOption) (*QueryTotalDepositByAppAndAssetIDResponse, error)
	QueryOwnerLockerByAppIDbyOwner(ctx context.Context, in *QueryOwnerLockerByAppIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByAppIDbyOwnerResponse, error)
	QueryOwnerLockerOfAllAppsByOwner(ctx context.Context, in *QueryOwnerLockerOfAllAppsByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerOfAllAppsByOwnerResponse, error)
	QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(ctx context.Context, in *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest, opts ...grpc.CallOption) (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse, error)
	QueryOwnerLockerByAppToAssetIDbyOwner(ctx context.Context, in *QueryOwnerLockerByAppToAssetIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse, error)
	QueryLockerByAppByOwner(ctx context.Context, in *QueryLockerByAppByOwnerRequest, opts ...grpc.CallOption) (*QueryLockerByAppByOwnerResponse, error)
	QueryLockerCountByAppID(ctx context.Context, in *QueryLockerCountByAppIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByAppIDResponse, error)
	QueryLockerCountByAppToAssetID(ctx context.Context, in *QueryLockerCountByAppToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByAppToAssetIDResponse, error)
	QueryWhiteListedAssetIDsByAppID(ctx context.Context, in *QueryWhiteListedAssetIDsByAppIDRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetIDsByAppIDResponse, error)
	QueryWhiteListedAssetByAllApps(ctx context.Context, in *QueryWhiteListedAssetByAllAppsRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetByAllAppsResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryLockerLookupTableByApp(ctx context.Context, in *QueryLockerLookupTableByAppRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppResponse, error)
	QueryLockerLookupTableByAppAndAssetId(ctx context.Context, in *QueryLockerLookupTableByAppAndAssetIdRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppAndAssetIdResponse, error)
	QueryLockerTotalRewardsByAssetAppWise(ctx context.Context, in *QueryLockerTotalRewardsByAssetAppWiseRequest, opts ...grpc.CallOption) (*QueryLockerTotalRewardsByAssetAppWiseResponse, error)
	QueryLockerTotalDepositedByApp(ctx context.Context, in *QueryLockerTotalDepositedByAppRequest, opts ...grpc.CallOption) (*QueryLockerTotalDepositedByAppResponse, error)
	QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryLockerInfo(ctx context.Context, in *QueryLockerInfoRequest, opts ...grpc.CallOption) (*QueryLockerInfoResponse, error) {
	out := new(QueryLockerInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockersByAppToAssetID(ctx context.Context, in *QueryLockersByAppToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockersByAppToAssetIDResponse, error) {
	out := new(QueryLockersByAppToAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockersByAppToAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerInfoByAppID(ctx context.Context, in *QueryLockerInfoByAppIDRequest, opts ...grpc.CallOption) (*QueryLockerInfoByAppIDResponse, error) {
	out := new(QueryLockerInfoByAppIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerInfoByAppID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalDepositByAppAndAssetID(ctx context.Context, in *QueryTotalDepositByAppAndAssetIDRequest, opts ...grpc.CallOption) (*QueryTotalDepositByAppAndAssetIDResponse, error) {
	out := new(QueryTotalDepositByAppAndAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryTotalDepositByAppAndAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerByAppIDbyOwner(ctx context.Context, in *QueryOwnerLockerByAppIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByAppIDbyOwnerResponse, error) {
	out := new(QueryOwnerLockerByAppIDbyOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppIDbyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerOfAllAppsByOwner(ctx context.Context, in *QueryOwnerLockerOfAllAppsByOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerOfAllAppsByOwnerResponse, error) {
	out := new(QueryOwnerLockerOfAllAppsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllAppsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(ctx context.Context, in *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest, opts ...grpc.CallOption) (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse, error) {
	out := new(QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfAppByOwnerByAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOwnerLockerByAppToAssetIDbyOwner(ctx context.Context, in *QueryOwnerLockerByAppToAssetIDbyOwnerRequest, opts ...grpc.CallOption) (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse, error) {
	out := new(QueryOwnerLockerByAppToAssetIDbyOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppToAssetIDbyOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerByAppByOwner(ctx context.Context, in *QueryLockerByAppByOwnerRequest, opts ...grpc.CallOption) (*QueryLockerByAppByOwnerResponse, error) {
	out := new(QueryLockerByAppByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerByAppByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerCountByAppID(ctx context.Context, in *QueryLockerCountByAppIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByAppIDResponse, error) {
	out := new(QueryLockerCountByAppIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerCountByAppID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerCountByAppToAssetID(ctx context.Context, in *QueryLockerCountByAppToAssetIDRequest, opts ...grpc.CallOption) (*QueryLockerCountByAppToAssetIDResponse, error) {
	out := new(QueryLockerCountByAppToAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerCountByAppToAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWhiteListedAssetIDsByAppID(ctx context.Context, in *QueryWhiteListedAssetIDsByAppIDRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetIDsByAppIDResponse, error) {
	out := new(QueryWhiteListedAssetIDsByAppIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByAppID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryWhiteListedAssetByAllApps(ctx context.Context, in *QueryWhiteListedAssetByAllAppsRequest, opts ...grpc.CallOption) (*QueryWhiteListedAssetByAllAppsResponse, error) {
	out := new(QueryWhiteListedAssetByAllAppsResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerLookupTableByApp(ctx context.Context, in *QueryLockerLookupTableByAppRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppResponse, error) {
	out := new(QueryLockerLookupTableByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerLookupTableByAppAndAssetId(ctx context.Context, in *QueryLockerLookupTableByAppAndAssetIdRequest, opts ...grpc.CallOption) (*QueryLockerLookupTableByAppAndAssetIdResponse, error) {
	out := new(QueryLockerLookupTableByAppAndAssetIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerTotalRewardsByAssetAppWise(ctx context.Context, in *QueryLockerTotalRewardsByAssetAppWiseRequest, opts ...grpc.CallOption) (*QueryLockerTotalRewardsByAssetAppWiseResponse, error) {
	out := new(QueryLockerTotalRewardsByAssetAppWiseResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerTotalRewardsByAssetAppWise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockerTotalDepositedByApp(ctx context.Context, in *QueryLockerTotalDepositedByAppRequest, opts ...grpc.CallOption) (*QueryLockerTotalDepositedByAppResponse, error) {
	out := new(QueryLockerTotalDepositedByAppResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryState(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Query/QueryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryLockerInfo(context.Context, *QueryLockerInfoRequest) (*QueryLockerInfoResponse, error)
	QueryLockersByAppToAssetID(context.Context, *QueryLockersByAppToAssetIDRequest) (*QueryLockersByAppToAssetIDResponse, error)
	QueryLockerInfoByAppID(context.Context, *QueryLockerInfoByAppIDRequest) (*QueryLockerInfoByAppIDResponse, error)
	QueryTotalDepositByAppAndAssetID(context.Context, *QueryTotalDepositByAppAndAssetIDRequest) (*QueryTotalDepositByAppAndAssetIDResponse, error)
	QueryOwnerLockerByAppIDbyOwner(context.Context, *QueryOwnerLockerByAppIDbyOwnerRequest) (*QueryOwnerLockerByAppIDbyOwnerResponse, error)
	QueryOwnerLockerOfAllAppsByOwner(context.Context, *QueryOwnerLockerOfAllAppsByOwnerRequest) (*QueryOwnerLockerOfAllAppsByOwnerResponse, error)
	QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(context.Context, *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse, error)
	QueryOwnerLockerByAppToAssetIDbyOwner(context.Context, *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse, error)
	QueryLockerByAppByOwner(context.Context, *QueryLockerByAppByOwnerRequest) (*QueryLockerByAppByOwnerResponse, error)
	QueryLockerCountByAppID(context.Context, *QueryLockerCountByAppIDRequest) (*QueryLockerCountByAppIDResponse, error)
	QueryLockerCountByAppToAssetID(context.Context, *QueryLockerCountByAppToAssetIDRequest) (*QueryLockerCountByAppToAssetIDResponse, error)
	QueryWhiteListedAssetIDsByAppID(context.Context, *QueryWhiteListedAssetIDsByAppIDRequest) (*QueryWhiteListedAssetIDsByAppIDResponse, error)
	QueryWhiteListedAssetByAllApps(context.Context, *QueryWhiteListedAssetByAllAppsRequest) (*QueryWhiteListedAssetByAllAppsResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryLockerLookupTableByApp(context.Context, *QueryLockerLookupTableByAppRequest) (*QueryLockerLookupTableByAppResponse, error)
	QueryLockerLookupTableByAppAndAssetId(context.Context, *QueryLockerLookupTableByAppAndAssetIdRequest) (*QueryLockerLookupTableByAppAndAssetIdResponse, error)
	QueryLockerTotalRewardsByAssetAppWise(context.Context, *QueryLockerTotalRewardsByAssetAppWiseRequest) (*QueryLockerTotalRewardsByAssetAppWiseResponse, error)
	QueryLockerTotalDepositedByApp(context.Context, *QueryLockerTotalDepositedByAppRequest) (*QueryLockerTotalDepositedByAppResponse, error)
	QueryState(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryLockerInfo(ctx context.Context, req *QueryLockerInfoRequest) (*QueryLockerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerInfo not implemented")
}
func (*UnimplementedQueryServer) QueryLockersByAppToAssetID(ctx context.Context, req *QueryLockersByAppToAssetIDRequest) (*QueryLockersByAppToAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockersByAppToAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryLockerInfoByAppID(ctx context.Context, req *QueryLockerInfoByAppIDRequest) (*QueryLockerInfoByAppIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerInfoByAppID not implemented")
}
func (*UnimplementedQueryServer) QueryTotalDepositByAppAndAssetID(ctx context.Context, req *QueryTotalDepositByAppAndAssetIDRequest) (*QueryTotalDepositByAppAndAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalDepositByAppAndAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerByAppIDbyOwner(ctx context.Context, req *QueryOwnerLockerByAppIDbyOwnerRequest) (*QueryOwnerLockerByAppIDbyOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerByAppIDbyOwner not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerOfAllAppsByOwner(ctx context.Context, req *QueryOwnerLockerOfAllAppsByOwnerRequest) (*QueryOwnerLockerOfAllAppsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerOfAllAppsByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(ctx context.Context, req *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) (*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerTxDetailsLockerOfAppByOwnerByAsset not implemented")
}
func (*UnimplementedQueryServer) QueryOwnerLockerByAppToAssetIDbyOwner(ctx context.Context, req *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) (*QueryOwnerLockerByAppToAssetIDbyOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnerLockerByAppToAssetIDbyOwner not implemented")
}
func (*UnimplementedQueryServer) QueryLockerByAppByOwner(ctx context.Context, req *QueryLockerByAppByOwnerRequest) (*QueryLockerByAppByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerByAppByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryLockerCountByAppID(ctx context.Context, req *QueryLockerCountByAppIDRequest) (*QueryLockerCountByAppIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerCountByAppID not implemented")
}
func (*UnimplementedQueryServer) QueryLockerCountByAppToAssetID(ctx context.Context, req *QueryLockerCountByAppToAssetIDRequest) (*QueryLockerCountByAppToAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerCountByAppToAssetID not implemented")
}
func (*UnimplementedQueryServer) QueryWhiteListedAssetIDsByAppID(ctx context.Context, req *QueryWhiteListedAssetIDsByAppIDRequest) (*QueryWhiteListedAssetIDsByAppIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhiteListedAssetIDsByAppID not implemented")
}
func (*UnimplementedQueryServer) QueryWhiteListedAssetByAllApps(ctx context.Context, req *QueryWhiteListedAssetByAllAppsRequest) (*QueryWhiteListedAssetByAllAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWhiteListedAssetByAllApps not implemented")
}
func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryLockerLookupTableByApp(ctx context.Context, req *QueryLockerLookupTableByAppRequest) (*QueryLockerLookupTableByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerLookupTableByApp not implemented")
}
func (*UnimplementedQueryServer) QueryLockerLookupTableByAppAndAssetId(ctx context.Context, req *QueryLockerLookupTableByAppAndAssetIdRequest) (*QueryLockerLookupTableByAppAndAssetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerLookupTableByAppAndAssetId not implemented")
}
func (*UnimplementedQueryServer) QueryLockerTotalRewardsByAssetAppWise(ctx context.Context, req *QueryLockerTotalRewardsByAssetAppWiseRequest) (*QueryLockerTotalRewardsByAssetAppWiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerTotalRewardsByAssetAppWise not implemented")
}
func (*UnimplementedQueryServer) QueryLockerTotalDepositedByApp(ctx context.Context, req *QueryLockerTotalDepositedByAppRequest) (*QueryLockerTotalDepositedByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockerTotalDepositedByApp not implemented")
}
func (*UnimplementedQueryServer) QueryState(ctx context.Context, req *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryState not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryLockerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerInfo(ctx, req.(*QueryLockerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockersByAppToAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockersByAppToAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockersByAppToAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockersByAppToAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockersByAppToAssetID(ctx, req.(*QueryLockersByAppToAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerInfoByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerInfoByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerInfoByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerInfoByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerInfoByAppID(ctx, req.(*QueryLockerInfoByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalDepositByAppAndAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalDepositByAppAndAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalDepositByAppAndAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryTotalDepositByAppAndAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalDepositByAppAndAssetID(ctx, req.(*QueryTotalDepositByAppAndAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerByAppIDbyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerByAppIDbyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerByAppIDbyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppIDbyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerByAppIDbyOwner(ctx, req.(*QueryOwnerLockerByAppIDbyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerOfAllAppsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerOfAllAppsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerOfAllAppsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerOfAllAppsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerOfAllAppsByOwner(ctx, req.(*QueryOwnerLockerOfAllAppsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerTxDetailsLockerOfAppByOwnerByAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerTxDetailsLockerOfAppByOwnerByAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerTxDetailsLockerOfAppByOwnerByAsset(ctx, req.(*QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOwnerLockerByAppToAssetIDbyOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerLockerByAppToAssetIDbyOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOwnerLockerByAppToAssetIDbyOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryOwnerLockerByAppToAssetIDbyOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOwnerLockerByAppToAssetIDbyOwner(ctx, req.(*QueryOwnerLockerByAppToAssetIDbyOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerByAppByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerByAppByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerByAppByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerByAppByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerByAppByOwner(ctx, req.(*QueryLockerByAppByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerCountByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerCountByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerCountByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerCountByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerCountByAppID(ctx, req.(*QueryLockerCountByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerCountByAppToAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerCountByAppToAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerCountByAppToAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerCountByAppToAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerCountByAppToAssetID(ctx, req.(*QueryLockerCountByAppToAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWhiteListedAssetIDsByAppID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhiteListedAssetIDsByAppIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWhiteListedAssetIDsByAppID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetIDsByAppID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWhiteListedAssetIDsByAppID(ctx, req.(*QueryWhiteListedAssetIDsByAppIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryWhiteListedAssetByAllApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhiteListedAssetByAllAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryWhiteListedAssetByAllApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryWhiteListedAssetByAllApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryWhiteListedAssetByAllApps(ctx, req.(*QueryWhiteListedAssetByAllAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerLookupTableByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerLookupTableByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerLookupTableByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerLookupTableByApp(ctx, req.(*QueryLockerLookupTableByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerLookupTableByAppAndAssetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerLookupTableByAppAndAssetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerLookupTableByAppAndAssetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerLookupTableByAppAndAssetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerLookupTableByAppAndAssetId(ctx, req.(*QueryLockerLookupTableByAppAndAssetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerTotalRewardsByAssetAppWise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerTotalRewardsByAssetAppWiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerTotalRewardsByAssetAppWise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerTotalRewardsByAssetAppWise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerTotalRewardsByAssetAppWise(ctx, req.(*QueryLockerTotalRewardsByAssetAppWiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockerTotalDepositedByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockerTotalDepositedByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockerTotalDepositedByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryLockerTotalDepositedByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockerTotalDepositedByApp(ctx, req.(*QueryLockerTotalDepositedByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Query/QueryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryState(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.locker.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLockerInfo",
			Handler:    _Query_QueryLockerInfo_Handler,
		},
		{
			MethodName: "QueryLockersByAppToAssetID",
			Handler:    _Query_QueryLockersByAppToAssetID_Handler,
		},
		{
			MethodName: "QueryLockerInfoByAppID",
			Handler:    _Query_QueryLockerInfoByAppID_Handler,
		},
		{
			MethodName: "QueryTotalDepositByAppAndAssetID",
			Handler:    _Query_QueryTotalDepositByAppAndAssetID_Handler,
		},
		{
			MethodName: "QueryOwnerLockerByAppIDbyOwner",
			Handler:    _Query_QueryOwnerLockerByAppIDbyOwner_Handler,
		},
		{
			MethodName: "QueryOwnerLockerOfAllAppsByOwner",
			Handler:    _Query_QueryOwnerLockerOfAllAppsByOwner_Handler,
		},
		{
			MethodName: "QueryOwnerTxDetailsLockerOfAppByOwnerByAsset",
			Handler:    _Query_QueryOwnerTxDetailsLockerOfAppByOwnerByAsset_Handler,
		},
		{
			MethodName: "QueryOwnerLockerByAppToAssetIDbyOwner",
			Handler:    _Query_QueryOwnerLockerByAppToAssetIDbyOwner_Handler,
		},
		{
			MethodName: "QueryLockerByAppByOwner",
			Handler:    _Query_QueryLockerByAppByOwner_Handler,
		},
		{
			MethodName: "QueryLockerCountByAppID",
			Handler:    _Query_QueryLockerCountByAppID_Handler,
		},
		{
			MethodName: "QueryLockerCountByAppToAssetID",
			Handler:    _Query_QueryLockerCountByAppToAssetID_Handler,
		},
		{
			MethodName: "QueryWhiteListedAssetIDsByAppID",
			Handler:    _Query_QueryWhiteListedAssetIDsByAppID_Handler,
		},
		{
			MethodName: "QueryWhiteListedAssetByAllApps",
			Handler:    _Query_QueryWhiteListedAssetByAllApps_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryLockerLookupTableByApp",
			Handler:    _Query_QueryLockerLookupTableByApp_Handler,
		},
		{
			MethodName: "QueryLockerLookupTableByAppAndAssetId",
			Handler:    _Query_QueryLockerLookupTableByAppAndAssetId_Handler,
		},
		{
			MethodName: "QueryLockerTotalRewardsByAssetAppWise",
			Handler:    _Query_QueryLockerTotalRewardsByAssetAppWise_Handler,
		},
		{
			MethodName: "QueryLockerTotalDepositedByApp",
			Handler:    _Query_QueryLockerTotalDepositedByApp_Handler,
		},
		{
			MethodName: "QueryState",
			Handler:    _Query_QueryState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/locker/v1beta1/query.proto",
}

func (m *QueryLockerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockerInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockersByAppToAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockersByAppToAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockersByAppToAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockersByAppToAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockersByAppToAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockersByAppToAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoByAppIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoByAppIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoByAppIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerInfoByAppIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerInfoByAppIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerInfoByAppIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDepositByAppAndAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDepositByAppAndAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDepositByAppAndAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDepositByAppAndAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDepositByAppAndAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDepositByAppAndAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDeposit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDeposit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByAppIDbyOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByAppIDbyOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByAppIDbyOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByAppIDbyOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByAppIDbyOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByAppIDbyOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for iNdEx := len(m.LockerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LockerIds[iNdEx])
			copy(dAtA[i:], m.LockerIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.LockerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserTxData) > 0 {
		for iNdEx := len(m.UserTxData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserTxData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for iNdEx := len(m.LockerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerByAppByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerByAppByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerByAppByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerByAppByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerByAppByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerByAppByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for iNdEx := len(m.LockerInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockerInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByAppIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByAppIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByAppIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByAppIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByAppIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByAppIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByAppToAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByAppToAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByAppToAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerCountByAppToAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerCountByAppToAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerCountByAppToAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetIDsByAppIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetIDsByAppIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetIDsByAppIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetIDsByAppIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetIDsByAppIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetIDsByAppIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		dAtA5 := make([]byte, len(m.AssetIds)*10)
		var j4 int
		for _, num := range m.AssetIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetByAllAppsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetByAllAppsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetByAllAppsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhiteListedAssetByAllAppsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhiteListedAssetByAllAppsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhiteListedAssetByAllAppsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductToAllAsset) > 0 {
		for iNdEx := len(m.ProductToAllAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductToAllAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppToAllAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppToAllAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppToAllAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenToLockerMapping) > 0 {
		for iNdEx := len(m.TokenToLockerMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenToLockerMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenToLockerMapping != nil {
		{
			size, err := m.TokenToLockerMapping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalDepositedByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalDepositedByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalDepositedByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalDepositedByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalDepositedByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalDepositedByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockedDepositedAmountDataMap) > 0 {
		for iNdEx := len(m.LockedDepositedAmountDataMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedDepositedAmountDataMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalRewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLockerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LockerInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockersByAppToAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockersByAppToAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerInfoByAppIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerInfoByAppIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalDepositByAppAndAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryTotalDepositByAppAndAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeposit != 0 {
		n += 1 + sovQuery(uint64(m.TotalDeposit))
	}
	return n
}

func (m *QueryOwnerLockerByAppIDbyOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByAppIDbyOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerIds) > 0 {
		for _, s := range m.LockerIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserTxData) > 0 {
		for _, e := range m.UserTxData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for _, e := range m.LockerInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerByAppByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerByAppByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockerInfo) > 0 {
		for _, e := range m.LockerInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerCountByAppIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerCountByAppIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *QueryLockerCountByAppToAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockerCountByAppToAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	return n
}

func (m *QueryWhiteListedAssetIDsByAppIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryWhiteListedAssetIDsByAppIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		l = 0
		for _, e := range m.AssetIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryWhiteListedAssetByAllAppsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhiteListedAssetByAllAppsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductToAllAsset) > 0 {
		for _, e := range m.ProductToAllAsset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AppToAllAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockerLookupTableByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerLookupTableByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenToLockerMapping) > 0 {
		for _, e := range m.TokenToLockerMapping {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenToLockerMapping != nil {
		l = m.TokenToLockerMapping.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockerTotalDepositedByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLockerTotalDepositedByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedDepositedAmountDataMap) > 0 {
		for _, e := range m.LockedDepositedAmountDataMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalRewards.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLockerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockersByAppToAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockersByAppToAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockersByAppToAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockersByAppToAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockersByAppToAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockersByAppToAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoByAppIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoByAppIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoByAppIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerInfoByAppIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerInfoByAppIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerInfoByAppIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDepositByAppAndAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDepositByAppAndAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDepositByAppAndAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDepositByAppAndAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDepositByAppAndAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDepositByAppAndAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			m.TotalDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByAppIDbyOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppIDbyOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppIDbyOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByAppIDbyOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppIDbyOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppIDbyOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerOfAllAppsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllAppsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllAppsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerOfAllAppsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllAppsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerOfAllAppsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerIds = append(m.LockerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfAppByOwnerByAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerTxDetailsLockerOfAppByOwnerByAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTxData = append(m.UserTxData, &UserTxData{})
			if err := m.UserTxData[len(m.UserTxData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppToAssetIDbyOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppToAssetIDbyOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerLockerByAppToAssetIDbyOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppToAssetIDbyOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerLockerByAppToAssetIDbyOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerInfo = append(m.LockerInfo, Locker{})
			if err := m.LockerInfo[len(m.LockerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerByAppByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerByAppByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerByAppByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerByAppByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerByAppByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerByAppByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerInfo = append(m.LockerInfo, Locker{})
			if err := m.LockerInfo[len(m.LockerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByAppIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByAppIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByAppIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByAppIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByAppIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByAppIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByAppToAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByAppToAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByAppToAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerCountByAppToAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerCountByAppToAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerCountByAppToAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetIDsByAppIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByAppIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByAppIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetIDsByAppIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByAppIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetIDsByAppIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetIds = append(m.AssetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetIds) == 0 {
					m.AssetIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetIds = append(m.AssetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetByAllAppsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllAppsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllAppsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhiteListedAssetByAllAppsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllAppsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhiteListedAssetByAllAppsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductToAllAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductToAllAsset = append(m.ProductToAllAsset, AppToAllAsset{})
			if err := m.ProductToAllAsset[len(m.ProductToAllAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppToAllAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppToAllAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppToAllAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, types.Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenToLockerMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenToLockerMapping = append(m.TokenToLockerMapping, &TokenToLockerMapping{})
			if err := m.TokenToLockerMapping[len(m.TokenToLockerMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppAndAssetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerLookupTableByAppAndAssetIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerLookupTableByAppAndAssetIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenToLockerMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenToLockerMapping == nil {
				m.TokenToLockerMapping = &TokenToLockerMapping{}
			}
			if err := m.TokenToLockerMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalDepositedByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalDepositedByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalDepositedByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedDepositedAmountDataMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedDepositedAmountDataMap = append(m.LockedDepositedAmountDataMap, LockedDepositedAmountDataMap{})
			if err := m.LockedDepositedAmountDataMap[len(m.LockedDepositedAmountDataMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalRewardsByAssetAppWiseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalRewardsByAssetAppWiseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalRewardsByAssetAppWiseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockerTotalRewardsByAssetAppWiseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockerTotalRewardsByAssetAppWiseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockerTotalRewardsByAssetAppWiseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
