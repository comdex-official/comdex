// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petri/locker/v1beta1/locker.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//locker_id will be the key which will be derived from the LockerLookUpTable
type Locker struct {
	LockerId           uint64                                 `protobuf:"varint,1,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	Depositor          string                                 `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	ReturnsAccumulated github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=returns_accumulated,json=returnsAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"returns_accumulated" yaml:"returns_accumulated"`
	NetBalance         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=net_balance,json=netBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"net_balance" yaml:"net_balance"`
	CreatedAt          time.Time                              `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
	AssetDepositId     uint64                                 `protobuf:"varint,6,opt,name=asset_deposit_id,json=assetDepositId,proto3" json:"asset_deposit_id,omitempty" yaml:"asset_deposit_id"`
	IsLocked           bool                                   `protobuf:"varint,7,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty" yaml:"is_locked"`
	AppId              uint64                                 `protobuf:"varint,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	BlockHeight        int64                                  `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
	BlockTime          time.Time                              `protobuf:"bytes,10,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time" yaml:"block_time"`
}

func (m *Locker) Reset()         { *m = Locker{} }
func (m *Locker) String() string { return proto.CompactTextString(m) }
func (*Locker) ProtoMessage()    {}
func (*Locker) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{0}
}
func (m *Locker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locker.Merge(m, src)
}
func (m *Locker) XXX_Size() int {
	return m.Size()
}
func (m *Locker) XXX_DiscardUnknown() {
	xxx_messageInfo_Locker.DiscardUnknown(m)
}

var xxx_messageInfo_Locker proto.InternalMessageInfo

type UserAppAssetLockerMapping struct {
	Owner    string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AppId    uint64        `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AssetId  uint64        `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	LockerId uint64        `protobuf:"varint,4,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	UserData []*UserTxData `protobuf:"bytes,5,rep,name=user_data,json=userData,proto3" json:"user_data,omitempty" yaml:"user_data"`
}

func (m *UserAppAssetLockerMapping) Reset()         { *m = UserAppAssetLockerMapping{} }
func (m *UserAppAssetLockerMapping) String() string { return proto.CompactTextString(m) }
func (*UserAppAssetLockerMapping) ProtoMessage()    {}
func (*UserAppAssetLockerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{1}
}
func (m *UserAppAssetLockerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAppAssetLockerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAppAssetLockerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAppAssetLockerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAppAssetLockerMapping.Merge(m, src)
}
func (m *UserAppAssetLockerMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserAppAssetLockerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAppAssetLockerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserAppAssetLockerMapping proto.InternalMessageInfo

type UserTxData struct {
	TxType  string                                 `protobuf:"bytes,1,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty" yaml:"tx_type"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Balance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance" yaml:"balance"`
	TxTime  time.Time                              `protobuf:"bytes,4,opt,name=tx_time,json=txTime,proto3,stdtime" json:"tx_time" yaml:"tx_time"`
}

func (m *UserTxData) Reset()         { *m = UserTxData{} }
func (m *UserTxData) String() string { return proto.CompactTextString(m) }
func (*UserTxData) ProtoMessage()    {}
func (*UserTxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{2}
}
func (m *UserTxData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTxData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTxData.Merge(m, src)
}
func (m *UserTxData) XXX_Size() int {
	return m.Size()
}
func (m *UserTxData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTxData.DiscardUnknown(m)
}

var xxx_messageInfo_UserTxData proto.InternalMessageInfo

type LockerLookupTableData struct {
	AppId           uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId         uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	LockerIds       []uint64                               `protobuf:"varint,3,rep,packed,name=locker_ids,json=lockerIds,proto3" json:"locker_ids,omitempty" yaml:"addresses"`
	DepositedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposited_amount" yaml:"deposited_amount"`
}

func (m *LockerLookupTableData) Reset()         { *m = LockerLookupTableData{} }
func (m *LockerLookupTableData) String() string { return proto.CompactTextString(m) }
func (*LockerLookupTableData) ProtoMessage()    {}
func (*LockerLookupTableData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{3}
}
func (m *LockerLookupTableData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerLookupTableData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerLookupTableData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerLookupTableData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerLookupTableData.Merge(m, src)
}
func (m *LockerLookupTableData) XXX_Size() int {
	return m.Size()
}
func (m *LockerLookupTableData) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerLookupTableData.DiscardUnknown(m)
}

var xxx_messageInfo_LockerLookupTableData proto.InternalMessageInfo

//Key is app_mapping_id
type LockerProductAssetMapping struct {
	AppId   uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *LockerProductAssetMapping) Reset()         { *m = LockerProductAssetMapping{} }
func (m *LockerProductAssetMapping) String() string { return proto.CompactTextString(m) }
func (*LockerProductAssetMapping) ProtoMessage()    {}
func (*LockerProductAssetMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{4}
}
func (m *LockerProductAssetMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerProductAssetMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerProductAssetMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerProductAssetMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerProductAssetMapping.Merge(m, src)
}
func (m *LockerProductAssetMapping) XXX_Size() int {
	return m.Size()
}
func (m *LockerProductAssetMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerProductAssetMapping.DiscardUnknown(m)
}

var xxx_messageInfo_LockerProductAssetMapping proto.InternalMessageInfo

type LockedDepositedAmountDataMap struct {
	AssetId         uint64                                 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	DepositedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=deposited_amount,json=depositedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"deposited_amount" yaml:"deposited_amount"`
}

func (m *LockedDepositedAmountDataMap) Reset()         { *m = LockedDepositedAmountDataMap{} }
func (m *LockedDepositedAmountDataMap) String() string { return proto.CompactTextString(m) }
func (*LockedDepositedAmountDataMap) ProtoMessage()    {}
func (*LockedDepositedAmountDataMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{5}
}
func (m *LockedDepositedAmountDataMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDepositedAmountDataMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDepositedAmountDataMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDepositedAmountDataMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDepositedAmountDataMap.Merge(m, src)
}
func (m *LockedDepositedAmountDataMap) XXX_Size() int {
	return m.Size()
}
func (m *LockedDepositedAmountDataMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDepositedAmountDataMap.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDepositedAmountDataMap proto.InternalMessageInfo

type LockerTotalRewardsByAssetAppWise struct {
	AppId        uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId      uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	TotalRewards github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_rewards,json=totalRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_rewards" yaml:"total_rewards"`
}

func (m *LockerTotalRewardsByAssetAppWise) Reset()         { *m = LockerTotalRewardsByAssetAppWise{} }
func (m *LockerTotalRewardsByAssetAppWise) String() string { return proto.CompactTextString(m) }
func (*LockerTotalRewardsByAssetAppWise) ProtoMessage()    {}
func (*LockerTotalRewardsByAssetAppWise) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cf8d15809df39ec, []int{6}
}
func (m *LockerTotalRewardsByAssetAppWise) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerTotalRewardsByAssetAppWise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerTotalRewardsByAssetAppWise.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerTotalRewardsByAssetAppWise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerTotalRewardsByAssetAppWise.Merge(m, src)
}
func (m *LockerTotalRewardsByAssetAppWise) XXX_Size() int {
	return m.Size()
}
func (m *LockerTotalRewardsByAssetAppWise) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerTotalRewardsByAssetAppWise.DiscardUnknown(m)
}

var xxx_messageInfo_LockerTotalRewardsByAssetAppWise proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Locker)(nil), "petri.locker.v1beta1.Locker")
	proto.RegisterType((*UserAppAssetLockerMapping)(nil), "petri.locker.v1beta1.UserAppAssetLockerMapping")
	proto.RegisterType((*UserTxData)(nil), "petri.locker.v1beta1.UserTxData")
	proto.RegisterType((*LockerLookupTableData)(nil), "petri.locker.v1beta1.LockerLookupTableData")
	proto.RegisterType((*LockerProductAssetMapping)(nil), "petri.locker.v1beta1.LockerProductAssetMapping")
	proto.RegisterType((*LockedDepositedAmountDataMap)(nil), "petri.locker.v1beta1.LockedDepositedAmountDataMap")
	proto.RegisterType((*LockerTotalRewardsByAssetAppWise)(nil), "petri.locker.v1beta1.LockerTotalRewardsByAssetAppWise")
}

func init() {
	proto.RegisterFile("petri/locker/v1beta1/locker.proto", fileDescriptor_5cf8d15809df39ec)
}

var fileDescriptor_5cf8d15809df39ec = []byte{
	// 944 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x17, 0xad, 0x3f, 0x96, 0xce, 0x4e, 0xe2, 0x9c, 0x6d, 0x98, 0x56, 0x5b, 0x51, 0xbd, 0x21,
	0x10, 0x50, 0x84, 0xaa, 0x9d, 0x2d, 0x4b, 0x2b, 0xc1, 0x2d, 0x2a, 0xc0, 0x41, 0x8b, 0x83, 0x8a,
	0x14, 0x59, 0x88, 0x13, 0x79, 0x96, 0x09, 0x4b, 0x3a, 0x82, 0x77, 0x6c, 0xec, 0xa1, 0x73, 0xd7,
	0x7c, 0x8c, 0x7e, 0x8b, 0x2e, 0x1d, 0x3c, 0x66, 0x2c, 0x3a, 0xb0, 0xad, 0x3d, 0x65, 0xe5, 0x07,
	0x28, 0x8a, 0xfb, 0x43, 0x8a, 0x0a, 0x0c, 0x38, 0x1a, 0x32, 0xe9, 0xde, 0x7f, 0xbe, 0xdf, 0xfb,
	0xbd, 0x07, 0x01, 0xe4, 0xb3, 0x79, 0x40, 0x2f, 0xfb, 0x33, 0xe6, 0x5f, 0xd0, 0xb8, 0xff, 0xf3,
	0xd1, 0x84, 0x0a, 0x72, 0x64, 0x44, 0x37, 0x8a, 0x99, 0x60, 0x70, 0x5f, 0xfb, 0xb8, 0x46, 0x69,
	0x7c, 0xda, 0x1d, 0x9f, 0xf1, 0x39, 0xe3, 0xfd, 0x09, 0xe1, 0xb4, 0x08, 0xf4, 0x59, 0xb8, 0xd0,
	0x61, 0xed, 0xbd, 0x29, 0x9b, 0x32, 0xf5, 0xec, 0xcb, 0x97, 0xd1, 0x3a, 0x53, 0xc6, 0xa6, 0x33,
	0xda, 0x57, 0xd2, 0x24, 0x39, 0xeb, 0x8b, 0x70, 0x4e, 0xb9, 0x20, 0xf3, 0x48, 0x3b, 0xa0, 0x77,
	0x75, 0xd0, 0x38, 0x55, 0x95, 0xe0, 0x11, 0x68, 0xe9, 0x9a, 0x5e, 0x18, 0xd8, 0x56, 0xd7, 0xea,
	0xd5, 0x86, 0x7b, 0x59, 0xea, 0xec, 0x5c, 0x91, 0xf9, 0xec, 0x39, 0x2a, 0x4c, 0x08, 0x37, 0xf5,
	0x7b, 0x14, 0xc0, 0x63, 0xd0, 0x0a, 0x68, 0xc4, 0x78, 0x28, 0x58, 0x6c, 0x6f, 0x74, 0xad, 0x5e,
	0xab, 0x1c, 0x52, 0x98, 0x10, 0x5e, 0xba, 0xc1, 0x5f, 0xc0, 0x6e, 0x4c, 0x45, 0x12, 0x2f, 0xb8,
	0x47, 0x7c, 0x3f, 0x99, 0x27, 0x33, 0x22, 0x68, 0x60, 0x57, 0x55, 0xf4, 0xe9, 0x75, 0xea, 0x54,
	0xfe, 0x4a, 0x9d, 0x27, 0xd3, 0x50, 0x9c, 0x27, 0x13, 0xd7, 0x67, 0xf3, 0xbe, 0x69, 0x5c, 0xff,
	0x3c, 0xe5, 0xc1, 0x45, 0x5f, 0x5c, 0x45, 0x94, 0xbb, 0xa3, 0x85, 0xc8, 0x52, 0xa7, 0xad, 0x6b,
	0xdd, 0x91, 0x12, 0x61, 0x68, 0xb4, 0x83, 0xa5, 0x12, 0x52, 0xb0, 0xb5, 0xa0, 0xc2, 0x9b, 0x90,
	0x19, 0x59, 0xf8, 0xd4, 0xae, 0xa9, 0xb2, 0x27, 0x6b, 0x97, 0x85, 0xba, 0x6c, 0x29, 0x15, 0xc2,
	0x60, 0x41, 0xc5, 0x50, 0x0b, 0xf0, 0x27, 0x00, 0xfc, 0x98, 0xca, 0x8a, 0x1e, 0x11, 0x76, 0xbd,
	0x6b, 0xf5, 0xb6, 0x8e, 0xdb, 0xae, 0x9e, 0x86, 0x9b, 0x4f, 0xc3, 0x1d, 0xe7, 0xd3, 0x18, 0x7e,
	0x26, 0xbf, 0x20, 0x4b, 0x9d, 0xc7, 0x3a, 0xef, 0x32, 0x16, 0xbd, 0xf9, 0xdb, 0xb1, 0x70, 0xcb,
	0x28, 0x06, 0x02, 0x7e, 0x03, 0x76, 0x08, 0xe7, 0x54, 0x78, 0x06, 0x52, 0x39, 0xad, 0x86, 0x9a,
	0xd6, 0x27, 0x59, 0xea, 0x1c, 0xe8, 0xf8, 0xf7, 0x3d, 0x10, 0x7e, 0xa8, 0x54, 0x27, 0x5a, 0x33,
	0x0a, 0xe4, 0xb4, 0x43, 0xee, 0xa9, 0x49, 0x06, 0xf6, 0x66, 0xd7, 0xea, 0x35, 0xcb, 0xa3, 0x2b,
	0x4c, 0x08, 0x37, 0x43, 0xae, 0x08, 0x12, 0xc0, 0x1e, 0x68, 0x90, 0x28, 0x92, 0xf5, 0x9a, 0xaa,
	0xde, 0xe3, 0x2c, 0x75, 0x1e, 0x98, 0x7a, 0x4a, 0x8f, 0x70, 0x9d, 0x44, 0xd1, 0x28, 0x80, 0xcf,
	0xc1, 0xf6, 0x44, 0xc6, 0x7b, 0xe7, 0x34, 0x9c, 0x9e, 0x0b, 0xbb, 0xd5, 0xb5, 0x7a, 0xd5, 0xe1,
	0x41, 0x96, 0x3a, 0xbb, 0xda, 0xbf, 0x6c, 0x45, 0x78, 0x4b, 0x89, 0xdf, 0x29, 0x49, 0x22, 0xa7,
	0xad, 0x92, 0xaa, 0x36, 0x58, 0x17, 0xb9, 0x65, 0xac, 0x41, 0x4e, 0x29, 0xa4, 0x3b, 0xfa, 0xcf,
	0x02, 0x87, 0x3f, 0x72, 0x1a, 0x0f, 0xa2, 0x68, 0x20, 0xc1, 0xd0, 0xbc, 0x7f, 0x41, 0xa2, 0x28,
	0x5c, 0x4c, 0xe1, 0x13, 0x50, 0x67, 0xaf, 0x17, 0x34, 0x56, 0xd4, 0x6f, 0x0d, 0x77, 0xb2, 0xd4,
	0xd9, 0xd6, 0x29, 0x95, 0x1a, 0x61, 0x6d, 0x86, 0xfb, 0x05, 0x0a, 0x92, 0xf0, 0xb5, 0xbc, 0xe5,
	0x43, 0xd0, 0xd4, 0xa0, 0x87, 0x9a, 0xcb, 0x35, 0xbc, 0xa9, 0x64, 0x0d, 0xf5, 0x72, 0xb1, 0x6a,
	0x1f, 0xb4, 0x58, 0x63, 0xd0, 0x4a, 0x38, 0x8d, 0xbd, 0x80, 0x08, 0x62, 0xd7, 0xbb, 0xd5, 0xde,
	0xd6, 0xf1, 0xe7, 0xee, 0x9d, 0x87, 0xc1, 0x95, 0x1d, 0x8d, 0x2f, 0x4f, 0x88, 0x20, 0xe5, 0xac,
	0x45, 0x34, 0xc2, 0x4d, 0xf9, 0x96, 0x76, 0xf4, 0xfb, 0x06, 0x00, 0x4b, 0x77, 0xf8, 0x05, 0xd8,
	0x14, 0x97, 0x9e, 0x64, 0xb5, 0xe9, 0x19, 0x66, 0xa9, 0xf3, 0x50, 0xc7, 0x1b, 0x03, 0xc2, 0x0d,
	0x71, 0x39, 0xbe, 0x8a, 0x28, 0x7c, 0x09, 0x1a, 0x64, 0xce, 0x92, 0x85, 0x30, 0x7b, 0xfe, 0xd5,
	0xda, 0x2b, 0x93, 0x53, 0x45, 0x65, 0x41, 0xd8, 0xa4, 0x83, 0xaf, 0xc0, 0x66, 0xbe, 0x8c, 0xfa,
	0x06, 0x7c, 0xbd, 0x76, 0x66, 0xf3, 0xcd, 0xc5, 0x22, 0xe6, 0x09, 0xe1, 0xf7, 0xba, 0x43, 0x49,
	0xa4, 0xda, 0xbd, 0x44, 0x6a, 0x1b, 0x22, 0x95, 0x10, 0x28, 0x58, 0x24, 0x51, 0x90, 0xc2, 0xaf,
	0x1b, 0x60, 0x5f, 0xd3, 0xe6, 0x94, 0xb1, 0x8b, 0x24, 0x1a, 0x93, 0xc9, 0x8c, 0x2a, 0x30, 0x97,
	0xcb, 0x61, 0xdd, 0xb3, 0x1c, 0x65, 0xa6, 0x6c, 0xac, 0x32, 0xe5, 0x19, 0x00, 0x05, 0x1d, 0xb8,
	0x5d, 0xed, 0x56, 0x57, 0xa9, 0x42, 0x82, 0x20, 0xa6, 0x9c, 0x53, 0x8e, 0x70, 0x2b, 0xa7, 0x0a,
	0x87, 0x02, 0xec, 0x98, 0x45, 0x97, 0x07, 0x43, 0xcf, 0x48, 0x9f, 0xb5, 0xd1, 0xda, 0x48, 0x1e,
	0xac, 0x5c, 0xee, 0x22, 0x1f, 0xc2, 0x8f, 0x0a, 0xd5, 0x40, 0x6b, 0x12, 0x70, 0xa8, 0x81, 0xf8,
	0x21, 0x66, 0x41, 0xe2, 0x0b, 0xb5, 0x51, 0xf9, 0x2e, 0x7d, 0x38, 0x18, 0xee, 0xfb, 0x60, 0x0c,
	0x77, 0xb3, 0xd4, 0x79, 0x54, 0xbe, 0x62, 0xd2, 0x3b, 0x47, 0x08, 0xfd, 0x61, 0x81, 0x4f, 0xf5,
	0x39, 0x3a, 0x59, 0xfd, 0x20, 0x39, 0x84, 0x17, 0x24, 0x5a, 0x49, 0x68, 0xdd, 0x9f, 0xf0, 0x4e,
	0xf4, 0x36, 0x3e, 0x3a, 0x7a, 0xef, 0x2c, 0xd0, 0xd5, 0xf0, 0x8d, 0x99, 0x20, 0x33, 0x4c, 0x5f,
	0x93, 0x38, 0xe0, 0xc3, 0x2b, 0x85, 0xe2, 0x20, 0x8a, 0x5e, 0x86, 0x9c, 0x7e, 0x3c, 0x14, 0xe1,
	0x05, 0x78, 0x20, 0x64, 0x5d, 0x2f, 0xd6, 0x85, 0xcd, 0xe6, 0x7d, 0xbb, 0x76, 0xc7, 0x7b, 0x66,
	0x57, 0xca, 0xc9, 0x10, 0xde, 0x16, 0xe5, 0xa6, 0xf0, 0xf5, 0xbf, 0x9d, 0xca, 0x6f, 0x37, 0x9d,
	0xca, 0xf5, 0x4d, 0xc7, 0x7a, 0x7b, 0xd3, 0xb1, 0xfe, 0xb9, 0xe9, 0x58, 0x6f, 0x6e, 0x3b, 0x95,
	0xb7, 0xb7, 0x9d, 0xca, 0x9f, 0xb7, 0x9d, 0xca, 0xab, 0x2f, 0x57, 0xea, 0xc9, 0x23, 0xf7, 0x94,
	0x9d, 0x9d, 0x85, 0x7e, 0x48, 0x66, 0x46, 0xee, 0x17, 0xff, 0x99, 0x54, 0xf5, 0x49, 0x43, 0xed,
	0xef, 0xb3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x82, 0xe2, 0x45, 0x51, 0x09, 0x00, 0x00,
}

func (m *Locker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLocker(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	if m.BlockHeight != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.AppId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x40
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AssetDepositId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetDepositId))
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLocker(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	{
		size := m.NetBalance.Size()
		i -= size
		if _, err := m.NetBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ReturnsAccumulated.Size()
		i -= size
		if _, err := m.ReturnsAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.LockerId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAppAssetLockerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAppAssetLockerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAppAssetLockerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserData) > 0 {
		for iNdEx := len(m.UserData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LockerId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerId))
		i--
		dAtA[i] = 0x20
	}
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserTxData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTxData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserTxData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TxTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TxTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintLocker(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxType) > 0 {
		i -= len(m.TxType)
		copy(dAtA[i:], m.TxType)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.TxType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockerLookupTableData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerLookupTableData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerLookupTableData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.LockerIds) > 0 {
		dAtA5 := make([]byte, len(m.LockerIds)*10)
		var j4 int
		for _, num := range m.LockerIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintLocker(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1a
	}
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerProductAssetMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerProductAssetMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerProductAssetMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockedDepositedAmountDataMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDepositedAmountDataMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDepositedAmountDataMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DepositedAmount.Size()
		i -= size
		if _, err := m.DepositedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerTotalRewardsByAssetAppWise) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerTotalRewardsByAssetAppWise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerTotalRewardsByAssetAppWise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalRewards.Size()
		i -= size
		if _, err := m.TotalRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocker(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Locker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerId != 0 {
		n += 1 + sovLocker(uint64(m.LockerId))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = m.ReturnsAccumulated.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = m.NetBalance.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovLocker(uint64(l))
	if m.AssetDepositId != 0 {
		n += 1 + sovLocker(uint64(m.AssetDepositId))
	}
	if m.IsLocked {
		n += 2
	}
	if m.AppId != 0 {
		n += 1 + sovLocker(uint64(m.AppId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovLocker(uint64(m.BlockHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *UserAppAssetLockerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovLocker(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	if m.LockerId != 0 {
		n += 1 + sovLocker(uint64(m.LockerId))
	}
	if len(m.UserData) > 0 {
		for _, e := range m.UserData {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	return n
}

func (m *UserTxData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxType)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovLocker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TxTime)
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *LockerLookupTableData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLocker(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	if len(m.LockerIds) > 0 {
		l = 0
		for _, e := range m.LockerIds {
			l += sovLocker(uint64(e))
		}
		n += 1 + sovLocker(uint64(l)) + l
	}
	l = m.DepositedAmount.Size()
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *LockerProductAssetMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLocker(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	return n
}

func (m *LockedDepositedAmountDataMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	l = m.DepositedAmount.Size()
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func (m *LockerTotalRewardsByAssetAppWise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLocker(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLocker(uint64(m.AssetId))
	}
	l = m.TotalRewards.Size()
	n += 1 + l + sovLocker(uint64(l))
	return n
}

func sovLocker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocker(x uint64) (n int) {
	return sovLocker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Locker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			m.LockerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnsAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDepositId", wireType)
			}
			m.AssetDepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetDepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAppAssetLockerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAppAssetLockerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAppAssetLockerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			m.LockerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserData = append(m.UserData, &UserTxData{})
			if err := m.UserData[len(m.UserData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTxData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTxData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTxData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TxTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerLookupTableData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerLookupTableData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerLookupTableData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LockerIds = append(m.LockerIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLocker
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLocker
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLocker
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LockerIds) == 0 {
					m.LockerIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLocker
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LockerIds = append(m.LockerIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerProductAssetMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerProductAssetMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerProductAssetMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDepositedAmountDataMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDepositedAmountDataMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDepositedAmountDataMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerTotalRewardsByAssetAppWise) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerTotalRewardsByAssetAppWise: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerTotalRewardsByAssetAppWise: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocker = fmt.Errorf("proto: unexpected end of group")
)
