// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/locker/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateLockerRequest struct {
	Depositor string                                 `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	AssetId   uint64                                 `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AppId     uint64                                 `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *MsgCreateLockerRequest) Reset()         { *m = MsgCreateLockerRequest{} }
func (m *MsgCreateLockerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLockerRequest) ProtoMessage()    {}
func (*MsgCreateLockerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{0}
}
func (m *MsgCreateLockerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLockerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLockerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLockerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLockerRequest.Merge(m, src)
}
func (m *MsgCreateLockerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLockerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLockerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLockerRequest proto.InternalMessageInfo

type MsgCreateLockerResponse struct {
}

func (m *MsgCreateLockerResponse) Reset()         { *m = MsgCreateLockerResponse{} }
func (m *MsgCreateLockerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLockerResponse) ProtoMessage()    {}
func (*MsgCreateLockerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{1}
}
func (m *MsgCreateLockerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLockerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLockerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLockerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLockerResponse.Merge(m, src)
}
func (m *MsgCreateLockerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLockerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLockerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLockerResponse proto.InternalMessageInfo

type MsgAddWhiteListedAssetRequest struct {
	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	AppId   uint64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId uint64 `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
}

func (m *MsgAddWhiteListedAssetRequest) Reset()         { *m = MsgAddWhiteListedAssetRequest{} }
func (m *MsgAddWhiteListedAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddWhiteListedAssetRequest) ProtoMessage()    {}
func (*MsgAddWhiteListedAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{2}
}
func (m *MsgAddWhiteListedAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddWhiteListedAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddWhiteListedAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddWhiteListedAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddWhiteListedAssetRequest.Merge(m, src)
}
func (m *MsgAddWhiteListedAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddWhiteListedAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddWhiteListedAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddWhiteListedAssetRequest proto.InternalMessageInfo

type MsgAddWhiteListedAssetResponse struct {
}

func (m *MsgAddWhiteListedAssetResponse) Reset()         { *m = MsgAddWhiteListedAssetResponse{} }
func (m *MsgAddWhiteListedAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddWhiteListedAssetResponse) ProtoMessage()    {}
func (*MsgAddWhiteListedAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{3}
}
func (m *MsgAddWhiteListedAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddWhiteListedAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddWhiteListedAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddWhiteListedAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddWhiteListedAssetResponse.Merge(m, src)
}
func (m *MsgAddWhiteListedAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddWhiteListedAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddWhiteListedAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddWhiteListedAssetResponse proto.InternalMessageInfo

type MsgDepositAssetRequest struct {
	Depositor string                                 `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	LockerId  string                                 `protobuf:"bytes,2,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	AssetId   uint64                                 `protobuf:"varint,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AppId     uint64                                 `protobuf:"varint,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *MsgDepositAssetRequest) Reset()         { *m = MsgDepositAssetRequest{} }
func (m *MsgDepositAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDepositAssetRequest) ProtoMessage()    {}
func (*MsgDepositAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{4}
}
func (m *MsgDepositAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositAssetRequest.Merge(m, src)
}
func (m *MsgDepositAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositAssetRequest proto.InternalMessageInfo

type MsgDepositAssetResponse struct {
}

func (m *MsgDepositAssetResponse) Reset()         { *m = MsgDepositAssetResponse{} }
func (m *MsgDepositAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositAssetResponse) ProtoMessage()    {}
func (*MsgDepositAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{5}
}
func (m *MsgDepositAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositAssetResponse.Merge(m, src)
}
func (m *MsgDepositAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositAssetResponse proto.InternalMessageInfo

type MsgWithdrawAssetRequest struct {
	Depositor string                                 `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	LockerId  string                                 `protobuf:"bytes,2,opt,name=locker_id,json=lockerId,proto3" json:"locker_id,omitempty" yaml:"locker_id"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	AssetId   uint64                                 `protobuf:"varint,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	AppId     uint64                                 `protobuf:"varint,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *MsgWithdrawAssetRequest) Reset()         { *m = MsgWithdrawAssetRequest{} }
func (m *MsgWithdrawAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawAssetRequest) ProtoMessage()    {}
func (*MsgWithdrawAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{6}
}
func (m *MsgWithdrawAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawAssetRequest.Merge(m, src)
}
func (m *MsgWithdrawAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawAssetRequest proto.InternalMessageInfo

type MsgWithdrawAssetResponse struct {
}

func (m *MsgWithdrawAssetResponse) Reset()         { *m = MsgWithdrawAssetResponse{} }
func (m *MsgWithdrawAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawAssetResponse) ProtoMessage()    {}
func (*MsgWithdrawAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_907169e28dc0306d, []int{7}
}
func (m *MsgWithdrawAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawAssetResponse.Merge(m, src)
}
func (m *MsgWithdrawAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawAssetResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLockerRequest)(nil), "comdex.locker.v1beta1.MsgCreateLockerRequest")
	proto.RegisterType((*MsgCreateLockerResponse)(nil), "comdex.locker.v1beta1.MsgCreateLockerResponse")
	proto.RegisterType((*MsgAddWhiteListedAssetRequest)(nil), "comdex.locker.v1beta1.MsgAddWhiteListedAssetRequest")
	proto.RegisterType((*MsgAddWhiteListedAssetResponse)(nil), "comdex.locker.v1beta1.MsgAddWhiteListedAssetResponse")
	proto.RegisterType((*MsgDepositAssetRequest)(nil), "comdex.locker.v1beta1.MsgDepositAssetRequest")
	proto.RegisterType((*MsgDepositAssetResponse)(nil), "comdex.locker.v1beta1.MsgDepositAssetResponse")
	proto.RegisterType((*MsgWithdrawAssetRequest)(nil), "comdex.locker.v1beta1.MsgWithdrawAssetRequest")
	proto.RegisterType((*MsgWithdrawAssetResponse)(nil), "comdex.locker.v1beta1.MsgWithdrawAssetResponse")
}

func init() { proto.RegisterFile("comdex/locker/v1beta1/tx.proto", fileDescriptor_907169e28dc0306d) }

var fileDescriptor_907169e28dc0306d = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcf, 0x8e, 0xd2, 0x40,
	0x1c, 0x6e, 0x81, 0xc5, 0x65, 0x8c, 0x61, 0x1d, 0x57, 0x45, 0x12, 0xa7, 0x64, 0x4c, 0x0c, 0x17,
	0x5a, 0x59, 0xf5, 0xe2, 0xc5, 0x2c, 0x7a, 0x21, 0x59, 0x2e, 0xbd, 0x90, 0x78, 0x31, 0x85, 0x19,
	0x4a, 0xb3, 0x94, 0xa9, 0x9d, 0x41, 0x77, 0x1f, 0xc0, 0xbb, 0x4f, 0xe0, 0xd9, 0xb3, 0xbe, 0x04,
	0xc7, 0x3d, 0x1a, 0x0f, 0x8d, 0x42, 0xe2, 0x03, 0xf0, 0x02, 0x1a, 0x66, 0xba, 0x48, 0x77, 0xbb,
	0x0d, 0x98, 0x78, 0xf3, 0xc4, 0xd0, 0xef, 0xfb, 0xfd, 0x99, 0xef, 0xf7, 0xf5, 0x57, 0x80, 0xfa,
	0xcc, 0x27, 0xf4, 0xc4, 0x1a, 0xb1, 0xfe, 0x31, 0x0d, 0xad, 0xb7, 0xcd, 0x1e, 0x15, 0x4e, 0xd3,
	0x12, 0x27, 0x66, 0x10, 0x32, 0xc1, 0xe0, 0x6d, 0x85, 0x9b, 0x0a, 0x37, 0x63, 0xbc, 0xba, 0xef,
	0x32, 0x97, 0x49, 0x86, 0xb5, 0x3c, 0x29, 0x32, 0xfe, 0xa5, 0x83, 0x3b, 0x1d, 0xee, 0xbe, 0x08,
	0xa9, 0x23, 0xe8, 0x91, 0x8c, 0xb0, 0xe9, 0x9b, 0x09, 0xe5, 0x02, 0x1e, 0x80, 0x12, 0xa1, 0x01,
	0xe3, 0x9e, 0x60, 0x61, 0x45, 0xaf, 0xe9, 0xf5, 0x52, 0x6b, 0x7f, 0x11, 0x19, 0x7b, 0xa7, 0x8e,
	0x3f, 0x7a, 0x86, 0x57, 0x10, 0xb6, 0xff, 0xd0, 0x60, 0x17, 0x14, 0x1d, 0x9f, 0x4d, 0xc6, 0xa2,
	0x92, 0x93, 0x01, 0xcf, 0xa7, 0x91, 0xa1, 0x7d, 0x8b, 0x8c, 0x87, 0xae, 0x27, 0x86, 0x93, 0x9e,
	0xd9, 0x67, 0xbe, 0xd5, 0x67, 0xdc, 0x67, 0x3c, 0xfe, 0x69, 0x70, 0x72, 0x6c, 0x89, 0xd3, 0x80,
	0x72, 0xb3, 0x3d, 0x16, 0x8b, 0xc8, 0xb8, 0xa1, 0xd2, 0xab, 0x2c, 0xd8, 0x8e, 0xd3, 0x41, 0x13,
	0xec, 0x3a, 0x9c, 0x53, 0xf1, 0xda, 0x23, 0x95, 0x7c, 0x4d, 0xaf, 0x17, 0x5a, 0xb7, 0x16, 0x91,
	0x51, 0x8e, 0xc9, 0x31, 0x82, 0xed, 0x6b, 0xf2, 0xd8, 0x26, 0xb0, 0x0e, 0x8a, 0x4e, 0x10, 0x2c,
	0xd9, 0x05, 0xc9, 0xbe, 0xb9, 0x96, 0x5a, 0x3e, 0xc7, 0xf6, 0x8e, 0x13, 0x04, 0x6d, 0x82, 0xef,
	0x81, 0xbb, 0x97, 0x04, 0xe0, 0x01, 0x1b, 0x73, 0x8a, 0x3f, 0xea, 0xe0, 0x7e, 0x87, 0xbb, 0x87,
	0x84, 0x74, 0x87, 0x9e, 0xa0, 0x47, 0x1e, 0x17, 0x94, 0x1c, 0x2e, 0x2b, 0x9c, 0x6b, 0xf4, 0x00,
	0x14, 0x06, 0x21, 0xf3, 0x63, 0x79, 0xca, 0x8b, 0xc8, 0xb8, 0xae, 0x8a, 0x2c, 0x9f, 0x62, 0x5b,
	0x82, 0x6b, 0xbd, 0xe4, 0xb2, 0x7b, 0xd9, 0xf6, 0x96, 0xb8, 0x06, 0xd0, 0x55, 0xfd, 0xc5, 0x57,
	0xf8, 0x9c, 0x93, 0xf3, 0x7d, 0xa9, 0x26, 0x94, 0xe8, 0xfd, 0x6f, 0xe6, 0xdb, 0x04, 0x25, 0x65,
	0xab, 0xf3, 0xdb, 0x24, 0x62, 0x56, 0x10, 0xb6, 0x77, 0xd5, 0xb9, 0x4d, 0xd6, 0x2c, 0x91, 0xff,
	0x77, 0x96, 0x28, 0x6c, 0x65, 0x89, 0x9d, 0x8d, 0x2c, 0x91, 0xd4, 0x2c, 0xd6, 0xf3, 0x4b, 0x4e,
	0x62, 0x5d, 0x4f, 0x0c, 0x49, 0xe8, 0xbc, 0xfb, 0x2f, 0xe8, 0x46, 0x82, 0x56, 0x41, 0xe5, 0xb2,
	0x68, 0x4a, 0xd1, 0x83, 0x9f, 0x79, 0x90, 0xef, 0x70, 0x17, 0xbe, 0x57, 0x9b, 0x28, 0xc5, 0xcc,
	0xf0, 0x89, 0x99, 0xba, 0xd2, 0xcc, 0xcc, 0x77, 0xb3, 0xfa, 0x74, 0xcb, 0x28, 0xd5, 0x0f, 0x0c,
	0x40, 0xf9, 0xc2, 0x3e, 0x80, 0x8d, 0xab, 0x33, 0xa5, 0x2c, 0xce, 0xaa, 0xb9, 0x29, 0x3d, 0x51,
	0x71, 0xdd, 0x6e, 0x59, 0x15, 0x53, 0x5e, 0xe5, 0xac, 0x8a, 0x69, 0x2e, 0x86, 0x1c, 0xec, 0x5d,
	0x9c, 0x07, 0xcc, 0xc8, 0x91, 0xe6, 0xf6, 0xaa, 0xb5, 0x31, 0x5f, 0x15, 0x6d, 0xd9, 0xd3, 0x1f,
	0x48, 0xfb, 0x34, 0x43, 0xda, 0x74, 0x86, 0xf4, 0xb3, 0x19, 0xd2, 0xbf, 0xcf, 0x90, 0xfe, 0x61,
	0x8e, 0xb4, 0xb3, 0x39, 0xd2, 0xbe, 0xce, 0x91, 0xf6, 0xea, 0x51, 0xc2, 0xc1, 0xcb, 0xe4, 0x0d,
	0x36, 0x18, 0x78, 0x7d, 0xcf, 0x19, 0xc5, 0xff, 0xad, 0xd5, 0x67, 0x4f, 0xfa, 0xb9, 0x57, 0x94,
	0x5f, 0xb1, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x52, 0x68, 0x43, 0x14, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	MsgAddWhiteListedAsset(ctx context.Context, in *MsgAddWhiteListedAssetRequest, opts ...grpc.CallOption) (*MsgAddWhiteListedAssetResponse, error)
	MsgCreateLocker(ctx context.Context, in *MsgCreateLockerRequest, opts ...grpc.CallOption) (*MsgCreateLockerResponse, error)
	MsgDepositAsset(ctx context.Context, in *MsgDepositAssetRequest, opts ...grpc.CallOption) (*MsgDepositAssetResponse, error)
	MsgWithdrawAsset(ctx context.Context, in *MsgWithdrawAssetRequest, opts ...grpc.CallOption) (*MsgWithdrawAssetResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MsgAddWhiteListedAsset(ctx context.Context, in *MsgAddWhiteListedAssetRequest, opts ...grpc.CallOption) (*MsgAddWhiteListedAssetResponse, error) {
	out := new(MsgAddWhiteListedAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Msg/MsgAddWhiteListedAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgCreateLocker(ctx context.Context, in *MsgCreateLockerRequest, opts ...grpc.CallOption) (*MsgCreateLockerResponse, error) {
	out := new(MsgCreateLockerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Msg/MsgCreateLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgDepositAsset(ctx context.Context, in *MsgDepositAssetRequest, opts ...grpc.CallOption) (*MsgDepositAssetResponse, error) {
	out := new(MsgDepositAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Msg/MsgDepositAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgWithdrawAsset(ctx context.Context, in *MsgWithdrawAssetRequest, opts ...grpc.CallOption) (*MsgWithdrawAssetResponse, error) {
	out := new(MsgWithdrawAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.locker.v1beta1.Msg/MsgWithdrawAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	MsgAddWhiteListedAsset(context.Context, *MsgAddWhiteListedAssetRequest) (*MsgAddWhiteListedAssetResponse, error)
	MsgCreateLocker(context.Context, *MsgCreateLockerRequest) (*MsgCreateLockerResponse, error)
	MsgDepositAsset(context.Context, *MsgDepositAssetRequest) (*MsgDepositAssetResponse, error)
	MsgWithdrawAsset(context.Context, *MsgWithdrawAssetRequest) (*MsgWithdrawAssetResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MsgAddWhiteListedAsset(ctx context.Context, req *MsgAddWhiteListedAssetRequest) (*MsgAddWhiteListedAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAddWhiteListedAsset not implemented")
}
func (*UnimplementedMsgServer) MsgCreateLocker(ctx context.Context, req *MsgCreateLockerRequest) (*MsgCreateLockerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCreateLocker not implemented")
}
func (*UnimplementedMsgServer) MsgDepositAsset(ctx context.Context, req *MsgDepositAssetRequest) (*MsgDepositAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgDepositAsset not implemented")
}
func (*UnimplementedMsgServer) MsgWithdrawAsset(ctx context.Context, req *MsgWithdrawAssetRequest) (*MsgWithdrawAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgWithdrawAsset not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MsgAddWhiteListedAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddWhiteListedAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgAddWhiteListedAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Msg/MsgAddWhiteListedAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgAddWhiteListedAsset(ctx, req.(*MsgAddWhiteListedAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgCreateLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgCreateLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Msg/MsgCreateLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgCreateLocker(ctx, req.(*MsgCreateLockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgDepositAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgDepositAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Msg/MsgDepositAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgDepositAsset(ctx, req.(*MsgDepositAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgWithdrawAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgWithdrawAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locker.v1beta1.Msg/MsgWithdrawAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgWithdrawAsset(ctx, req.(*MsgWithdrawAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.locker.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgAddWhiteListedAsset",
			Handler:    _Msg_MsgAddWhiteListedAsset_Handler,
		},
		{
			MethodName: "MsgCreateLocker",
			Handler:    _Msg_MsgCreateLocker_Handler,
		},
		{
			MethodName: "MsgDepositAsset",
			Handler:    _Msg_MsgDepositAsset_Handler,
		},
		{
			MethodName: "MsgWithdrawAsset",
			Handler:    _Msg_MsgWithdrawAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/locker/v1beta1/tx.proto",
}

func (m *MsgCreateLockerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLockerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLockerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x20
	}
	if m.AssetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLockerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLockerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLockerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddWhiteListedAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddWhiteListedAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddWhiteListedAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddWhiteListedAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddWhiteListedAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddWhiteListedAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x28
	}
	if m.AssetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LockerId) > 0 {
		i -= len(m.LockerId)
		copy(dAtA[i:], m.LockerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LockerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x28
	}
	if m.AssetId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LockerId) > 0 {
		i -= len(m.LockerId)
		copy(dAtA[i:], m.LockerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LockerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLockerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.AssetId != 0 {
		n += 1 + sovTx(uint64(m.AssetId))
	}
	if m.AppId != 0 {
		n += 1 + sovTx(uint64(m.AppId))
	}
	return n
}

func (m *MsgCreateLockerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddWhiteListedAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovTx(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovTx(uint64(m.AssetId))
	}
	return n
}

func (m *MsgAddWhiteListedAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LockerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.AssetId != 0 {
		n += 1 + sovTx(uint64(m.AssetId))
	}
	if m.AppId != 0 {
		n += 1 + sovTx(uint64(m.AppId))
	}
	return n
}

func (m *MsgDepositAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LockerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.AssetId != 0 {
		n += 1 + sovTx(uint64(m.AssetId))
	}
	if m.AppId != 0 {
		n += 1 + sovTx(uint64(m.AppId))
	}
	return n
}

func (m *MsgWithdrawAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLockerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLockerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLockerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLockerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLockerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLockerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddWhiteListedAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddWhiteListedAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddWhiteListedAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddWhiteListedAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddWhiteListedAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddWhiteListedAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
