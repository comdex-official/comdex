// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/locking/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryLockByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLockByIdRequest) Reset()         { *m = QueryLockByIdRequest{} }
func (m *QueryLockByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockByIdRequest) ProtoMessage()    {}
func (*QueryLockByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{2}
}
func (m *QueryLockByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockByIdRequest.Merge(m, src)
}
func (m *QueryLockByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockByIdRequest proto.InternalMessageInfo

type QueryLockByIdResponse struct {
	Lock Lock `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock" yaml:"lock"`
}

func (m *QueryLockByIdResponse) Reset()         { *m = QueryLockByIdResponse{} }
func (m *QueryLockByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockByIdResponse) ProtoMessage()    {}
func (*QueryLockByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{3}
}
func (m *QueryLockByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockByIdResponse.Merge(m, src)
}
func (m *QueryLockByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockByIdResponse proto.InternalMessageInfo

type QueryLocksByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryLocksByOwnerRequest) Reset()         { *m = QueryLocksByOwnerRequest{} }
func (m *QueryLocksByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLocksByOwnerRequest) ProtoMessage()    {}
func (*QueryLocksByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{4}
}
func (m *QueryLocksByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocksByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocksByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocksByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocksByOwnerRequest.Merge(m, src)
}
func (m *QueryLocksByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocksByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocksByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocksByOwnerRequest proto.InternalMessageInfo

type QueryLocksByOwnerResponse struct {
	Locks []Lock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks" yaml:"locks"`
}

func (m *QueryLocksByOwnerResponse) Reset()         { *m = QueryLocksByOwnerResponse{} }
func (m *QueryLocksByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLocksByOwnerResponse) ProtoMessage()    {}
func (*QueryLocksByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{5}
}
func (m *QueryLocksByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocksByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocksByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocksByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocksByOwnerResponse.Merge(m, src)
}
func (m *QueryLocksByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocksByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocksByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocksByOwnerResponse proto.InternalMessageInfo

type QueryAllLocksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLocksRequest) Reset()         { *m = QueryAllLocksRequest{} }
func (m *QueryAllLocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLocksRequest) ProtoMessage()    {}
func (*QueryAllLocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{6}
}
func (m *QueryAllLocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLocksRequest.Merge(m, src)
}
func (m *QueryAllLocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLocksRequest proto.InternalMessageInfo

type QueryAllLocksResponse struct {
	Locks      []Lock              `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks" yaml:"locks"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLocksResponse) Reset()         { *m = QueryAllLocksResponse{} }
func (m *QueryAllLocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLocksResponse) ProtoMessage()    {}
func (*QueryAllLocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{7}
}
func (m *QueryAllLocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLocksResponse.Merge(m, src)
}
func (m *QueryAllLocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLocksResponse proto.InternalMessageInfo

type QueryUnlockingByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryUnlockingByIdRequest) Reset()         { *m = QueryUnlockingByIdRequest{} }
func (m *QueryUnlockingByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockingByIdRequest) ProtoMessage()    {}
func (*QueryUnlockingByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{8}
}
func (m *QueryUnlockingByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockingByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockingByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockingByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockingByIdRequest.Merge(m, src)
}
func (m *QueryUnlockingByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockingByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockingByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockingByIdRequest proto.InternalMessageInfo

type QueryUnlockingByIdResponse struct {
	Unlocking Unlocking `protobuf:"bytes,1,opt,name=unlocking,proto3" json:"unlocking" yaml:"unlocking"`
}

func (m *QueryUnlockingByIdResponse) Reset()         { *m = QueryUnlockingByIdResponse{} }
func (m *QueryUnlockingByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockingByIdResponse) ProtoMessage()    {}
func (*QueryUnlockingByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{9}
}
func (m *QueryUnlockingByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockingByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockingByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockingByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockingByIdResponse.Merge(m, src)
}
func (m *QueryUnlockingByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockingByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockingByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockingByIdResponse proto.InternalMessageInfo

type QueryUnlockingsByOwnerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryUnlockingsByOwnerRequest) Reset()         { *m = QueryUnlockingsByOwnerRequest{} }
func (m *QueryUnlockingsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockingsByOwnerRequest) ProtoMessage()    {}
func (*QueryUnlockingsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{10}
}
func (m *QueryUnlockingsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockingsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockingsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockingsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockingsByOwnerRequest.Merge(m, src)
}
func (m *QueryUnlockingsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockingsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockingsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockingsByOwnerRequest proto.InternalMessageInfo

type QueryUnlockingsByOwnerResponse struct {
	Unlockings []Unlocking `protobuf:"bytes,1,rep,name=unlockings,proto3" json:"unlockings" yaml:"unlockings"`
}

func (m *QueryUnlockingsByOwnerResponse) Reset()         { *m = QueryUnlockingsByOwnerResponse{} }
func (m *QueryUnlockingsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockingsByOwnerResponse) ProtoMessage()    {}
func (*QueryUnlockingsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{11}
}
func (m *QueryUnlockingsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockingsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockingsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockingsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockingsByOwnerResponse.Merge(m, src)
}
func (m *QueryUnlockingsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockingsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockingsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockingsByOwnerResponse proto.InternalMessageInfo

type QueryAllUnlockingsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllUnlockingsRequest) Reset()         { *m = QueryAllUnlockingsRequest{} }
func (m *QueryAllUnlockingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnlockingsRequest) ProtoMessage()    {}
func (*QueryAllUnlockingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{12}
}
func (m *QueryAllUnlockingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnlockingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnlockingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnlockingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnlockingsRequest.Merge(m, src)
}
func (m *QueryAllUnlockingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnlockingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnlockingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnlockingsRequest proto.InternalMessageInfo

type QueryAllUnlockingsResponse struct {
	Unlockings []Unlocking         `protobuf:"bytes,1,rep,name=unlockings,proto3" json:"unlockings" yaml:"unlockings"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllUnlockingsResponse) Reset()         { *m = QueryAllUnlockingsResponse{} }
func (m *QueryAllUnlockingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnlockingsResponse) ProtoMessage()    {}
func (*QueryAllUnlockingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ec6b7223160ff4f, []int{13}
}
func (m *QueryAllUnlockingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnlockingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnlockingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnlockingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnlockingsResponse.Merge(m, src)
}
func (m *QueryAllUnlockingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnlockingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnlockingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnlockingsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.locking.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.locking.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLockByIdRequest)(nil), "comdex.locking.v1beta1.QueryLockByIdRequest")
	proto.RegisterType((*QueryLockByIdResponse)(nil), "comdex.locking.v1beta1.QueryLockByIdResponse")
	proto.RegisterType((*QueryLocksByOwnerRequest)(nil), "comdex.locking.v1beta1.QueryLocksByOwnerRequest")
	proto.RegisterType((*QueryLocksByOwnerResponse)(nil), "comdex.locking.v1beta1.QueryLocksByOwnerResponse")
	proto.RegisterType((*QueryAllLocksRequest)(nil), "comdex.locking.v1beta1.QueryAllLocksRequest")
	proto.RegisterType((*QueryAllLocksResponse)(nil), "comdex.locking.v1beta1.QueryAllLocksResponse")
	proto.RegisterType((*QueryUnlockingByIdRequest)(nil), "comdex.locking.v1beta1.QueryUnlockingByIdRequest")
	proto.RegisterType((*QueryUnlockingByIdResponse)(nil), "comdex.locking.v1beta1.QueryUnlockingByIdResponse")
	proto.RegisterType((*QueryUnlockingsByOwnerRequest)(nil), "comdex.locking.v1beta1.QueryUnlockingsByOwnerRequest")
	proto.RegisterType((*QueryUnlockingsByOwnerResponse)(nil), "comdex.locking.v1beta1.QueryUnlockingsByOwnerResponse")
	proto.RegisterType((*QueryAllUnlockingsRequest)(nil), "comdex.locking.v1beta1.QueryAllUnlockingsRequest")
	proto.RegisterType((*QueryAllUnlockingsResponse)(nil), "comdex.locking.v1beta1.QueryAllUnlockingsResponse")
}

func init() {
	proto.RegisterFile("comdex/locking/v1beta1/query.proto", fileDescriptor_8ec6b7223160ff4f)
}

var fileDescriptor_8ec6b7223160ff4f = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x51, 0x4f, 0xd3, 0x50,
	0x14, 0xc7, 0xd7, 0x09, 0x24, 0x5c, 0xd4, 0xc8, 0x65, 0x10, 0x58, 0xa0, 0x83, 0x2b, 0x4e, 0x1d,
	0xd0, 0xb2, 0x19, 0x34, 0x31, 0xbe, 0xb0, 0x60, 0xa2, 0x89, 0x89, 0x5a, 0xe2, 0x83, 0x46, 0x31,
	0xdd, 0x56, 0x6a, 0x43, 0xd7, 0x3b, 0xd6, 0x4d, 0x9c, 0x04, 0x1f, 0x7c, 0xf3, 0xcd, 0x84, 0x37,
	0xbf, 0x80, 0x3e, 0x18, 0x3f, 0x83, 0xbe, 0xf1, 0x48, 0xe2, 0x8b, 0xf1, 0x81, 0xe8, 0xf0, 0x13,
	0xf0, 0x09, 0x4c, 0xef, 0x3d, 0x5d, 0xb7, 0xb2, 0xb6, 0x23, 0x51, 0x9e, 0xb6, 0xae, 0xe7, 0xfc,
	0xff, 0xbf, 0x73, 0xee, 0xe9, 0xe9, 0x10, 0x29, 0xd2, 0x72, 0x49, 0x7b, 0x25, 0x9b, 0xb4, 0xb8,
	0x61, 0x58, 0xba, 0xfc, 0x32, 0x5b, 0xd0, 0x6a, 0x6a, 0x56, 0xde, 0xac, 0x6b, 0xd5, 0x86, 0x54,
	0xa9, 0xd2, 0x1a, 0xc5, 0x63, 0x3c, 0x46, 0x82, 0x18, 0x09, 0x62, 0x92, 0x09, 0x9d, 0xea, 0x94,
	0x85, 0xc8, 0xce, 0x37, 0x1e, 0x9d, 0x9c, 0xd4, 0x29, 0xd5, 0x4d, 0x4d, 0x56, 0x2b, 0x86, 0xac,
	0x5a, 0x16, 0xad, 0xa9, 0x35, 0x83, 0x5a, 0x36, 0xdc, 0xcd, 0x14, 0xa9, 0x5d, 0xa6, 0xb6, 0x5c,
	0x50, 0x6d, 0x8d, 0x9b, 0xb4, 0x2c, 0x2b, 0xaa, 0x6e, 0x58, 0x2c, 0x18, 0x62, 0x2f, 0x06, 0xb0,
	0x55, 0xd4, 0xaa, 0x5a, 0x76, 0x05, 0x67, 0x02, 0x82, 0x9c, 0x6b, 0x1e, 0x42, 0x12, 0x08, 0x3f,
	0x74, 0x9c, 0x1e, 0xb0, 0x3c, 0x45, 0xdb, 0xac, 0x6b, 0x76, 0x8d, 0xac, 0xa2, 0x91, 0x8e, 0x5f,
	0xed, 0x0a, 0xb5, 0x6c, 0x0d, 0xdf, 0x42, 0x03, 0x5c, 0x7f, 0x5c, 0x98, 0x16, 0xae, 0x0c, 0xe5,
	0x44, 0xa9, 0x7b, 0xf5, 0x12, 0xcf, 0xcb, 0xf7, 0xed, 0x1d, 0xa4, 0x62, 0x0a, 0xe4, 0x90, 0x34,
	0x4a, 0x30, 0xd1, 0x7b, 0xb4, 0xb8, 0x91, 0x6f, 0xdc, 0x2d, 0x81, 0x19, 0x3e, 0x8f, 0xe2, 0x46,
	0x89, 0x29, 0xf6, 0x29, 0x71, 0xa3, 0x44, 0xd6, 0xd0, 0xa8, 0x2f, 0x0e, 0xec, 0x6f, 0xa3, 0x3e,
	0xc7, 0x08, 0xcc, 0x27, 0x83, 0xcc, 0x59, 0xde, 0x88, 0x63, 0x7d, 0x74, 0x90, 0x1a, 0x6a, 0xa8,
	0x65, 0xf3, 0x26, 0x71, 0x62, 0x88, 0xc2, 0xd2, 0xc9, 0x22, 0x1a, 0x6f, 0xe9, 0xdb, 0xf9, 0xc6,
	0xfd, 0x2d, 0x4b, 0xab, 0xba, 0x2c, 0x09, 0xd4, 0x4f, 0x9d, 0x6b, 0xe6, 0x31, 0xa8, 0xf0, 0x0b,
	0xa2, 0xa1, 0x89, 0x2e, 0x19, 0x40, 0x75, 0x07, 0xf5, 0x3b, 0xb2, 0x4e, 0x4f, 0xce, 0x44, 0x62,
	0x25, 0x00, 0xeb, 0xac, 0x87, 0x65, 0x13, 0x85, 0x0b, 0x90, 0x3a, 0x34, 0x68, 0xd9, 0x34, 0x99,
	0x93, 0x0b, 0xf5, 0x0c, 0x21, 0xef, 0xfc, 0xa1, 0xfa, 0xb4, 0xc4, 0x87, 0x45, 0x72, 0x86, 0x45,
	0xe2, 0x13, 0xe9, 0x75, 0x5f, 0xd7, 0x20, 0x37, 0x3f, 0x7a, 0x74, 0x90, 0x1a, 0xe6, 0x66, 0x9e,
	0x06, 0x51, 0xda, 0x04, 0xc9, 0x37, 0x01, 0x1a, 0xee, 0xf9, 0xfe, 0xeb, 0xd2, 0xf0, 0x5a, 0x47,
	0x09, 0x71, 0x56, 0xc2, 0xe5, 0xc8, 0x12, 0x38, 0x46, 0x2f, 0x35, 0xcc, 0xc1, 0x09, 0x3d, 0xb2,
	0x80, 0x2d, 0x6c, 0xc0, 0xb6, 0x50, 0xb2, 0x5b, 0x30, 0x14, 0xfd, 0x18, 0x0d, 0xd6, 0xdd, 0x1b,
	0xd0, 0xec, 0x99, 0xa0, 0xc2, 0x3d, 0x85, 0x71, 0xa8, 0xfe, 0x02, 0xe7, 0x6c, 0x29, 0x10, 0xc5,
	0x53, 0x23, 0x4b, 0x68, 0xaa, 0xd3, 0xb8, 0xb7, 0xf1, 0x7b, 0x83, 0xc4, 0xa0, 0x34, 0x60, 0x7e,
	0x8a, 0x50, 0xcb, 0xc5, 0x3d, 0xad, 0x1e, 0xa0, 0x27, 0x00, 0x7a, 0xd8, 0x07, 0x6d, 0x13, 0xa5,
	0x4d, 0x8f, 0xbc, 0x86, 0xe6, 0x2e, 0x9b, 0xa6, 0x87, 0x70, 0x4a, 0xc3, 0xf9, 0x53, 0x80, 0xc3,
	0xf2, 0x99, 0x9f, 0x46, 0xe1, 0xff, 0x7b, 0x6a, 0x73, 0xbb, 0x83, 0xa8, 0x9f, 0x15, 0x87, 0xdf,
	0x09, 0x68, 0x80, 0x2f, 0x4d, 0x9c, 0x09, 0xc2, 0x3f, 0xbe, 0xa7, 0x93, 0x73, 0x3d, 0xc5, 0x72,
	0x20, 0x92, 0x7e, 0xfb, 0xfd, 0xcf, 0x6e, 0x7c, 0x1a, 0x8b, 0x72, 0xe8, 0xbb, 0x03, 0x7f, 0x10,
	0xd0, 0xb9, 0xf6, 0x05, 0xbc, 0x82, 0xe7, 0x43, 0x6d, 0x7c, 0xfb, 0x3c, 0xb9, 0xd0, 0x63, 0x34,
	0x60, 0xcd, 0x33, 0xac, 0x34, 0x9e, 0x95, 0x43, 0xde, 0x56, 0xcf, 0x8d, 0x92, 0xbc, 0x6d, 0x94,
	0x76, 0xf0, 0x67, 0x01, 0x0d, 0x1f, 0xdb, 0xc5, 0x78, 0x31, 0xd2, 0xd2, 0xf7, 0xa4, 0x25, 0xb3,
	0x27, 0xc8, 0x00, 0xd0, 0x1c, 0x03, 0x9d, 0xc7, 0x99, 0x50, 0x50, 0xf6, 0xc8, 0xca, 0xdb, 0xec,
	0x63, 0x07, 0xef, 0xba, 0xbd, 0x74, 0x77, 0x6b, 0x44, 0x2f, 0x7d, 0xab, 0x3f, 0xa2, 0x97, 0xfe,
	0x85, 0x4d, 0x2e, 0x31, 0xc4, 0x14, 0x9e, 0x0a, 0x43, 0xb4, 0xf1, 0x17, 0x01, 0xde, 0xfa, 0xed,
	0x1b, 0x70, 0x05, 0x87, 0xf7, 0xa4, 0xdb, 0x6a, 0x4d, 0xe6, 0x4e, 0x92, 0x02, 0x90, 0x59, 0x06,
	0x39, 0x87, 0xaf, 0x06, 0x41, 0xb6, 0x9e, 0xc0, 0xd6, 0xa9, 0x7f, 0x15, 0xd0, 0x58, 0xf7, 0x15,
	0x88, 0x97, 0x7a, 0x23, 0xf0, 0x9f, 0xff, 0xf5, 0x93, 0xa6, 0x01, 0xfc, 0x0d, 0x06, 0x9f, 0xc5,
	0x72, 0x34, 0x7c, 0xe7, 0x24, 0x7c, 0x74, 0x7b, 0xde, 0xb1, 0xc8, 0x22, 0x7a, 0xde, 0x6d, 0xe3,
	0x46, 0xf4, 0xbc, 0xeb, 0x9e, 0x24, 0x19, 0x86, 0x3d, 0x8b, 0x49, 0x24, 0xb6, 0x9d, 0x5f, 0xdd,
	0xfb, 0x2d, 0xc6, 0x3e, 0x35, 0xc5, 0xd8, 0x5e, 0x53, 0x14, 0xf6, 0x9b, 0xa2, 0xf0, 0xab, 0x29,
	0x0a, 0xef, 0x0f, 0xc5, 0xd8, 0xfe, 0xa1, 0x18, 0xfb, 0x71, 0x28, 0xc6, 0x9e, 0x64, 0x75, 0xa3,
	0xf6, 0xa2, 0x5e, 0x70, 0x38, 0x40, 0x6f, 0x81, 0xae, 0xaf, 0x1b, 0x45, 0x43, 0x35, 0x5d, 0x7d,
	0xcf, 0xa1, 0xd6, 0xa8, 0x68, 0x76, 0x61, 0x80, 0xfd, 0xdd, 0xbc, 0xf6, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x94, 0x55, 0xfe, 0x79, 0x54, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryLockByID(ctx context.Context, in *QueryLockByIdRequest, opts ...grpc.CallOption) (*QueryLockByIdResponse, error)
	QueryLocksByOwner(ctx context.Context, in *QueryLocksByOwnerRequest, opts ...grpc.CallOption) (*QueryLocksByOwnerResponse, error)
	QueryAllLocks(ctx context.Context, in *QueryAllLocksRequest, opts ...grpc.CallOption) (*QueryAllLocksResponse, error)
	QueryUnlockingByID(ctx context.Context, in *QueryUnlockingByIdRequest, opts ...grpc.CallOption) (*QueryUnlockingByIdResponse, error)
	QueryUnlockingsByOwner(ctx context.Context, in *QueryUnlockingsByOwnerRequest, opts ...grpc.CallOption) (*QueryUnlockingsByOwnerResponse, error)
	QueryAllUnlockings(ctx context.Context, in *QueryAllUnlockingsRequest, opts ...grpc.CallOption) (*QueryAllUnlockingsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockByID(ctx context.Context, in *QueryLockByIdRequest, opts ...grpc.CallOption) (*QueryLockByIdResponse, error) {
	out := new(QueryLockByIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryLockByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLocksByOwner(ctx context.Context, in *QueryLocksByOwnerRequest, opts ...grpc.CallOption) (*QueryLocksByOwnerResponse, error) {
	out := new(QueryLocksByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryLocksByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllLocks(ctx context.Context, in *QueryAllLocksRequest, opts ...grpc.CallOption) (*QueryAllLocksResponse, error) {
	out := new(QueryAllLocksResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryAllLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUnlockingByID(ctx context.Context, in *QueryUnlockingByIdRequest, opts ...grpc.CallOption) (*QueryUnlockingByIdResponse, error) {
	out := new(QueryUnlockingByIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryUnlockingByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUnlockingsByOwner(ctx context.Context, in *QueryUnlockingsByOwnerRequest, opts ...grpc.CallOption) (*QueryUnlockingsByOwnerResponse, error) {
	out := new(QueryUnlockingsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryUnlockingsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllUnlockings(ctx context.Context, in *QueryAllUnlockingsRequest, opts ...grpc.CallOption) (*QueryAllUnlockingsResponse, error) {
	out := new(QueryAllUnlockingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.locking.v1beta1.Query/QueryAllUnlockings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryLockByID(context.Context, *QueryLockByIdRequest) (*QueryLockByIdResponse, error)
	QueryLocksByOwner(context.Context, *QueryLocksByOwnerRequest) (*QueryLocksByOwnerResponse, error)
	QueryAllLocks(context.Context, *QueryAllLocksRequest) (*QueryAllLocksResponse, error)
	QueryUnlockingByID(context.Context, *QueryUnlockingByIdRequest) (*QueryUnlockingByIdResponse, error)
	QueryUnlockingsByOwner(context.Context, *QueryUnlockingsByOwnerRequest) (*QueryUnlockingsByOwnerResponse, error)
	QueryAllUnlockings(context.Context, *QueryAllUnlockingsRequest) (*QueryAllUnlockingsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryLockByID(ctx context.Context, req *QueryLockByIdRequest) (*QueryLockByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockByID not implemented")
}
func (*UnimplementedQueryServer) QueryLocksByOwner(ctx context.Context, req *QueryLocksByOwnerRequest) (*QueryLocksByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLocksByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryAllLocks(ctx context.Context, req *QueryAllLocksRequest) (*QueryAllLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllLocks not implemented")
}
func (*UnimplementedQueryServer) QueryUnlockingByID(ctx context.Context, req *QueryUnlockingByIdRequest) (*QueryUnlockingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnlockingByID not implemented")
}
func (*UnimplementedQueryServer) QueryUnlockingsByOwner(ctx context.Context, req *QueryUnlockingsByOwnerRequest) (*QueryUnlockingsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnlockingsByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryAllUnlockings(ctx context.Context, req *QueryAllUnlockingsRequest) (*QueryAllUnlockingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllUnlockings not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryLockByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockByID(ctx, req.(*QueryLockByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLocksByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLocksByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLocksByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryLocksByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLocksByOwner(ctx, req.(*QueryLocksByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryAllLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllLocks(ctx, req.(*QueryAllLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUnlockingByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnlockingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUnlockingByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryUnlockingByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUnlockingByID(ctx, req.(*QueryUnlockingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUnlockingsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnlockingsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUnlockingsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryUnlockingsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUnlockingsByOwner(ctx, req.(*QueryUnlockingsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllUnlockings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUnlockingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllUnlockings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.locking.v1beta1.Query/QueryAllUnlockings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllUnlockings(ctx, req.(*QueryAllUnlockingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.locking.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryLockByID",
			Handler:    _Query_QueryLockByID_Handler,
		},
		{
			MethodName: "QueryLocksByOwner",
			Handler:    _Query_QueryLocksByOwner_Handler,
		},
		{
			MethodName: "QueryAllLocks",
			Handler:    _Query_QueryAllLocks_Handler,
		},
		{
			MethodName: "QueryUnlockingByID",
			Handler:    _Query_QueryUnlockingByID_Handler,
		},
		{
			MethodName: "QueryUnlockingsByOwner",
			Handler:    _Query_QueryUnlockingsByOwner_Handler,
		},
		{
			MethodName: "QueryAllUnlockings",
			Handler:    _Query_QueryAllUnlockings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/locking/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLocksByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocksByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocksByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLocksByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocksByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocksByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnlockingByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockingByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockingByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnlockingByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockingByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockingByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Unlocking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUnlockingsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockingsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockingsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnlockingsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockingsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockingsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlockings) > 0 {
		for iNdEx := len(m.Unlockings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlockings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnlockingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnlockingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnlockingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnlockingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnlockingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnlockingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unlockings) > 0 {
		for iNdEx := len(m.Unlockings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlockings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLockByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lock.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLocksByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLocksByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllLocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnlockingByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryUnlockingByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Unlocking.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnlockingsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnlockingsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unlockings) > 0 {
		for _, e := range m.Unlockings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllUnlockingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUnlockingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unlockings) > 0 {
		for _, e := range m.Unlockings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocksByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocksByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocksByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocksByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocksByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocksByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, Lock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, Lock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockingByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockingByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockingByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockingByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockingByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockingByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unlocking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockingsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockingsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockingsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockingsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockingsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockingsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlockings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlockings = append(m.Unlockings, Unlocking{})
			if err := m.Unlockings[len(m.Unlockings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnlockingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnlockingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnlockingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnlockingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnlockingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnlockingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlockings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlockings = append(m.Unlockings, Unlocking{})
			if err := m.Unlockings[len(m.Unlockings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
