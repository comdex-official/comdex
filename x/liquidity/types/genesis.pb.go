// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petri/liquidity/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AppGenesisState struct {
	AppId            uint64            `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	GenericParams    GenericParams     `protobuf:"bytes,2,opt,name=generic_params,json=genericParams,proto3" json:"generic_params"`
	LastPairId       uint64            `protobuf:"varint,3,opt,name=last_pair_id,json=lastPairId,proto3" json:"last_pair_id,omitempty"`
	LastPoolId       uint64            `protobuf:"varint,4,opt,name=last_pool_id,json=lastPoolId,proto3" json:"last_pool_id,omitempty"`
	Pairs            []Pair            `protobuf:"bytes,5,rep,name=pairs,proto3" json:"pairs"`
	Pools            []Pool            `protobuf:"bytes,6,rep,name=pools,proto3" json:"pools"`
	DepositRequests  []DepositRequest  `protobuf:"bytes,7,rep,name=deposit_requests,json=depositRequests,proto3" json:"deposit_requests"`
	WithdrawRequests []WithdrawRequest `protobuf:"bytes,8,rep,name=withdraw_requests,json=withdrawRequests,proto3" json:"withdraw_requests"`
	Orders           []Order           `protobuf:"bytes,9,rep,name=orders,proto3" json:"orders"`
	ActiveFarmers    []ActiveFarmer    `protobuf:"bytes,10,rep,name=active_farmers,json=activeFarmers,proto3" json:"active_farmers"`
	QueuedFarmers    []QueuedFarmer    `protobuf:"bytes,11,rep,name=queued_farmers,json=queuedFarmers,proto3" json:"queued_farmers"`
}

func (m *AppGenesisState) Reset()         { *m = AppGenesisState{} }
func (m *AppGenesisState) String() string { return proto.CompactTextString(m) }
func (*AppGenesisState) ProtoMessage()    {}
func (*AppGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f213b60d5f11ba59, []int{0}
}
func (m *AppGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppGenesisState.Merge(m, src)
}
func (m *AppGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *AppGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_AppGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_AppGenesisState proto.InternalMessageInfo

// GenesisState defines the liquidity module's genesis state.
type GenesisState struct {
	Params          Params            `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	AppGenesisState []AppGenesisState `protobuf:"bytes,2,rep,name=app_genesis_state,json=appGenesisState,proto3" json:"app_genesis_state"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f213b60d5f11ba59, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppGenesisState)(nil), "petri.liquidity.v1beta1.AppGenesisState")
	proto.RegisterType((*GenesisState)(nil), "petri.liquidity.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("petri/liquidity/v1beta1/genesis.proto", fileDescriptor_f213b60d5f11ba59)
}

var fileDescriptor_f213b60d5f11ba59 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x93, 0x6d, 0x0d, 0xe0, 0x8e, 0x7d, 0x58, 0x20, 0x45, 0xbd, 0xc8, 0xa2, 0x49, 0x8c,
	0x70, 0x41, 0xa2, 0x6d, 0x77, 0x48, 0x20, 0x0d, 0x21, 0xa6, 0x5e, 0xb1, 0x75, 0x48, 0x88, 0x0f,
	0x29, 0x72, 0x6b, 0x37, 0xb3, 0x94, 0x62, 0xd7, 0x76, 0x56, 0xf6, 0x16, 0xbc, 0x07, 0x2f, 0xd2,
	0xcb, 0x5d, 0x72, 0x81, 0x10, 0xb4, 0x2f, 0x82, 0xec, 0x78, 0x6d, 0x32, 0x29, 0xf4, 0xae, 0x3d,
	0xfa, 0xfd, 0x7f, 0xe7, 0x44, 0x3e, 0x07, 0x1c, 0x0c, 0xd8, 0x08, 0x93, 0x6f, 0x49, 0x4e, 0xc7,
	0x05, 0xc5, 0x54, 0x5d, 0x27, 0x57, 0x87, 0x7d, 0xa2, 0xd0, 0x61, 0x92, 0x91, 0xaf, 0x44, 0x52,
	0x19, 0x73, 0xc1, 0x14, 0x83, 0x7e, 0xc9, 0xc5, 0x0b, 0x2e, 0xb6, 0x5c, 0xe7, 0x51, 0xc6, 0x32,
	0x66, 0xa0, 0x44, 0xff, 0x2a, 0xf9, 0xce, 0x93, 0x46, 0x2f, 0x47, 0x02, 0x8d, 0xac, 0xb6, 0x13,
	0x35, 0x62, 0xcb, 0x46, 0x86, 0xdc, 0xff, 0xd5, 0x02, 0xdb, 0x27, 0x9c, 0x9f, 0x96, 0x53, 0x5d,
	0x28, 0xa4, 0x08, 0x7c, 0x0c, 0x3c, 0xc4, 0x79, 0x4a, 0xb1, 0xef, 0x86, 0x6e, 0xb4, 0xd1, 0x6b,
	0x21, 0xce, 0xbb, 0x18, 0xbe, 0x07, 0x5b, 0x7a, 0x78, 0x41, 0x07, 0x69, 0xd9, 0xcc, 0x5f, 0x0b,
	0xdd, 0xa8, 0x7d, 0xf4, 0x34, 0x6e, 0xfa, 0x88, 0xf8, 0xb4, 0xe4, 0xcf, 0x0c, 0xfe, 0x7a, 0x63,
	0xfa, 0x7b, 0xcf, 0xe9, 0x3d, 0xcc, 0xaa, 0x45, 0x18, 0x82, 0xcd, 0x1c, 0x49, 0x95, 0x72, 0x44,
	0x85, 0x6e, 0xb9, 0x6e, 0x5a, 0x02, 0x5d, 0x3b, 0x43, 0x54, 0x74, 0xf1, 0x92, 0x60, 0x2c, 0xd7,
	0xc4, 0x46, 0x85, 0x60, 0x2c, 0xef, 0x62, 0xf8, 0x02, 0xb4, 0x74, 0x5c, 0xfa, 0xad, 0x70, 0x3d,
	0x6a, 0x1f, 0x05, 0xcd, 0x03, 0x69, 0xa5, 0x9d, 0xa3, 0x8c, 0x98, 0x2c, 0x63, 0xb9, 0xf4, 0xbd,
	0x95, 0x59, 0xc6, 0xf2, 0x45, 0x56, 0x47, 0xe0, 0x47, 0xb0, 0x83, 0x09, 0x67, 0x92, 0xaa, 0x54,
	0x90, 0x71, 0x41, 0xa4, 0x92, 0xfe, 0x3d, 0xa3, 0x89, 0x9a, 0x35, 0x6f, 0xca, 0x44, 0xaf, 0x0c,
	0x58, 0xe1, 0x36, 0xae, 0x55, 0x25, 0xfc, 0x02, 0x76, 0x27, 0x54, 0x5d, 0x62, 0x81, 0x26, 0x4b,
	0xf7, 0x7d, 0xe3, 0x7e, 0xd6, 0xec, 0xfe, 0x60, 0x23, 0x75, 0xf9, 0xce, 0xa4, 0x5e, 0x96, 0xf0,
	0x25, 0xf0, 0x98, 0xc0, 0x44, 0x48, 0xff, 0x81, 0x51, 0xee, 0x35, 0x2b, 0xdf, 0x69, 0xce, 0x8a,
	0x6c, 0x08, 0x5e, 0x80, 0x2d, 0x34, 0x50, 0xf4, 0x8a, 0xa4, 0x43, 0x24, 0x46, 0x5a, 0x03, 0x8c,
	0xe6, 0xa0, 0x59, 0x73, 0x62, 0xf8, 0xb7, 0x06, 0xbf, 0x5d, 0x04, 0x54, 0xa9, 0x19, 0xe9, 0xb8,
	0x20, 0x05, 0xc1, 0x0b, 0x69, 0x7b, 0x95, 0xf4, 0xdc, 0xf0, 0x75, 0xe9, 0xb8, 0x52, 0x93, 0xfb,
	0x3f, 0x5c, 0xb0, 0x59, 0xdb, 0xed, 0x57, 0xc0, 0xb3, 0xcb, 0xeb, 0x9a, 0xe5, 0x0d, 0xff, 0xb7,
	0x2b, 0x95, 0xad, 0xb5, 0x29, 0xf8, 0x19, 0xec, 0xea, 0xdb, 0xb0, 0x57, 0x9c, 0x4a, 0x2d, 0xf5,
	0xd7, 0x56, 0xbd, 0xcb, 0x9d, 0x0b, 0xbb, 0x7d, 0x74, 0x74, 0xa7, 0x7c, 0x3e, 0xfd, 0x1b, 0x38,
	0xd3, 0x59, 0xe0, 0xde, 0xcc, 0x02, 0xf7, 0xcf, 0x2c, 0x70, 0xbf, 0xcf, 0x03, 0xe7, 0x66, 0x1e,
	0x38, 0x3f, 0xe7, 0x81, 0xf3, 0xe9, 0x38, 0xa3, 0xea, 0xb2, 0xe8, 0xeb, 0x2e, 0x49, 0xd9, 0xe9,
	0x39, 0x1b, 0x0e, 0xe9, 0x80, 0xa2, 0xdc, 0xfe, 0x4f, 0xaa, 0x17, 0xaf, 0xae, 0x39, 0x91, 0x7d,
	0xcf, 0x9c, 0xf9, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x09, 0xc1, 0x24, 0x91, 0x04,
	0x00, 0x00,
}

func (m *AppGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueuedFarmers) > 0 {
		for iNdEx := len(m.QueuedFarmers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueuedFarmers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ActiveFarmers) > 0 {
		for iNdEx := len(m.ActiveFarmers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActiveFarmers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.WithdrawRequests) > 0 {
		for iNdEx := len(m.WithdrawRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DepositRequests) > 0 {
		for iNdEx := len(m.DepositRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastPoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.LastPairId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastPairId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.GenericParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AppId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppGenesisState) > 0 {
		for iNdEx := len(m.AppGenesisState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppGenesisState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovGenesis(uint64(m.AppId))
	}
	l = m.GenericParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.LastPairId != 0 {
		n += 1 + sovGenesis(uint64(m.LastPairId))
	}
	if m.LastPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.LastPoolId))
	}
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DepositRequests) > 0 {
		for _, e := range m.DepositRequests {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WithdrawRequests) > 0 {
		for _, e := range m.WithdrawRequests {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ActiveFarmers) > 0 {
		for _, e := range m.ActiveFarmers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.QueuedFarmers) > 0 {
		for _, e := range m.QueuedFarmers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AppGenesisState) > 0 {
		for _, e := range m.AppGenesisState {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenericParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPairId", wireType)
			}
			m.LastPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPoolId", wireType)
			}
			m.LastPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, Pair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositRequests = append(m.DepositRequests, DepositRequest{})
			if err := m.DepositRequests[len(m.DepositRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawRequests = append(m.WithdrawRequests, WithdrawRequest{})
			if err := m.WithdrawRequests[len(m.WithdrawRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveFarmers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveFarmers = append(m.ActiveFarmers, ActiveFarmer{})
			if err := m.ActiveFarmers[len(m.ActiveFarmers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedFarmers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedFarmers = append(m.QueuedFarmers, QueuedFarmer{})
			if err := m.QueuedFarmers[len(m.QueuedFarmers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppGenesisState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppGenesisState = append(m.AppGenesisState, AppGenesisState{})
			if err := m.AppGenesisState[len(m.AppGenesisState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
