// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/cdp/v1alpha1/cdp.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CDP struct {
	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner      string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Type       string     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" yaml:"type"`
	Collateral types.Coin `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral" yaml:"collateral"`
	Principal  types.Coin `protobuf:"bytes,5,opt,name=principal,proto3" json:"principal" yaml:"principal"`
}

func (m *CDP) Reset()         { *m = CDP{} }
func (m *CDP) String() string { return proto.CompactTextString(m) }
func (*CDP) ProtoMessage()    {}
func (*CDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_79abe14dd4273326, []int{0}
}
func (m *CDP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDP.Merge(m, src)
}
func (m *CDP) XXX_Size() int {
	return m.Size()
}
func (m *CDP) XXX_DiscardUnknown() {
	xxx_messageInfo_CDP.DiscardUnknown(m)
}

var xxx_messageInfo_CDP proto.InternalMessageInfo

func (m *CDP) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CDP) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CDP) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CDP) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *CDP) GetPrincipal() types.Coin {
	if m != nil {
		return m.Principal
	}
	return types.Coin{}
}

type AugmentedCDP struct {
	Cdp                    CDP        `protobuf:"bytes,1,opt,name=cdp,proto3" json:"cdp"`
	CollateralValue        types.Coin `protobuf:"bytes,2,opt,name=collateral_value,json=collateralValue,proto3" json:"collateral_value" yaml:"collateral_value"`
	CollateralizationRatio float64    `protobuf:"fixed64,3,opt,name=collateralization_ratio,json=collateralizationRatio,proto3" json:"collateralization_ratio,omitempty"`
}

func (m *AugmentedCDP) Reset()         { *m = AugmentedCDP{} }
func (m *AugmentedCDP) String() string { return proto.CompactTextString(m) }
func (*AugmentedCDP) ProtoMessage()    {}
func (*AugmentedCDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_79abe14dd4273326, []int{1}
}
func (m *AugmentedCDP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AugmentedCDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AugmentedCDP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AugmentedCDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AugmentedCDP.Merge(m, src)
}
func (m *AugmentedCDP) XXX_Size() int {
	return m.Size()
}
func (m *AugmentedCDP) XXX_DiscardUnknown() {
	xxx_messageInfo_AugmentedCDP.DiscardUnknown(m)
}

var xxx_messageInfo_AugmentedCDP proto.InternalMessageInfo

func (m *AugmentedCDP) GetCdp() CDP {
	if m != nil {
		return m.Cdp
	}
	return CDP{}
}

func (m *AugmentedCDP) GetCollateralValue() types.Coin {
	if m != nil {
		return m.CollateralValue
	}
	return types.Coin{}
}

func (m *AugmentedCDP) GetCollateralizationRatio() float64 {
	if m != nil {
		return m.CollateralizationRatio
	}
	return 0
}

type Deposit struct {
	CdpId     uint64     `protobuf:"varint,1,opt,name=cdp_id,json=cdpId,proto3" json:"cdp_id,omitempty"`
	Depositor string     `protobuf:"bytes,2,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_79abe14dd4273326, []int{2}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetCdpId() uint64 {
	if m != nil {
		return m.CdpId
	}
	return 0
}

func (m *Deposit) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *Deposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type CdpIdList struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *CdpIdList) Reset()         { *m = CdpIdList{} }
func (m *CdpIdList) String() string { return proto.CompactTextString(m) }
func (*CdpIdList) ProtoMessage()    {}
func (*CdpIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_79abe14dd4273326, []int{3}
}
func (m *CdpIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CdpIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CdpIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CdpIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CdpIdList.Merge(m, src)
}
func (m *CdpIdList) XXX_Size() int {
	return m.Size()
}
func (m *CdpIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_CdpIdList.DiscardUnknown(m)
}

var xxx_messageInfo_CdpIdList proto.InternalMessageInfo

func (m *CdpIdList) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*CDP)(nil), "comdex.cdp.v1alpha1.CDP")
	proto.RegisterType((*AugmentedCDP)(nil), "comdex.cdp.v1alpha1.AugmentedCDP")
	proto.RegisterType((*Deposit)(nil), "comdex.cdp.v1alpha1.Deposit")
	proto.RegisterType((*CdpIdList)(nil), "comdex.cdp.v1alpha1.CdpIdList")
}

func init() { proto.RegisterFile("comdex/cdp/v1alpha1/cdp.proto", fileDescriptor_79abe14dd4273326) }

var fileDescriptor_79abe14dd4273326 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xae, 0xdb, 0xae, 0xa8, 0xee, 0x60, 0xc5, 0x6c, 0x2c, 0xab, 0xb4, 0xa4, 0x32, 0x12, 0xea,
	0x65, 0x09, 0x2d, 0x07, 0x24, 0x6e, 0xb4, 0x95, 0x00, 0x89, 0xc3, 0xb0, 0x10, 0x07, 0x2e, 0x95,
	0x1b, 0xbb, 0x99, 0xa5, 0x24, 0x8e, 0x1a, 0xb7, 0x30, 0x5e, 0x81, 0x0b, 0x4f, 0xc0, 0xf3, 0xec,
	0xb8, 0x23, 0xa7, 0x6a, 0x6a, 0xdf, 0xa0, 0x4f, 0x80, 0x6c, 0x67, 0x0d, 0x02, 0x34, 0x2e, 0xad,
	0xfd, 0x7f, 0xdf, 0xff, 0xf9, 0xf3, 0xff, 0xc5, 0xf0, 0x34, 0x94, 0x09, 0xe3, 0x5f, 0x82, 0x90,
	0x65, 0xc1, 0xb2, 0x4f, 0xe3, 0xec, 0x82, 0xf6, 0xf5, 0xc6, 0xcf, 0xe6, 0x52, 0x49, 0xf4, 0xc8,
	0xc2, 0xbe, 0xae, 0xdc, 0xc2, 0x9d, 0xc3, 0x48, 0x46, 0xd2, 0xe0, 0x81, 0x5e, 0x59, 0x6a, 0xc7,
	0x8b, 0xa4, 0x8c, 0x62, 0x1e, 0x98, 0xdd, 0x74, 0x31, 0x0b, 0x94, 0x48, 0x78, 0xae, 0x68, 0x52,
	0x68, 0x75, 0xdc, 0x50, 0xe6, 0x89, 0xcc, 0x83, 0x29, 0xcd, 0x79, 0xb0, 0xec, 0x4f, 0xb9, 0xd2,
	0x47, 0x49, 0x91, 0x5a, 0x1c, 0x7f, 0xab, 0xc2, 0xda, 0x68, 0x7c, 0x8e, 0x1e, 0xc0, 0xaa, 0x60,
	0x0e, 0xe8, 0x82, 0x5e, 0x9d, 0x54, 0x05, 0x43, 0x4f, 0xe1, 0x9e, 0xfc, 0x9c, 0xf2, 0xb9, 0x53,
	0xed, 0x82, 0x5e, 0x73, 0xd8, 0xde, 0xae, 0xbc, 0xfd, 0x4b, 0x9a, 0xc4, 0x2f, 0xb1, 0x29, 0x63,
	0x62, 0x61, 0xf4, 0x04, 0xd6, 0xd5, 0x65, 0xc6, 0x9d, 0x9a, 0xa1, 0x1d, 0x6c, 0x57, 0x5e, 0xcb,
	0xd2, 0x74, 0x15, 0x13, 0x03, 0xa2, 0x0f, 0x10, 0x86, 0x32, 0x8e, 0xa9, 0xe2, 0x73, 0x1a, 0x3b,
	0xf5, 0x2e, 0xe8, 0xb5, 0x06, 0x27, 0xbe, 0x75, 0xe6, 0x6b, 0x67, 0x7e, 0xe1, 0xcc, 0x1f, 0x49,
	0x91, 0x0e, 0x4f, 0xae, 0x56, 0x5e, 0x65, 0xbb, 0xf2, 0x1e, 0x5a, 0xa5, 0xb2, 0x15, 0x93, 0xdf,
	0x74, 0xd0, 0x7b, 0xd8, 0xcc, 0xe6, 0x22, 0x0d, 0x45, 0x46, 0x63, 0x67, 0xef, 0x7f, 0xa2, 0x4e,
	0x21, 0xda, 0xb6, 0xa2, 0xbb, 0x4e, 0x4c, 0x4a, 0x15, 0x7c, 0x03, 0xe0, 0xfe, 0xab, 0x45, 0x94,
	0xf0, 0x54, 0x71, 0xa6, 0xc7, 0xf2, 0x0c, 0xd6, 0x42, 0x96, 0x99, 0xb9, 0xb4, 0x06, 0x8e, 0xff,
	0x8f, 0x60, 0xfc, 0xd1, 0xf8, 0x7c, 0x58, 0xd7, 0xe2, 0x44, 0x53, 0x11, 0x87, 0xed, 0xd2, 0xe3,
	0x64, 0x49, 0xe3, 0x05, 0x37, 0x33, 0xbc, 0xd3, 0x9c, 0x57, 0x98, 0x3b, 0xfe, 0xf3, 0xc6, 0x56,
	0x00, 0x93, 0x83, 0xb2, 0xf4, 0x51, 0x57, 0xd0, 0x0b, 0x78, 0x5c, 0x96, 0xc4, 0x57, 0xaa, 0x84,
	0x4c, 0x27, 0x73, 0xfd, 0x67, 0xa2, 0x00, 0xe4, 0xf1, 0x5f, 0x30, 0xd1, 0xbf, 0xf8, 0x07, 0x80,
	0xf7, 0xc6, 0x3c, 0x93, 0xb9, 0x50, 0xe8, 0x08, 0x36, 0x42, 0x96, 0x4d, 0x76, 0xc1, 0xef, 0x85,
	0x2c, 0x7b, 0xcb, 0xd0, 0x00, 0x36, 0x99, 0x65, 0xc8, 0xdb, 0xfc, 0x0f, 0xcb, 0xc9, 0xed, 0x20,
	0x4c, 0x4a, 0x1a, 0x7a, 0x03, 0x1b, 0x34, 0x91, 0x8b, 0x54, 0x99, 0xe3, 0xef, 0xbc, 0xec, 0x51,
	0x71, 0xd9, 0xfb, 0x56, 0xcf, 0xb6, 0x61, 0x52, 0xf4, 0xe3, 0x53, 0xd8, 0x1c, 0x69, 0x1b, 0xef,
	0x44, 0xae, 0x50, 0x1b, 0xd6, 0x04, 0xcb, 0x1d, 0xd0, 0xad, 0xf5, 0xea, 0x44, 0x2f, 0x87, 0xaf,
	0xaf, 0xd6, 0x2e, 0xb8, 0x5e, 0xbb, 0xe0, 0x66, 0xed, 0x82, 0xef, 0x1b, 0xb7, 0x72, 0xbd, 0x71,
	0x2b, 0x3f, 0x37, 0x6e, 0xe5, 0xd3, 0x59, 0x24, 0xd4, 0xc5, 0x62, 0xaa, 0x43, 0x0a, 0x6c, 0x50,
	0x67, 0x72, 0x36, 0x13, 0xa1, 0xa0, 0x71, 0xb1, 0x0f, 0xec, 0x93, 0xd3, 0xdf, 0x64, 0x3e, 0x6d,
	0x98, 0x07, 0xf0, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x9c, 0xac, 0x12, 0x8d, 0x03,
	0x00, 0x00,
}

func (m *CDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Principal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCdp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCdp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCdp(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCdp(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCdp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AugmentedCDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AugmentedCDP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AugmentedCDP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollateralizationRatio != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CollateralizationRatio))))
		i--
		dAtA[i] = 0x19
	}
	{
		size, err := m.CollateralValue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCdp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Cdp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCdp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCdp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintCdp(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x12
	}
	if m.CdpId != 0 {
		i = encodeVarintCdp(dAtA, i, uint64(m.CdpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CdpIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CdpIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CdpIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA7 := make([]byte, len(m.Ids)*10)
		var j6 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintCdp(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCdp(dAtA []byte, offset int, v uint64) int {
	offset -= sovCdp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCdp(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCdp(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCdp(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovCdp(uint64(l))
	l = m.Principal.Size()
	n += 1 + l + sovCdp(uint64(l))
	return n
}

func (m *AugmentedCDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cdp.Size()
	n += 1 + l + sovCdp(uint64(l))
	l = m.CollateralValue.Size()
	n += 1 + l + sovCdp(uint64(l))
	if m.CollateralizationRatio != 0 {
		n += 9
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CdpId != 0 {
		n += 1 + sovCdp(uint64(m.CdpId))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovCdp(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCdp(uint64(l))
	return n
}

func (m *CdpIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovCdp(uint64(e))
		}
		n += 1 + sovCdp(uint64(l)) + l
	}
	return n
}

func sovCdp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCdp(x uint64) (n int) {
	return sovCdp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CDP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AugmentedCDP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AugmentedCDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AugmentedCDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cdp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralizationRatio", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CollateralizationRatio = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdpId", wireType)
			}
			m.CdpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdpId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CdpIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CdpIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CdpIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCdp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCdp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCdp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCdp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCdp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCdp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCdp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCdp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCdp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCdp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCdp = fmt.Errorf("proto: unexpected end of group")
)
