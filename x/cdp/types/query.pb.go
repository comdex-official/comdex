// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/cdp/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryCDPRequest struct {
	CollateralType string `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
	Owner          string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryCDPRequest) Reset()         { *m = QueryCDPRequest{} }
func (m *QueryCDPRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPRequest) ProtoMessage()    {}
func (*QueryCDPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{0}
}
func (m *QueryCDPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPRequest.Merge(m, src)
}
func (m *QueryCDPRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPRequest proto.InternalMessageInfo

func (m *QueryCDPRequest) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

func (m *QueryCDPRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryCDPResponse struct {
	Cdp CDP `protobuf:"bytes,1,opt,name=cdp,proto3" json:"cdp" yaml:"cdp"`
}

func (m *QueryCDPResponse) Reset()         { *m = QueryCDPResponse{} }
func (m *QueryCDPResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCDPResponse) ProtoMessage()    {}
func (*QueryCDPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{1}
}
func (m *QueryCDPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPResponse.Merge(m, src)
}
func (m *QueryCDPResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPResponse proto.InternalMessageInfo

func (m *QueryCDPResponse) GetCdp() CDP {
	if m != nil {
		return m.Cdp
	}
	return CDP{}
}

type QueryCDPsRequest struct {
}

func (m *QueryCDPsRequest) Reset()         { *m = QueryCDPsRequest{} }
func (m *QueryCDPsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsRequest) ProtoMessage()    {}
func (*QueryCDPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{2}
}
func (m *QueryCDPsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsRequest.Merge(m, src)
}
func (m *QueryCDPsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsRequest proto.InternalMessageInfo

type QueryCDPsResponse struct {
	Cdps []AugmentedCDP `protobuf:"bytes,1,rep,name=cdps,proto3" json:"cdps" yaml:"cdps"`
}

func (m *QueryCDPsResponse) Reset()         { *m = QueryCDPsResponse{} }
func (m *QueryCDPsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsResponse) ProtoMessage()    {}
func (*QueryCDPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{3}
}
func (m *QueryCDPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsResponse.Merge(m, src)
}
func (m *QueryCDPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsResponse proto.InternalMessageInfo

func (m *QueryCDPsResponse) GetCdps() []AugmentedCDP {
	if m != nil {
		return m.Cdps
	}
	return nil
}

type QueryCDPDepositsRequest struct {
	CollateralType string `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
	Owner          string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryCDPDepositsRequest) Reset()         { *m = QueryCDPDepositsRequest{} }
func (m *QueryCDPDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPDepositsRequest) ProtoMessage()    {}
func (*QueryCDPDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{4}
}
func (m *QueryCDPDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPDepositsRequest.Merge(m, src)
}
func (m *QueryCDPDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPDepositsRequest proto.InternalMessageInfo

func (m *QueryCDPDepositsRequest) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

func (m *QueryCDPDepositsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryCDPDepositsResponse struct {
	Deposits []Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits" yaml:"deposits"`
}

func (m *QueryCDPDepositsResponse) Reset()         { *m = QueryCDPDepositsResponse{} }
func (m *QueryCDPDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCDPDepositsResponse) ProtoMessage()    {}
func (*QueryCDPDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{5}
}
func (m *QueryCDPDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPDepositsResponse.Merge(m, src)
}
func (m *QueryCDPDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPDepositsResponse proto.InternalMessageInfo

func (m *QueryCDPDepositsResponse) GetDeposits() []Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

type QueryCDPsByCollateralTypeRequest struct {
	CollateralType string `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
}

func (m *QueryCDPsByCollateralTypeRequest) Reset()         { *m = QueryCDPsByCollateralTypeRequest{} }
func (m *QueryCDPsByCollateralTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsByCollateralTypeRequest) ProtoMessage()    {}
func (*QueryCDPsByCollateralTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{6}
}
func (m *QueryCDPsByCollateralTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsByCollateralTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsByCollateralTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsByCollateralTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsByCollateralTypeRequest.Merge(m, src)
}
func (m *QueryCDPsByCollateralTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsByCollateralTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsByCollateralTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsByCollateralTypeRequest proto.InternalMessageInfo

func (m *QueryCDPsByCollateralTypeRequest) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

type QueryCDPsByCollateralTypeResponse struct {
	Cdps []AugmentedCDP `protobuf:"bytes,1,rep,name=cdps,proto3" json:"cdps" yaml:"cdps"`
}

func (m *QueryCDPsByCollateralTypeResponse) Reset()         { *m = QueryCDPsByCollateralTypeResponse{} }
func (m *QueryCDPsByCollateralTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsByCollateralTypeResponse) ProtoMessage()    {}
func (*QueryCDPsByCollateralTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{7}
}
func (m *QueryCDPsByCollateralTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsByCollateralTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsByCollateralTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsByCollateralTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsByCollateralTypeResponse.Merge(m, src)
}
func (m *QueryCDPsByCollateralTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsByCollateralTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsByCollateralTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsByCollateralTypeResponse proto.InternalMessageInfo

func (m *QueryCDPsByCollateralTypeResponse) GetCdps() []AugmentedCDP {
	if m != nil {
		return m.Cdps
	}
	return nil
}

type QueryCDPsByCollateralizationRatioRequest struct {
	CollateralType string `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty" yaml:"collateral_type"`
	Ratio          uint64 `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty" yaml:"ratio"`
}

func (m *QueryCDPsByCollateralizationRatioRequest) Reset() {
	*m = QueryCDPsByCollateralizationRatioRequest{}
}
func (m *QueryCDPsByCollateralizationRatioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCDPsByCollateralizationRatioRequest) ProtoMessage()    {}
func (*QueryCDPsByCollateralizationRatioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{8}
}
func (m *QueryCDPsByCollateralizationRatioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsByCollateralizationRatioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsByCollateralizationRatioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsByCollateralizationRatioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsByCollateralizationRatioRequest.Merge(m, src)
}
func (m *QueryCDPsByCollateralizationRatioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsByCollateralizationRatioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsByCollateralizationRatioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsByCollateralizationRatioRequest proto.InternalMessageInfo

func (m *QueryCDPsByCollateralizationRatioRequest) GetCollateralType() string {
	if m != nil {
		return m.CollateralType
	}
	return ""
}

func (m *QueryCDPsByCollateralizationRatioRequest) GetRatio() uint64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type QueryCDPsByCollateralizationRatioResponse struct {
	Cdps []AugmentedCDP `protobuf:"bytes,1,rep,name=cdps,proto3" json:"cdps" yaml:"cdps"`
}

func (m *QueryCDPsByCollateralizationRatioResponse) Reset() {
	*m = QueryCDPsByCollateralizationRatioResponse{}
}
func (m *QueryCDPsByCollateralizationRatioResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryCDPsByCollateralizationRatioResponse) ProtoMessage() {}
func (*QueryCDPsByCollateralizationRatioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{9}
}
func (m *QueryCDPsByCollateralizationRatioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCDPsByCollateralizationRatioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCDPsByCollateralizationRatioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCDPsByCollateralizationRatioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCDPsByCollateralizationRatioResponse.Merge(m, src)
}
func (m *QueryCDPsByCollateralizationRatioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCDPsByCollateralizationRatioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCDPsByCollateralizationRatioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCDPsByCollateralizationRatioResponse proto.InternalMessageInfo

func (m *QueryCDPsByCollateralizationRatioResponse) GetCdps() []AugmentedCDP {
	if m != nil {
		return m.Cdps
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b888451e45daea73, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryCDPRequest)(nil), "comdex.cdp.v1alpha1.QueryCDPRequest")
	proto.RegisterType((*QueryCDPResponse)(nil), "comdex.cdp.v1alpha1.QueryCDPResponse")
	proto.RegisterType((*QueryCDPsRequest)(nil), "comdex.cdp.v1alpha1.QueryCDPsRequest")
	proto.RegisterType((*QueryCDPsResponse)(nil), "comdex.cdp.v1alpha1.QueryCDPsResponse")
	proto.RegisterType((*QueryCDPDepositsRequest)(nil), "comdex.cdp.v1alpha1.QueryCDPDepositsRequest")
	proto.RegisterType((*QueryCDPDepositsResponse)(nil), "comdex.cdp.v1alpha1.QueryCDPDepositsResponse")
	proto.RegisterType((*QueryCDPsByCollateralTypeRequest)(nil), "comdex.cdp.v1alpha1.QueryCDPsByCollateralTypeRequest")
	proto.RegisterType((*QueryCDPsByCollateralTypeResponse)(nil), "comdex.cdp.v1alpha1.QueryCDPsByCollateralTypeResponse")
	proto.RegisterType((*QueryCDPsByCollateralizationRatioRequest)(nil), "comdex.cdp.v1alpha1.QueryCDPsByCollateralizationRatioRequest")
	proto.RegisterType((*QueryCDPsByCollateralizationRatioResponse)(nil), "comdex.cdp.v1alpha1.QueryCDPsByCollateralizationRatioResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.cdp.v1alpha1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.cdp.v1alpha1.QueryParamsResponse")
}

func init() { proto.RegisterFile("comdex/cdp/v1alpha1/query.proto", fileDescriptor_b888451e45daea73) }

var fileDescriptor_b888451e45daea73 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0xf2, 0x4f, 0x98, 0x12, 0xc0, 0xa1, 0x91, 0xba, 0x62, 0x5b, 0x26, 0x8a, 0xd5, 0x48,
	0x97, 0xd6, 0x48, 0xd4, 0x44, 0x12, 0x5b, 0x12, 0x13, 0x4f, 0x65, 0xf5, 0xe4, 0xa5, 0x99, 0xee,
	0x0e, 0xcb, 0x26, 0x6d, 0x67, 0xe8, 0x6c, 0xc1, 0x8a, 0x78, 0xf0, 0xa0, 0x57, 0x13, 0x0f, 0x7e,
	0x04, 0xbf, 0x88, 0x07, 0x8e, 0x24, 0x26, 0xc6, 0x78, 0x68, 0x0c, 0xf8, 0x09, 0xf8, 0x04, 0x66,
	0x67, 0x67, 0xdb, 0x6d, 0xd9, 0x16, 0x34, 0x10, 0x2f, 0xd0, 0xbc, 0x79, 0xef, 0xfd, 0x7e, 0xbf,
	0xf7, 0xfa, 0x7b, 0x29, 0x48, 0x1a, 0xb4, 0x6a, 0x92, 0x57, 0x9a, 0x61, 0x32, 0x6d, 0x3b, 0x8b,
	0x2b, 0x6c, 0x13, 0x67, 0xb5, 0xad, 0x06, 0xa9, 0x37, 0x33, 0xac, 0x4e, 0x1d, 0x0a, 0x67, 0xbd,
	0x84, 0x8c, 0x61, 0xb2, 0x8c, 0x9f, 0xa0, 0xc6, 0x2c, 0x6a, 0x51, 0xf1, 0xae, 0xb9, 0x9f, 0xbc,
	0x54, 0x75, 0xde, 0xa2, 0xd4, 0xaa, 0x10, 0x0d, 0x33, 0x5b, 0xc3, 0xb5, 0x1a, 0x75, 0xb0, 0x63,
	0xd3, 0x1a, 0x97, 0xaf, 0x77, 0x0c, 0xca, 0xab, 0x94, 0x6b, 0x65, 0xcc, 0x89, 0x87, 0xa0, 0x6d,
	0x67, 0xcb, 0xc4, 0xc1, 0x59, 0x8d, 0x61, 0xcb, 0xae, 0x89, 0x64, 0x99, 0x7b, 0x3d, 0x8c, 0x95,
	0xcb, 0xc0, 0x7b, 0x4e, 0x85, 0x3d, 0x33, 0x5c, 0xc7, 0x55, 0x1f, 0x2c, 0x11, 0x04, 0xf3, 0x61,
	0x0c, 0x6a, 0x4b, 0x00, 0xf4, 0x16, 0x4c, 0xaf, 0xbb, 0x14, 0x0a, 0x6b, 0x45, 0x9d, 0x6c, 0x35,
	0x08, 0x77, 0x60, 0x01, 0x4c, 0x1b, 0xb4, 0x52, 0xc1, 0x0e, 0xa9, 0xe3, 0x4a, 0xc9, 0x69, 0x32,
	0x12, 0x57, 0x52, 0x4a, 0x7a, 0x22, 0xaf, 0x1e, 0xb7, 0x92, 0x57, 0x9a, 0xb8, 0x5a, 0x79, 0x84,
	0x7a, 0x12, 0x90, 0x3e, 0xd5, 0x89, 0xbc, 0x68, 0x32, 0x02, 0x17, 0xc1, 0x28, 0xdd, 0xa9, 0x91,
	0x7a, 0x7c, 0x48, 0x94, 0xce, 0x1c, 0xb7, 0x92, 0x93, 0x5e, 0xa9, 0x08, 0x23, 0x7d, 0x54, 0xfe,
	0x07, 0x33, 0x1d, 0x7c, 0xce, 0x68, 0x8d, 0x13, 0xb8, 0x0a, 0x86, 0x0d, 0x93, 0x09, 0xd0, 0x68,
	0x2e, 0x9e, 0x09, 0x99, 0x7b, 0xa6, 0xb0, 0x56, 0xcc, 0xc3, 0xfd, 0x56, 0x32, 0x72, 0xdc, 0x4a,
	0x02, 0x49, 0xc9, 0x64, 0x48, 0x77, 0x0b, 0x11, 0xec, 0xf4, 0xe4, 0x52, 0x14, 0x2a, 0x81, 0xcb,
	0x81, 0x98, 0x04, 0x7a, 0x06, 0x46, 0x0c, 0x93, 0xf1, 0xb8, 0x92, 0x1a, 0x4e, 0x47, 0x73, 0x0b,
	0xa1, 0x48, 0x4f, 0x1a, 0x56, 0x95, 0xd4, 0x1c, 0x62, 0xba, 0x90, 0xb3, 0x12, 0x32, 0xda, 0x86,
	0xe4, 0x48, 0x17, 0x3d, 0xd0, 0x7b, 0x05, 0xcc, 0xf9, 0x08, 0x6b, 0x84, 0x51, 0x6e, 0x3b, 0xfc,
	0xbf, 0x4c, 0xb4, 0x0a, 0xe2, 0x27, 0x79, 0x48, 0xc1, 0xeb, 0x60, 0xdc, 0x94, 0x31, 0x29, 0x7a,
	0x3e, 0x54, 0xb4, 0x2c, 0xcc, 0xcf, 0x49, 0xbd, 0xd3, 0x1e, 0x90, 0x5f, 0x8b, 0xf4, 0x76, 0x1b,
	0x64, 0x81, 0x54, 0x7b, 0xb0, 0xf9, 0x66, 0xa1, 0x8b, 0xf3, 0x79, 0xea, 0x47, 0x14, 0x2c, 0x0c,
	0x00, 0xba, 0x80, 0x8d, 0x7e, 0x56, 0x40, 0x3a, 0x14, 0xd1, 0x7e, 0x2d, 0x2c, 0xaa, 0xbb, 0x7f,
	0xcf, 0x7b, 0xc5, 0x75, 0xb7, 0xa9, 0x58, 0xf1, 0x48, 0x70, 0xc5, 0x22, 0x8c, 0x74, 0xef, 0x19,
	0xed, 0x80, 0xdb, 0x67, 0x20, 0x76, 0x01, 0x23, 0x89, 0x01, 0x28, 0x80, 0x8b, 0xe2, 0xc4, 0xf8,
	0xde, 0x2a, 0x82, 0xd9, 0xae, 0xa8, 0x04, 0x7e, 0x08, 0xc6, 0xbc, 0x53, 0x24, 0x9d, 0x7c, 0x2d,
	0x14, 0xda, 0x2b, 0xca, 0x8f, 0xb8, 0xa0, 0xba, 0x2c, 0xc8, 0x7d, 0xbf, 0x04, 0x26, 0x45, 0xcb,
	0xe7, 0xa4, 0xbe, 0x6d, 0x1b, 0x04, 0x7e, 0x50, 0xc0, 0xb8, 0x2f, 0x19, 0xde, 0x08, 0x6d, 0xd4,
	0x73, 0xc6, 0xd4, 0x9b, 0xa7, 0x64, 0x79, 0x2c, 0x51, 0xe6, 0xdd, 0xb7, 0xdf, 0x9f, 0x86, 0xd2,
	0x70, 0x51, 0xeb, 0xdc, 0x52, 0xae, 0xed, 0xf6, 0xec, 0x6a, 0x4f, 0xdb, 0x15, 0xee, 0xda, 0x83,
	0x0c, 0x4c, 0xb4, 0x67, 0x0f, 0x07, 0x63, 0xf8, 0x03, 0x52, 0x17, 0x4f, 0x4b, 0x93, 0x5c, 0x62,
	0x82, 0xcb, 0x14, 0x9c, 0x0c, 0x72, 0x81, 0x5f, 0x94, 0xce, 0x3d, 0xf3, 0x1d, 0x0d, 0xef, 0x0e,
	0x6c, 0xd9, 0x73, 0x80, 0xd4, 0xa5, 0x33, 0x66, 0x4b, 0x1e, 0x2b, 0x82, 0xc7, 0x32, 0xcc, 0x04,
	0x78, 0x68, 0xbe, 0xe3, 0x07, 0xcc, 0xe6, 0xab, 0x02, 0xae, 0xf6, 0xf5, 0x28, 0xbc, 0x3f, 0x78,
	0x0a, 0x7d, 0x8e, 0x87, 0xba, 0xf2, 0xb7, 0x65, 0x52, 0xc4, 0x03, 0x21, 0x22, 0x07, 0x97, 0x83,
	0xc3, 0x2c, 0x95, 0x9b, 0xa5, 0x6e, 0xd3, 0x9d, 0x94, 0x03, 0x7f, 0x2a, 0x7d, 0x4e, 0x4d, 0xd0,
	0x5f, 0xf0, 0xf1, 0xd9, 0x79, 0x85, 0x1c, 0x0c, 0x75, 0xf5, 0x5f, 0xcb, 0x07, 0xec, 0xa8, 0x47,
	0x5e, 0xb0, 0x4e, 0xdb, 0x15, 0xa7, 0x63, 0x0f, 0xbe, 0x01, 0xd1, 0x80, 0x59, 0xe1, 0xad, 0xfe,
	0x34, 0xba, 0x4c, 0xae, 0xa6, 0x4f, 0x4f, 0x94, 0xcc, 0x54, 0xc1, 0x2c, 0x06, 0x61, 0xf0, 0xdb,
	0xe3, 0x19, 0x3b, 0xff, 0x74, 0xff, 0x30, 0xa1, 0x1c, 0x1c, 0x26, 0x94, 0x5f, 0x87, 0x09, 0xe5,
	0xe3, 0x51, 0x22, 0x72, 0x70, 0x94, 0x88, 0xfc, 0x38, 0x4a, 0x44, 0x5e, 0x2e, 0x59, 0xb6, 0xb3,
	0xd9, 0x28, 0xbb, 0x28, 0xb2, 0x6e, 0x89, 0x6e, 0x6c, 0xd8, 0x86, 0x8d, 0x2b, 0x7e, 0x1f, 0xaf,
	0x93, 0xbb, 0x23, 0x5e, 0x1e, 0x13, 0x3f, 0x5f, 0xee, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0xbd, 0xab, 0x4b, 0xb7, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryCDP(ctx context.Context, in *QueryCDPRequest, opts ...grpc.CallOption) (*QueryCDPResponse, error)
	QueryCDPs(ctx context.Context, in *QueryCDPsRequest, opts ...grpc.CallOption) (*QueryCDPsResponse, error)
	QueryCDPDeposits(ctx context.Context, in *QueryCDPDepositsRequest, opts ...grpc.CallOption) (*QueryCDPDepositsResponse, error)
	QueryCDPsByCollateralType(ctx context.Context, in *QueryCDPsByCollateralTypeRequest, opts ...grpc.CallOption) (*QueryCDPsByCollateralTypeResponse, error)
	QueryCDPsByCollateralizationRatio(ctx context.Context, in *QueryCDPsByCollateralizationRatioRequest, opts ...grpc.CallOption) (*QueryCDPsByCollateralizationRatioResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryCDP(ctx context.Context, in *QueryCDPRequest, opts ...grpc.CallOption) (*QueryCDPResponse, error) {
	out := new(QueryCDPResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryCDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryCDPs(ctx context.Context, in *QueryCDPsRequest, opts ...grpc.CallOption) (*QueryCDPsResponse, error) {
	out := new(QueryCDPsResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryCDPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryCDPDeposits(ctx context.Context, in *QueryCDPDepositsRequest, opts ...grpc.CallOption) (*QueryCDPDepositsResponse, error) {
	out := new(QueryCDPDepositsResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryCDPDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryCDPsByCollateralType(ctx context.Context, in *QueryCDPsByCollateralTypeRequest, opts ...grpc.CallOption) (*QueryCDPsByCollateralTypeResponse, error) {
	out := new(QueryCDPsByCollateralTypeResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryCDPsByCollateralType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryCDPsByCollateralizationRatio(ctx context.Context, in *QueryCDPsByCollateralizationRatioRequest, opts ...grpc.CallOption) (*QueryCDPsByCollateralizationRatioResponse, error) {
	out := new(QueryCDPsByCollateralizationRatioResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryCDPsByCollateralizationRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.cdp.v1alpha1.QueryService/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryCDP(context.Context, *QueryCDPRequest) (*QueryCDPResponse, error)
	QueryCDPs(context.Context, *QueryCDPsRequest) (*QueryCDPsResponse, error)
	QueryCDPDeposits(context.Context, *QueryCDPDepositsRequest) (*QueryCDPDepositsResponse, error)
	QueryCDPsByCollateralType(context.Context, *QueryCDPsByCollateralTypeRequest) (*QueryCDPsByCollateralTypeResponse, error)
	QueryCDPsByCollateralizationRatio(context.Context, *QueryCDPsByCollateralizationRatioRequest) (*QueryCDPsByCollateralizationRatioResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryCDP(ctx context.Context, req *QueryCDPRequest) (*QueryCDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCDP not implemented")
}
func (*UnimplementedQueryServiceServer) QueryCDPs(ctx context.Context, req *QueryCDPsRequest) (*QueryCDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCDPs not implemented")
}
func (*UnimplementedQueryServiceServer) QueryCDPDeposits(ctx context.Context, req *QueryCDPDepositsRequest) (*QueryCDPDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCDPDeposits not implemented")
}
func (*UnimplementedQueryServiceServer) QueryCDPsByCollateralType(ctx context.Context, req *QueryCDPsByCollateralTypeRequest) (*QueryCDPsByCollateralTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCDPsByCollateralType not implemented")
}
func (*UnimplementedQueryServiceServer) QueryCDPsByCollateralizationRatio(ctx context.Context, req *QueryCDPsByCollateralizationRatioRequest) (*QueryCDPsByCollateralizationRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCDPsByCollateralizationRatio not implemented")
}
func (*UnimplementedQueryServiceServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryCDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryCDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryCDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryCDP(ctx, req.(*QueryCDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryCDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryCDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryCDPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryCDPs(ctx, req.(*QueryCDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryCDPDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryCDPDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryCDPDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryCDPDeposits(ctx, req.(*QueryCDPDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryCDPsByCollateralType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPsByCollateralTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryCDPsByCollateralType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryCDPsByCollateralType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryCDPsByCollateralType(ctx, req.(*QueryCDPsByCollateralTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryCDPsByCollateralizationRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCDPsByCollateralizationRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryCDPsByCollateralizationRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryCDPsByCollateralizationRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryCDPsByCollateralizationRatio(ctx, req.(*QueryCDPsByCollateralizationRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.cdp.v1alpha1.QueryService/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.cdp.v1alpha1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCDP",
			Handler:    _QueryService_QueryCDP_Handler,
		},
		{
			MethodName: "QueryCDPs",
			Handler:    _QueryService_QueryCDPs_Handler,
		},
		{
			MethodName: "QueryCDPDeposits",
			Handler:    _QueryService_QueryCDPDeposits_Handler,
		},
		{
			MethodName: "QueryCDPsByCollateralType",
			Handler:    _QueryService_QueryCDPsByCollateralType_Handler,
		},
		{
			MethodName: "QueryCDPsByCollateralizationRatio",
			Handler:    _QueryService_QueryCDPsByCollateralizationRatio_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _QueryService_QueryParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/cdp/v1alpha1/query.proto",
}

func (m *QueryCDPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cdp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCDPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCDPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for iNdEx := len(m.Cdps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cdps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPsByCollateralTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsByCollateralTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsByCollateralTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPsByCollateralTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsByCollateralTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsByCollateralTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for iNdEx := len(m.Cdps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cdps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPsByCollateralizationRatioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsByCollateralizationRatioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsByCollateralizationRatioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ratio != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCDPsByCollateralizationRatioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCDPsByCollateralizationRatioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCDPsByCollateralizationRatioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for iNdEx := len(m.Cdps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cdps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCDPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCDPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cdp.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCDPsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCDPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for _, e := range m.Cdps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCDPDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCDPDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCDPsByCollateralTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCDPsByCollateralTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for _, e := range m.Cdps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCDPsByCollateralizationRatioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovQuery(uint64(m.Ratio))
	}
	return n
}

func (m *QueryCDPsByCollateralizationRatioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cdps) > 0 {
		for _, e := range m.Cdps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCDPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cdp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cdps = append(m.Cdps, AugmentedCDP{})
			if err := m.Cdps[len(m.Cdps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsByCollateralTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsByCollateralTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsByCollateralTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsByCollateralTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsByCollateralTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsByCollateralTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cdps = append(m.Cdps, AugmentedCDP{})
			if err := m.Cdps[len(m.Cdps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsByCollateralizationRatioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsByCollateralizationRatioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsByCollateralizationRatioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCDPsByCollateralizationRatioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCDPsByCollateralizationRatioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCDPsByCollateralizationRatioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cdps = append(m.Cdps, AugmentedCDP{})
			if err := m.Cdps[len(m.Cdps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
