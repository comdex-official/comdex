// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/lend/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

type QueryLendsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLendsRequest) Reset()         { *m = QueryLendsRequest{} }
func (m *QueryLendsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLendsRequest) ProtoMessage()    {}
func (*QueryLendsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{2}
}
func (m *QueryLendsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendsRequest.Merge(m, src)
}
func (m *QueryLendsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendsRequest proto.InternalMessageInfo

type QueryLendsResponse struct {
	Lends      []LendAsset         `protobuf:"bytes,1,rep,name=lends,proto3" json:"lends" yaml:"lends"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLendsResponse) Reset()         { *m = QueryLendsResponse{} }
func (m *QueryLendsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLendsResponse) ProtoMessage()    {}
func (*QueryLendsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{3}
}
func (m *QueryLendsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendsResponse.Merge(m, src)
}
func (m *QueryLendsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendsResponse proto.InternalMessageInfo

type QueryLendRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLendRequest) Reset()         { *m = QueryLendRequest{} }
func (m *QueryLendRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLendRequest) ProtoMessage()    {}
func (*QueryLendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{4}
}
func (m *QueryLendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendRequest.Merge(m, src)
}
func (m *QueryLendRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendRequest proto.InternalMessageInfo

type QueryLendResponse struct {
	Lend LendAsset `protobuf:"bytes,1,opt,name=lend,proto3" json:"lend" yaml:"lend"`
}

func (m *QueryLendResponse) Reset()         { *m = QueryLendResponse{} }
func (m *QueryLendResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLendResponse) ProtoMessage()    {}
func (*QueryLendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{5}
}
func (m *QueryLendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLendResponse.Merge(m, src)
}
func (m *QueryLendResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLendResponse proto.InternalMessageInfo

type QueryAllLendByOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLendByOwnerRequest) Reset()         { *m = QueryAllLendByOwnerRequest{} }
func (m *QueryAllLendByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLendByOwnerRequest) ProtoMessage()    {}
func (*QueryAllLendByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{6}
}
func (m *QueryAllLendByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLendByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLendByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLendByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLendByOwnerRequest.Merge(m, src)
}
func (m *QueryAllLendByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLendByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLendByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLendByOwnerRequest proto.InternalMessageInfo

type QueryAllLendByOwnerResponse struct {
	Lends      []LendAsset         `protobuf:"bytes,1,rep,name=lends,proto3" json:"lends" yaml:"lend_ids"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLendByOwnerResponse) Reset()         { *m = QueryAllLendByOwnerResponse{} }
func (m *QueryAllLendByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLendByOwnerResponse) ProtoMessage()    {}
func (*QueryAllLendByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{7}
}
func (m *QueryAllLendByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLendByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLendByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLendByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLendByOwnerResponse.Merge(m, src)
}
func (m *QueryAllLendByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLendByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLendByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLendByOwnerResponse proto.InternalMessageInfo

type QueryAllLendByOwnerAndPoolRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	PoolId     uint64             `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLendByOwnerAndPoolRequest) Reset()         { *m = QueryAllLendByOwnerAndPoolRequest{} }
func (m *QueryAllLendByOwnerAndPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLendByOwnerAndPoolRequest) ProtoMessage()    {}
func (*QueryAllLendByOwnerAndPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{8}
}
func (m *QueryAllLendByOwnerAndPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLendByOwnerAndPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLendByOwnerAndPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLendByOwnerAndPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLendByOwnerAndPoolRequest.Merge(m, src)
}
func (m *QueryAllLendByOwnerAndPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLendByOwnerAndPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLendByOwnerAndPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLendByOwnerAndPoolRequest proto.InternalMessageInfo

type QueryAllLendByOwnerAndPoolResponse struct {
	Lends      []LendAsset         `protobuf:"bytes,1,rep,name=lends,proto3" json:"lends" yaml:"lends"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllLendByOwnerAndPoolResponse) Reset()         { *m = QueryAllLendByOwnerAndPoolResponse{} }
func (m *QueryAllLendByOwnerAndPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLendByOwnerAndPoolResponse) ProtoMessage()    {}
func (*QueryAllLendByOwnerAndPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{9}
}
func (m *QueryAllLendByOwnerAndPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLendByOwnerAndPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLendByOwnerAndPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLendByOwnerAndPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLendByOwnerAndPoolResponse.Merge(m, src)
}
func (m *QueryAllLendByOwnerAndPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLendByOwnerAndPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLendByOwnerAndPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLendByOwnerAndPoolResponse proto.InternalMessageInfo

type QueryPairsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsRequest) Reset()         { *m = QueryPairsRequest{} }
func (m *QueryPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairsRequest) ProtoMessage()    {}
func (*QueryPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{10}
}
func (m *QueryPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsRequest.Merge(m, src)
}
func (m *QueryPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsRequest proto.InternalMessageInfo

type QueryPairsResponse struct {
	ExtendedPairs []Extended_Pair     `protobuf:"bytes,1,rep,name=extendedPairs,proto3" json:"extendedPairs" yaml:"extended_pairs"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsResponse) Reset()         { *m = QueryPairsResponse{} }
func (m *QueryPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairsResponse) ProtoMessage()    {}
func (*QueryPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{11}
}
func (m *QueryPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsResponse.Merge(m, src)
}
func (m *QueryPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsResponse proto.InternalMessageInfo

type QueryPairRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPairRequest) Reset()         { *m = QueryPairRequest{} }
func (m *QueryPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPairRequest) ProtoMessage()    {}
func (*QueryPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{12}
}
func (m *QueryPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairRequest.Merge(m, src)
}
func (m *QueryPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairRequest proto.InternalMessageInfo

type QueryPairResponse struct {
	ExtendedPair Extended_Pair `protobuf:"bytes,1,opt,name=ExtendedPair,proto3" json:"ExtendedPair" yaml:"extended_pair"`
}

func (m *QueryPairResponse) Reset()         { *m = QueryPairResponse{} }
func (m *QueryPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPairResponse) ProtoMessage()    {}
func (*QueryPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{13}
}
func (m *QueryPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairResponse.Merge(m, src)
}
func (m *QueryPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairResponse proto.InternalMessageInfo

type QueryAssetRatesParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetRatesParamsRequest) Reset()         { *m = QueryAssetRatesParamsRequest{} }
func (m *QueryAssetRatesParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRatesParamsRequest) ProtoMessage()    {}
func (*QueryAssetRatesParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{14}
}
func (m *QueryAssetRatesParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRatesParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRatesParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRatesParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRatesParamsRequest.Merge(m, src)
}
func (m *QueryAssetRatesParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRatesParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRatesParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRatesParamsRequest proto.InternalMessageInfo

type QueryAssetRatesParamsResponse struct {
	AssetRatesParams []AssetRatesParams  `protobuf:"bytes,1,rep,name=AssetRatesParams,proto3" json:"AssetRatesParams" yaml:"asset_rates_params"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetRatesParamsResponse) Reset()         { *m = QueryAssetRatesParamsResponse{} }
func (m *QueryAssetRatesParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRatesParamsResponse) ProtoMessage()    {}
func (*QueryAssetRatesParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{15}
}
func (m *QueryAssetRatesParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRatesParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRatesParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRatesParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRatesParamsResponse.Merge(m, src)
}
func (m *QueryAssetRatesParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRatesParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRatesParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRatesParamsResponse proto.InternalMessageInfo

type QueryAssetRatesParamRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetRatesParamRequest) Reset()         { *m = QueryAssetRatesParamRequest{} }
func (m *QueryAssetRatesParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRatesParamRequest) ProtoMessage()    {}
func (*QueryAssetRatesParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{16}
}
func (m *QueryAssetRatesParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRatesParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRatesParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRatesParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRatesParamRequest.Merge(m, src)
}
func (m *QueryAssetRatesParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRatesParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRatesParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRatesParamRequest proto.InternalMessageInfo

type QueryAssetRatesParamResponse struct {
	AssetRatesparams AssetRatesParams `protobuf:"bytes,1,opt,name=AssetRatesparams,proto3" json:"AssetRatesparams" yaml:"asset_rates_params"`
}

func (m *QueryAssetRatesParamResponse) Reset()         { *m = QueryAssetRatesParamResponse{} }
func (m *QueryAssetRatesParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRatesParamResponse) ProtoMessage()    {}
func (*QueryAssetRatesParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{17}
}
func (m *QueryAssetRatesParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRatesParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRatesParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRatesParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRatesParamResponse.Merge(m, src)
}
func (m *QueryAssetRatesParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRatesParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRatesParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRatesParamResponse proto.InternalMessageInfo

type QueryPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{18}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

type QueryPoolsResponse struct {
	Pools      []Pool              `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools" yaml:"pools"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{19}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

type QueryPoolRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{20}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

type QueryPoolResponse struct {
	Pool Pool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool" yaml:"pool"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{21}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

type QueryAssetToPairMappingsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetToPairMappingsRequest) Reset()         { *m = QueryAssetToPairMappingsRequest{} }
func (m *QueryAssetToPairMappingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetToPairMappingsRequest) ProtoMessage()    {}
func (*QueryAssetToPairMappingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{22}
}
func (m *QueryAssetToPairMappingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetToPairMappingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetToPairMappingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetToPairMappingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetToPairMappingsRequest.Merge(m, src)
}
func (m *QueryAssetToPairMappingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetToPairMappingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetToPairMappingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetToPairMappingsRequest proto.InternalMessageInfo

type QueryAssetToPairMappingsResponse struct {
	AssetToPairMappings []AssetToPairMapping `protobuf:"bytes,1,rep,name=assetToPairMappings,proto3" json:"assetToPairMappings" yaml:"asset_to_pair_mappings"`
	Pagination          *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAssetToPairMappingsResponse) Reset()         { *m = QueryAssetToPairMappingsResponse{} }
func (m *QueryAssetToPairMappingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetToPairMappingsResponse) ProtoMessage()    {}
func (*QueryAssetToPairMappingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{23}
}
func (m *QueryAssetToPairMappingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetToPairMappingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetToPairMappingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetToPairMappingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetToPairMappingsResponse.Merge(m, src)
}
func (m *QueryAssetToPairMappingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetToPairMappingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetToPairMappingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetToPairMappingsResponse proto.InternalMessageInfo

type QueryAssetToPairMappingRequest struct {
	AssetId uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolId  uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *QueryAssetToPairMappingRequest) Reset()         { *m = QueryAssetToPairMappingRequest{} }
func (m *QueryAssetToPairMappingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetToPairMappingRequest) ProtoMessage()    {}
func (*QueryAssetToPairMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{24}
}
func (m *QueryAssetToPairMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetToPairMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetToPairMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetToPairMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetToPairMappingRequest.Merge(m, src)
}
func (m *QueryAssetToPairMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetToPairMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetToPairMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetToPairMappingRequest proto.InternalMessageInfo

type QueryAssetToPairMappingResponse struct {
	AssetToPairMapping AssetToPairMapping `protobuf:"bytes,1,opt,name=AssetToPairMapping,proto3" json:"AssetToPairMapping" yaml:"asset_to_pair_mapping"`
}

func (m *QueryAssetToPairMappingResponse) Reset()         { *m = QueryAssetToPairMappingResponse{} }
func (m *QueryAssetToPairMappingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetToPairMappingResponse) ProtoMessage()    {}
func (*QueryAssetToPairMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{25}
}
func (m *QueryAssetToPairMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetToPairMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetToPairMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetToPairMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetToPairMappingResponse.Merge(m, src)
}
func (m *QueryAssetToPairMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetToPairMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetToPairMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetToPairMappingResponse proto.InternalMessageInfo

type QueryBorrowsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryBorrowsRequest) Reset()         { *m = QueryBorrowsRequest{} }
func (m *QueryBorrowsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBorrowsRequest) ProtoMessage()    {}
func (*QueryBorrowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{26}
}
func (m *QueryBorrowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBorrowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBorrowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBorrowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBorrowsRequest.Merge(m, src)
}
func (m *QueryBorrowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBorrowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBorrowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBorrowsRequest proto.InternalMessageInfo

type QueryBorrowsResponse struct {
	Borrows    []BorrowAsset       `protobuf:"bytes,1,rep,name=borrows,proto3" json:"borrows" yaml:"borrows"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryBorrowsResponse) Reset()         { *m = QueryBorrowsResponse{} }
func (m *QueryBorrowsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBorrowsResponse) ProtoMessage()    {}
func (*QueryBorrowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{27}
}
func (m *QueryBorrowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBorrowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBorrowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBorrowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBorrowsResponse.Merge(m, src)
}
func (m *QueryBorrowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBorrowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBorrowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBorrowsResponse proto.InternalMessageInfo

type QueryBorrowRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryBorrowRequest) Reset()         { *m = QueryBorrowRequest{} }
func (m *QueryBorrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBorrowRequest) ProtoMessage()    {}
func (*QueryBorrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{28}
}
func (m *QueryBorrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBorrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBorrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBorrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBorrowRequest.Merge(m, src)
}
func (m *QueryBorrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBorrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBorrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBorrowRequest proto.InternalMessageInfo

type QueryBorrowResponse struct {
	Borrow BorrowAsset `protobuf:"bytes,1,opt,name=borrow,proto3" json:"borrow" yaml:"borrow"`
}

func (m *QueryBorrowResponse) Reset()         { *m = QueryBorrowResponse{} }
func (m *QueryBorrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBorrowResponse) ProtoMessage()    {}
func (*QueryBorrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{29}
}
func (m *QueryBorrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBorrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBorrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBorrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBorrowResponse.Merge(m, src)
}
func (m *QueryBorrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBorrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBorrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBorrowResponse proto.InternalMessageInfo

type QueryAllBorrowByOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllBorrowByOwnerRequest) Reset()         { *m = QueryAllBorrowByOwnerRequest{} }
func (m *QueryAllBorrowByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBorrowByOwnerRequest) ProtoMessage()    {}
func (*QueryAllBorrowByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{30}
}
func (m *QueryAllBorrowByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBorrowByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBorrowByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBorrowByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBorrowByOwnerRequest.Merge(m, src)
}
func (m *QueryAllBorrowByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBorrowByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBorrowByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBorrowByOwnerRequest proto.InternalMessageInfo

type QueryAllBorrowByOwnerResponse struct {
	Borrows    []BorrowAsset       `protobuf:"bytes,1,rep,name=borrows,proto3" json:"borrows" yaml:"borrows"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllBorrowByOwnerResponse) Reset()         { *m = QueryAllBorrowByOwnerResponse{} }
func (m *QueryAllBorrowByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBorrowByOwnerResponse) ProtoMessage()    {}
func (*QueryAllBorrowByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{31}
}
func (m *QueryAllBorrowByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBorrowByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBorrowByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBorrowByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBorrowByOwnerResponse.Merge(m, src)
}
func (m *QueryAllBorrowByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBorrowByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBorrowByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBorrowByOwnerResponse proto.InternalMessageInfo

type QueryAllBorrowByOwnerAndPoolRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	PoolId     uint64             `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllBorrowByOwnerAndPoolRequest) Reset()         { *m = QueryAllBorrowByOwnerAndPoolRequest{} }
func (m *QueryAllBorrowByOwnerAndPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBorrowByOwnerAndPoolRequest) ProtoMessage()    {}
func (*QueryAllBorrowByOwnerAndPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{32}
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBorrowByOwnerAndPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBorrowByOwnerAndPoolRequest.Merge(m, src)
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBorrowByOwnerAndPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBorrowByOwnerAndPoolRequest proto.InternalMessageInfo

type QueryAllBorrowByOwnerAndPoolResponse struct {
	Borrows    []BorrowAsset       `protobuf:"bytes,1,rep,name=borrows,proto3" json:"borrows" yaml:"borrows"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllBorrowByOwnerAndPoolResponse) Reset()         { *m = QueryAllBorrowByOwnerAndPoolResponse{} }
func (m *QueryAllBorrowByOwnerAndPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBorrowByOwnerAndPoolResponse) ProtoMessage()    {}
func (*QueryAllBorrowByOwnerAndPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{33}
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBorrowByOwnerAndPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBorrowByOwnerAndPoolResponse.Merge(m, src)
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBorrowByOwnerAndPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBorrowByOwnerAndPoolResponse proto.InternalMessageInfo

type QueryPoolAssetLBMappingRequest struct {
	AssetId uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolId  uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *QueryPoolAssetLBMappingRequest) Reset()         { *m = QueryPoolAssetLBMappingRequest{} }
func (m *QueryPoolAssetLBMappingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolAssetLBMappingRequest) ProtoMessage()    {}
func (*QueryPoolAssetLBMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{34}
}
func (m *QueryPoolAssetLBMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolAssetLBMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolAssetLBMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolAssetLBMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolAssetLBMappingRequest.Merge(m, src)
}
func (m *QueryPoolAssetLBMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolAssetLBMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolAssetLBMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolAssetLBMappingRequest proto.InternalMessageInfo

type QueryPoolAssetLBMappingResponse struct {
	PoolAssetLBMapping PoolAssetLBMapping `protobuf:"bytes,1,opt,name=PoolAssetLBMapping,proto3" json:"PoolAssetLBMapping" yaml:"pool_asset_lb_mapping"`
}

func (m *QueryPoolAssetLBMappingResponse) Reset()         { *m = QueryPoolAssetLBMappingResponse{} }
func (m *QueryPoolAssetLBMappingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolAssetLBMappingResponse) ProtoMessage()    {}
func (*QueryPoolAssetLBMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{35}
}
func (m *QueryPoolAssetLBMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolAssetLBMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolAssetLBMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolAssetLBMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolAssetLBMappingResponse.Merge(m, src)
}
func (m *QueryPoolAssetLBMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolAssetLBMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolAssetLBMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolAssetLBMappingResponse proto.InternalMessageInfo

type QueryReserveBuybackAssetDataRequest struct {
	AssetId uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryReserveBuybackAssetDataRequest) Reset()         { *m = QueryReserveBuybackAssetDataRequest{} }
func (m *QueryReserveBuybackAssetDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveBuybackAssetDataRequest) ProtoMessage()    {}
func (*QueryReserveBuybackAssetDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{36}
}
func (m *QueryReserveBuybackAssetDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveBuybackAssetDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveBuybackAssetDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveBuybackAssetDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveBuybackAssetDataRequest.Merge(m, src)
}
func (m *QueryReserveBuybackAssetDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveBuybackAssetDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveBuybackAssetDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveBuybackAssetDataRequest proto.InternalMessageInfo

type QueryReserveBuybackAssetDataResponse struct {
	ReserveBuybackAssetData ReserveBuybackAssetData `protobuf:"bytes,1,opt,name=ReserveBuybackAssetData,proto3" json:"ReserveBuybackAssetData" yaml:"reserve_buyback_asset_data"`
}

func (m *QueryReserveBuybackAssetDataResponse) Reset()         { *m = QueryReserveBuybackAssetDataResponse{} }
func (m *QueryReserveBuybackAssetDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReserveBuybackAssetDataResponse) ProtoMessage()    {}
func (*QueryReserveBuybackAssetDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{37}
}
func (m *QueryReserveBuybackAssetDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveBuybackAssetDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveBuybackAssetDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveBuybackAssetDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveBuybackAssetDataResponse.Merge(m, src)
}
func (m *QueryReserveBuybackAssetDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveBuybackAssetDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveBuybackAssetDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveBuybackAssetDataResponse proto.InternalMessageInfo

type QueryAuctionParamRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *QueryAuctionParamRequest) Reset()         { *m = QueryAuctionParamRequest{} }
func (m *QueryAuctionParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionParamRequest) ProtoMessage()    {}
func (*QueryAuctionParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{38}
}
func (m *QueryAuctionParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionParamRequest.Merge(m, src)
}
func (m *QueryAuctionParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionParamRequest proto.InternalMessageInfo

type QueryAuctionParamResponse struct {
	AuctionParams AuctionParams `protobuf:"bytes,1,opt,name=auctionParams,proto3" json:"auctionParams" yaml:"auction_params"`
}

func (m *QueryAuctionParamResponse) Reset()         { *m = QueryAuctionParamResponse{} }
func (m *QueryAuctionParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionParamResponse) ProtoMessage()    {}
func (*QueryAuctionParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_462bf3f1a3eff175, []int{39}
}
func (m *QueryAuctionParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionParamResponse.Merge(m, src)
}
func (m *QueryAuctionParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionParamResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.lend.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.lend.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLendsRequest)(nil), "comdex.lend.v1beta1.QueryLendsRequest")
	proto.RegisterType((*QueryLendsResponse)(nil), "comdex.lend.v1beta1.QueryLendsResponse")
	proto.RegisterType((*QueryLendRequest)(nil), "comdex.lend.v1beta1.QueryLendRequest")
	proto.RegisterType((*QueryLendResponse)(nil), "comdex.lend.v1beta1.QueryLendResponse")
	proto.RegisterType((*QueryAllLendByOwnerRequest)(nil), "comdex.lend.v1beta1.QueryAllLendByOwnerRequest")
	proto.RegisterType((*QueryAllLendByOwnerResponse)(nil), "comdex.lend.v1beta1.QueryAllLendByOwnerResponse")
	proto.RegisterType((*QueryAllLendByOwnerAndPoolRequest)(nil), "comdex.lend.v1beta1.QueryAllLendByOwnerAndPoolRequest")
	proto.RegisterType((*QueryAllLendByOwnerAndPoolResponse)(nil), "comdex.lend.v1beta1.QueryAllLendByOwnerAndPoolResponse")
	proto.RegisterType((*QueryPairsRequest)(nil), "comdex.lend.v1beta1.QueryPairsRequest")
	proto.RegisterType((*QueryPairsResponse)(nil), "comdex.lend.v1beta1.QueryPairsResponse")
	proto.RegisterType((*QueryPairRequest)(nil), "comdex.lend.v1beta1.QueryPairRequest")
	proto.RegisterType((*QueryPairResponse)(nil), "comdex.lend.v1beta1.QueryPairResponse")
	proto.RegisterType((*QueryAssetRatesParamsRequest)(nil), "comdex.lend.v1beta1.QueryAssetRatesParamsRequest")
	proto.RegisterType((*QueryAssetRatesParamsResponse)(nil), "comdex.lend.v1beta1.QueryAssetRatesParamsResponse")
	proto.RegisterType((*QueryAssetRatesParamRequest)(nil), "comdex.lend.v1beta1.QueryAssetRatesParamRequest")
	proto.RegisterType((*QueryAssetRatesParamResponse)(nil), "comdex.lend.v1beta1.QueryAssetRatesParamResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "comdex.lend.v1beta1.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "comdex.lend.v1beta1.QueryPoolsResponse")
	proto.RegisterType((*QueryPoolRequest)(nil), "comdex.lend.v1beta1.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "comdex.lend.v1beta1.QueryPoolResponse")
	proto.RegisterType((*QueryAssetToPairMappingsRequest)(nil), "comdex.lend.v1beta1.QueryAssetToPairMappingsRequest")
	proto.RegisterType((*QueryAssetToPairMappingsResponse)(nil), "comdex.lend.v1beta1.QueryAssetToPairMappingsResponse")
	proto.RegisterType((*QueryAssetToPairMappingRequest)(nil), "comdex.lend.v1beta1.QueryAssetToPairMappingRequest")
	proto.RegisterType((*QueryAssetToPairMappingResponse)(nil), "comdex.lend.v1beta1.QueryAssetToPairMappingResponse")
	proto.RegisterType((*QueryBorrowsRequest)(nil), "comdex.lend.v1beta1.QueryBorrowsRequest")
	proto.RegisterType((*QueryBorrowsResponse)(nil), "comdex.lend.v1beta1.QueryBorrowsResponse")
	proto.RegisterType((*QueryBorrowRequest)(nil), "comdex.lend.v1beta1.QueryBorrowRequest")
	proto.RegisterType((*QueryBorrowResponse)(nil), "comdex.lend.v1beta1.QueryBorrowResponse")
	proto.RegisterType((*QueryAllBorrowByOwnerRequest)(nil), "comdex.lend.v1beta1.QueryAllBorrowByOwnerRequest")
	proto.RegisterType((*QueryAllBorrowByOwnerResponse)(nil), "comdex.lend.v1beta1.QueryAllBorrowByOwnerResponse")
	proto.RegisterType((*QueryAllBorrowByOwnerAndPoolRequest)(nil), "comdex.lend.v1beta1.QueryAllBorrowByOwnerAndPoolRequest")
	proto.RegisterType((*QueryAllBorrowByOwnerAndPoolResponse)(nil), "comdex.lend.v1beta1.QueryAllBorrowByOwnerAndPoolResponse")
	proto.RegisterType((*QueryPoolAssetLBMappingRequest)(nil), "comdex.lend.v1beta1.QueryPoolAssetLBMappingRequest")
	proto.RegisterType((*QueryPoolAssetLBMappingResponse)(nil), "comdex.lend.v1beta1.QueryPoolAssetLBMappingResponse")
	proto.RegisterType((*QueryReserveBuybackAssetDataRequest)(nil), "comdex.lend.v1beta1.QueryReserveBuybackAssetDataRequest")
	proto.RegisterType((*QueryReserveBuybackAssetDataResponse)(nil), "comdex.lend.v1beta1.QueryReserveBuybackAssetDataResponse")
	proto.RegisterType((*QueryAuctionParamRequest)(nil), "comdex.lend.v1beta1.QueryAuctionParamRequest")
	proto.RegisterType((*QueryAuctionParamResponse)(nil), "comdex.lend.v1beta1.QueryAuctionParamResponse")
}

func init() { proto.RegisterFile("comdex/lend/v1beta1/query.proto", fileDescriptor_462bf3f1a3eff175) }

var fileDescriptor_462bf3f1a3eff175 = []byte{
	// 1778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xdf, 0x6f, 0x14, 0xd5,
	0x17, 0xef, 0x2d, 0x6d, 0xf9, 0x72, 0x0b, 0x7c, 0xe1, 0xb6, 0x15, 0x3a, 0xb4, 0xdb, 0xf6, 0xd2,
	0x9f, 0x62, 0x77, 0x68, 0x01, 0x15, 0x42, 0x94, 0x4e, 0x20, 0x88, 0x81, 0x50, 0x27, 0x26, 0x26,
	0x46, 0xdd, 0xcc, 0x76, 0x86, 0x75, 0xe3, 0x76, 0x67, 0xd9, 0x99, 0x02, 0x4d, 0xd3, 0x04, 0x7f,
	0x3d, 0x18, 0x5f, 0x34, 0xfa, 0x07, 0x98, 0xa8, 0x09, 0x2f, 0x46, 0x5f, 0x7c, 0x51, 0x1f, 0x7c,
	0x24, 0x46, 0x0d, 0x86, 0x07, 0xc4, 0xc4, 0x46, 0x8b, 0x7f, 0x01, 0x89, 0xef, 0xe6, 0xde, 0x7b,
	0xe6, 0xe7, 0xde, 0x99, 0x9d, 0x35, 0x74, 0x15, 0x9f, 0x5c, 0xe7, 0xde, 0x73, 0xce, 0xe7, 0x73,
	0xce, 0xb9, 0xe7, 0xde, 0x73, 0x0a, 0x1e, 0x59, 0xb2, 0x97, 0x4d, 0xeb, 0x9a, 0x5a, 0xb1, 0xaa,
	0xa6, 0x7a, 0x65, 0xae, 0x68, 0xb9, 0xc6, 0x9c, 0x7a, 0x79, 0xc5, 0xaa, 0xaf, 0xe6, 0x6b, 0x75,
	0xdb, 0xb5, 0x49, 0x9f, 0xd8, 0x90, 0x67, 0x1b, 0xf2, 0xb0, 0x41, 0x79, 0x74, 0xc9, 0x76, 0x96,
	0x6d, 0x47, 0x2d, 0x1a, 0x8e, 0x25, 0x76, 0xfb, 0xb2, 0x35, 0xa3, 0x54, 0xae, 0x1a, 0x6e, 0xd9,
	0xae, 0x0a, 0x05, 0x4a, 0x7f, 0xc9, 0x2e, 0xd9, 0xfc, 0xa7, 0xca, 0x7e, 0xc1, 0xd7, 0xa1, 0x92,
	0x6d, 0x97, 0x2a, 0x96, 0x6a, 0xd4, 0xca, 0xaa, 0x51, 0xad, 0xda, 0x2e, 0x17, 0x71, 0x60, 0x35,
	0x27, 0x43, 0xc5, 0x11, 0x88, 0xf5, 0x51, 0xd9, 0x7a, 0xcd, 0xa8, 0x1b, 0xcb, 0xa0, 0x81, 0xf6,
	0x63, 0xf2, 0x1c, 0xc3, 0xb5, 0xc8, 0x3f, 0xea, 0xd6, 0xe5, 0x15, 0xcb, 0x71, 0xe9, 0x22, 0xee,
	0x8b, 0x7c, 0x75, 0x6a, 0x76, 0xd5, 0xb1, 0xc8, 0x71, 0xdc, 0x23, 0x84, 0xf7, 0xa3, 0x51, 0x34,
	0xdd, 0x3b, 0x7f, 0x20, 0x2f, 0x21, 0x9d, 0x17, 0x42, 0x5a, 0xd7, 0xcd, 0x8d, 0x91, 0x0e, 0x1d,
	0x04, 0x68, 0x1d, 0xef, 0xe5, 0x1a, 0xcf, 0x5b, 0x55, 0xd3, 0x33, 0x43, 0x5e, 0xc6, 0x38, 0x70,
	0x03, 0xe8, 0x9c, 0xcc, 0x0b, 0x9f, 0xe5, 0x99, 0xcf, 0xf2, 0xc2, 0xc3, 0x81, 0xe6, 0x92, 0x05,
	0xb2, 0xda, 0xc0, 0xfd, 0x8d, 0x91, 0xbd, 0xab, 0xc6, 0x72, 0xe5, 0x04, 0x0d, 0x74, 0x50, 0x3d,
	0xa4, 0x90, 0x7e, 0x8b, 0x80, 0x1c, 0x18, 0x05, 0x16, 0xcf, 0xe2, 0x6e, 0x86, 0x97, 0x91, 0xd8,
	0x36, 0xdd, 0x3b, 0x9f, 0x93, 0x92, 0x60, 0x22, 0x0b, 0x8e, 0x63, 0xb9, 0x5a, 0x3f, 0xe3, 0x71,
	0x7f, 0x63, 0x64, 0xa7, 0x30, 0xc6, 0x45, 0xa9, 0x2e, 0x54, 0x90, 0x57, 0x22, 0x0c, 0x3a, 0x39,
	0x83, 0xa9, 0xa6, 0x0c, 0x04, 0x90, 0x2c, 0x14, 0x28, 0xde, 0xe3, 0x33, 0xf0, 0xbc, 0xb6, 0x1b,
	0x77, 0x96, 0x4d, 0xee, 0xad, 0x2e, 0xbd, 0xb3, 0x6c, 0xd2, 0x97, 0x42, 0xae, 0xf5, 0x49, 0x9e,
	0xc5, 0x5d, 0x0c, 0x21, 0x38, 0xb5, 0x19, 0xc7, 0x3e, 0xe0, 0xd8, 0x1b, 0x70, 0xa4, 0x3a, 0x57,
	0x40, 0x3f, 0x46, 0x58, 0xe1, 0xea, 0x17, 0x2a, 0x15, 0x26, 0xa0, 0xad, 0x5e, 0xbc, 0x5a, 0xb5,
	0xea, 0x1e, 0x98, 0x49, 0xdc, 0x6d, 0xb3, 0xff, 0xe7, 0x86, 0x76, 0x68, 0x7b, 0x02, 0x47, 0xf1,
	0xcf, 0x54, 0x17, 0xcb, 0xb1, 0x50, 0x77, 0x3e, 0xe8, 0x50, 0x7f, 0x8f, 0xf0, 0x01, 0x29, 0x4a,
	0x70, 0xc7, 0x85, 0xd6, 0x62, 0xbe, 0x0f, 0xfc, 0xf1, 0xff, 0xc0, 0x1f, 0x85, 0x72, 0x1b, 0xc3,
	0x7e, 0x07, 0xe1, 0x31, 0x09, 0x9d, 0x85, 0xaa, 0xb9, 0x68, 0xdb, 0x95, 0x56, 0x7d, 0x7f, 0x08,
	0x6f, 0xaf, 0xd9, 0x76, 0xa5, 0x50, 0x36, 0x39, 0xd4, 0x2e, 0x8d, 0xdc, 0xdf, 0x18, 0xd9, 0x0d,
	0x08, 0xc4, 0x02, 0xd5, 0x7b, 0xd8, 0xaf, 0x73, 0x66, 0x2c, 0x50, 0xdb, 0x1e, 0x74, 0xa0, 0x6e,
	0x21, 0x4c, 0xd3, 0x98, 0x3d, 0x84, 0x67, 0xd4, 0x2b, 0x6d, 0x8b, 0x46, 0xb9, 0xde, 0xae, 0xd2,
	0xf6, 0x2b, 0xf2, 0xeb, 0x36, 0x37, 0x0a, 0x6e, 0x2b, 0xe1, 0x5d, 0xd6, 0x35, 0xd7, 0xaa, 0x9a,
	0x96, 0xc9, 0x17, 0xc0, 0x7d, 0x54, 0xea, 0xbe, 0x33, 0xb0, 0xb3, 0xc0, 0xb6, 0x6a, 0xc3, 0xe0,
	0xc2, 0x01, 0x61, 0xd8, 0x53, 0x53, 0xa8, 0x31, 0x3d, 0x54, 0x8f, 0xea, 0x6d, 0x5b, 0xdd, 0x63,
	0xd6, 0x92, 0xea, 0xde, 0x6a, 0xc8, 0xef, 0xbe, 0x07, 0x4c, 0xbc, 0xf3, 0x4c, 0x08, 0x29, 0x78,
	0x3e, 0x8b, 0x03, 0x86, 0xc0, 0x01, 0xfd, 0x12, 0x07, 0x50, 0x3d, 0xa2, 0x95, 0xae, 0xe3, 0x21,
	0x91, 0xc4, 0x2c, 0xfb, 0x74, 0xc3, 0xb5, 0x9c, 0xc8, 0xfd, 0xb9, 0xd5, 0xd1, 0xff, 0x13, 0xe1,
	0xe1, 0x04, 0xfb, 0xe0, 0x06, 0x17, 0xef, 0x89, 0xaf, 0x41, 0x2e, 0x4c, 0x48, 0x5d, 0x11, 0xdf,
	0xac, 0x8d, 0x81, 0x37, 0x06, 0x05, 0x12, 0x83, 0xad, 0x17, 0xea, 0x6c, 0x43, 0x01, 0x6e, 0x74,
	0xbd, 0xc1, 0xc2, 0x96, 0x67, 0xc5, 0xac, 0x57, 0xe4, 0xa3, 0x86, 0x93, 0x12, 0xe4, 0x43, 0x24,
	0x0f, 0x93, 0xdc, 0x4b, 0x91, 0x97, 0xcd, 0x96, 0x78, 0x29, 0xf6, 0x14, 0x62, 0x05, 0xaf, 0x5d,
	0x19, 0xf3, 0xb5, 0x5f, 0x2f, 0x84, 0x51, 0x70, 0xc0, 0x19, 0xdc, 0xcd, 0xca, 0xbe, 0x97, 0x1b,
	0x83, 0xf2, 0xf7, 0x9c, 0x6d, 0x57, 0xe2, 0x15, 0x96, 0x4b, 0x51, 0x5d, 0x48, 0xb7, 0xaf, 0x1a,
	0x84, 0x2e, 0xbf, 0x78, 0xb0, 0x5f, 0x08, 0x79, 0xd5, 0xe7, 0xa7, 0xe1, 0x2e, 0x86, 0x10, 0xfc,
	0x99, 0x42, 0x2f, 0xf6, 0x00, 0x62, 0x42, 0x54, 0xe7, 0xb2, 0xf4, 0x3a, 0xc2, 0x23, 0x41, 0x16,
	0x3d, 0x6f, 0xb3, 0x02, 0x70, 0xc1, 0xa8, 0xd5, 0xca, 0xd5, 0x52, 0xbb, 0xa2, 0xf7, 0x76, 0x27,
	0x1e, 0x4d, 0x86, 0x00, 0x5c, 0xaf, 0x23, 0xdc, 0x67, 0x34, 0xae, 0x43, 0x68, 0xa7, 0x92, 0x13,
	0x3a, 0xb2, 0x5f, 0x9b, 0x00, 0x4f, 0x0c, 0x87, 0x53, 0xda, 0xb5, 0x79, 0x19, 0x2c, 0x2c, 0x83,
	0x52, 0xaa, 0xcb, 0x4c, 0x6d, 0x79, 0x1e, 0xac, 0xe3, 0x5c, 0x82, 0x1b, 0xbc, 0x40, 0xe4, 0xf1,
	0xff, 0x04, 0x62, 0x2f, 0x37, 0xb4, 0xbe, 0xe0, 0x19, 0xe7, 0xad, 0x50, 0x7d, 0x3b, 0xff, 0x79,
	0xce, 0x6c, 0xe9, 0x69, 0x44, 0x3f, 0x4a, 0xce, 0x04, 0x3f, 0x0a, 0xeb, 0x98, 0x34, 0xae, 0x42,
	0x46, 0x64, 0x8e, 0xc1, 0x38, 0xc4, 0x60, 0x28, 0x25, 0x06, 0x54, 0x97, 0x18, 0xa2, 0x2e, 0x34,
	0x6e, 0x9a, 0x5d, 0xaf, 0xdb, 0x57, 0xdb, 0x95, 0x9f, 0xdf, 0x21, 0xdc, 0x1f, 0x35, 0x0b, 0xde,
	0xd0, 0xf1, 0xf6, 0xa2, 0xf8, 0x04, 0x69, 0x38, 0x2a, 0x75, 0x81, 0x10, 0x13, 0x4f, 0xb9, 0x47,
	0x80, 0x3b, 0x04, 0x01, 0xc4, 0xa9, 0xee, 0x29, 0xda, 0xf2, 0x24, 0x1b, 0x87, 0x4a, 0x29, 0x40,
	0x25, 0x95, 0x9b, 0x4b, 0x11, 0x47, 0xfb, 0x84, 0x2f, 0xe2, 0x1e, 0x81, 0x13, 0x9c, 0xdc, 0x9c,
	0xef, 0x00, 0xf0, 0xdd, 0x15, 0xe6, 0x4b, 0x75, 0x50, 0x43, 0x3f, 0xf5, 0xef, 0xb0, 0x4a, 0x45,
	0x88, 0xfd, 0x3b, 0x1b, 0xb0, 0xdb, 0xfe, 0x93, 0xa4, 0x01, 0xe7, 0x43, 0x9c, 0x0b, 0x77, 0x11,
	0x3e, 0x28, 0x65, 0xf5, 0x1f, 0xe8, 0xc4, 0x7e, 0x41, 0x78, 0x3c, 0x9d, 0xdb, 0x43, 0x1c, 0x38,
	0xef, 0xa6, 0x60, 0x44, 0x38, 0xa4, 0xf3, 0xda, 0x3f, 0x72, 0x53, 0xc8, 0xec, 0x07, 0x37, 0x45,
	0xe3, 0x6a, 0xea, 0x4d, 0xd1, 0xb8, 0x3d, 0x7e, 0x53, 0x70, 0x20, 0x02, 0x7c, 0xa5, 0x18, 0xba,
	0x29, 0x1a, 0x25, 0xe9, 0x29, 0xc8, 0x6c, 0xdd, 0x72, 0xac, 0xfa, 0x15, 0x4b, 0x5b, 0x59, 0x2d,
	0x1a, 0x4b, 0xaf, 0xf1, 0x4d, 0xa7, 0x0d, 0xd7, 0xf0, 0xdc, 0x34, 0x18, 0x77, 0x93, 0xef, 0x11,
	0xfa, 0x95, 0x97, 0x40, 0x89, 0x2a, 0x80, 0xe9, 0xfb, 0x08, 0xef, 0x4b, 0xd8, 0x03, 0x7c, 0x1f,
	0x93, 0xf2, 0x4d, 0x90, 0xd1, 0x66, 0x80, 0xf4, 0x98, 0x20, 0x5d, 0x17, 0xdb, 0x0a, 0x45, 0xb1,
	0x0f, 0xf8, 0x9b, 0x86, 0x6b, 0x50, 0x3d, 0xc9, 0x2e, 0x9d, 0xc3, 0xfb, 0x45, 0xf2, 0xaf, 0x2c,
	0xb1, 0x84, 0x89, 0xf4, 0x11, 0x03, 0xb8, 0xc7, 0xa8, 0xd5, 0x02, 0xc6, 0xdd, 0x46, 0xad, 0x76,
	0xce, 0xa4, 0x6f, 0x21, 0x3c, 0x28, 0x91, 0x09, 0x5a, 0x6f, 0x23, 0xf4, 0xdd, 0x49, 0xed, 0x3c,
	0xc3, 0x1a, 0x9c, 0x78, 0xeb, 0x0d, 0x6a, 0xfc, 0x0e, 0x22, 0xaa, 0x77, 0xfe, 0x13, 0x05, 0x77,
	0x73, 0x18, 0xe4, 0x75, 0x84, 0x71, 0x30, 0xdf, 0x24, 0x93, 0x52, 0x53, 0x0d, 0x53, 0x57, 0x65,
	0xaa, 0xe9, 0x3e, 0x41, 0x89, 0xd2, 0x37, 0x6e, 0xff, 0xf1, 0x41, 0xe7, 0x10, 0x51, 0xd4, 0xa4,
	0x31, 0xb3, 0x43, 0xde, 0x44, 0x78, 0x87, 0x2f, 0x4a, 0x26, 0xd2, 0x55, 0x7b, 0x08, 0x26, 0x9b,
	0x6d, 0x03, 0x00, 0x53, 0x1c, 0xc0, 0x18, 0x19, 0x49, 0x06, 0xa0, 0xae, 0x95, 0xcd, 0x75, 0xf2,
	0x19, 0x82, 0xeb, 0x38, 0x3a, 0x55, 0x22, 0x6a, 0xb2, 0x21, 0xe9, 0x38, 0x53, 0x39, 0x9c, 0x5d,
	0x00, 0x30, 0x1e, 0xe1, 0x18, 0x67, 0xc9, 0xa1, 0x64, 0x8c, 0x85, 0xe2, 0x6a, 0x81, 0xd7, 0x7f,
	0x75, 0x8d, 0xff, 0x67, 0x9d, 0xfc, 0x24, 0x1f, 0xaa, 0x42, 0xe5, 0x25, 0x8f, 0x67, 0x45, 0x11,
	0xbd, 0x86, 0x94, 0x27, 0x5a, 0x96, 0x03, 0x12, 0x1a, 0x27, 0x71, 0x92, 0x9c, 0xc8, 0x40, 0xa2,
	0xc0, 0x8a, 0x8c, 0xc7, 0x44, 0x5d, 0x83, 0xda, 0xb7, 0xce, 0xfa, 0x8f, 0x1e, 0x98, 0x03, 0xa4,
	0x64, 0x58, 0x64, 0x4e, 0xa2, 0x4c, 0x37, 0xdf, 0x08, 0x08, 0x0f, 0x72, 0x84, 0xc3, 0xe4, 0x80,
	0x9a, 0xfc, 0x27, 0x8d, 0xe0, 0x40, 0x88, 0x21, 0xd5, 0x64, 0x9a, 0xf6, 0x60, 0x56, 0xa7, 0x4c,
	0x35, 0xdd, 0x97, 0xe9, 0x40, 0xf0, 0x49, 0x59, 0x70, 0x20, 0x98, 0x68, 0xda, 0x81, 0x08, 0x8d,
	0xb6, 0x94, 0xc9, 0x66, 0xdb, 0x32, 0x1d, 0x08, 0x0e, 0x40, 0x1c, 0x88, 0xcf, 0x11, 0x1e, 0x90,
	0x4e, 0x88, 0xc8, 0x5c, 0x4a, 0x8e, 0xc8, 0xa7, 0x59, 0xca, 0x7c, 0x2b, 0x22, 0x80, 0x54, 0xe5,
	0x48, 0x67, 0xc8, 0x94, 0x14, 0x69, 0xe3, 0xa0, 0x84, 0x7c, 0xe1, 0xf5, 0x10, 0x31, 0x95, 0xe4,
	0x70, 0x66, 0xeb, 0x1e, 0xde, 0xb9, 0x16, 0x24, 0x32, 0x9d, 0xe2, 0x06, 0xb8, 0xc2, 0xc9, 0x41,
	0xba, 0xf1, 0x29, 0x48, 0x5a, 0x10, 0x43, 0xa3, 0x9e, 0xd4, 0x74, 0x0b, 0x4f, 0x67, 0x9a, 0xa5,
	0x1b, 0x37, 0x1a, 0xa4, 0x1b, 0x2b, 0x1c, 0x13, 0xe9, 0xaa, 0xb3, 0xa4, 0x5b, 0xb8, 0x2c, 0x34,
	0x49, 0x37, 0x06, 0x40, 0x78, 0xe2, 0x1b, 0xe4, 0x5d, 0xa7, 0x92, 0xa9, 0xc0, 0xd1, 0x26, 0xe1,
	0x90, 0x8e, 0x54, 0x94, 0x63, 0x2d, 0x4a, 0xb5, 0x10, 0xc8, 0xf8, 0x34, 0x83, 0xfc, 0x88, 0xf0,
	0xbe, 0x04, 0xcd, 0xe4, 0x48, 0x2b, 0x38, 0x3c, 0xf0, 0x47, 0x5b, 0x13, 0x02, 0xec, 0xcf, 0x70,
	0xec, 0x1a, 0x39, 0xd5, 0x02, 0x76, 0x75, 0xcd, 0x7b, 0x9e, 0x85, 0x6b, 0xf1, 0x3b, 0x08, 0xef,
	0x0c, 0x37, 0xe4, 0x24, 0xa5, 0xd0, 0x46, 0x47, 0x05, 0xca, 0x4c, 0x86, 0x9d, 0x80, 0x77, 0x9c,
	0xe3, 0xcd, 0x91, 0x21, 0x29, 0x5e, 0xef, 0xa9, 0xff, 0x2e, 0xc2, 0xbd, 0x21, 0xf1, 0xb4, 0xcb,
	0x21, 0xd2, 0x72, 0x2b, 0xd3, 0xcd, 0x37, 0x02, 0x90, 0x19, 0x0e, 0xe4, 0x20, 0x19, 0x4b, 0x03,
	0x22, 0x32, 0xf5, 0x4b, 0xbf, 0x30, 0xc6, 0xba, 0x9e, 0xd4, 0xc2, 0x28, 0xef, 0xbd, 0x53, 0x0b,
	0x63, 0x42, 0x1b, 0x4c, 0x8f, 0x71, 0xac, 0x2a, 0x99, 0x4d, 0xc3, 0xda, 0xf8, 0x62, 0xb8, 0x9b,
	0x34, 0x07, 0xf0, 0xde, 0x0c, 0x4f, 0x66, 0xc7, 0x12, 0x7b, 0x35, 0x1c, 0xff, 0x1b, 0x92, 0x40,
	0xe6, 0x34, 0x27, 0xf3, 0x14, 0x39, 0x99, 0x89, 0x4c, 0xd2, 0xcb, 0xe1, 0x07, 0xef, 0xf8, 0x35,
	0xb6, 0x29, 0x69, 0xc7, 0x2f, 0xb1, 0xb7, 0x4b, 0x3b, 0x7e, 0xc9, 0x0d, 0x19, 0x3d, 0xcb, 0xc9,
	0x2c, 0x90, 0xa7, 0x13, 0xab, 0x5d, 0x43, 0x6b, 0x25, 0x3f, 0x7d, 0x77, 0xbc, 0x58, 0x25, 0x34,
	0x1f, 0x69, 0xb1, 0x4a, 0x6f, 0xc7, 0xd2, 0x62, 0xd5, 0xa4, 0x0b, 0x6b, 0xf2, 0xc6, 0x4b, 0x6e,
	0xa2, 0x42, 0x1c, 0xc9, 0x0d, 0xef, 0xcf, 0x08, 0x91, 0x06, 0x86, 0xcc, 0xa6, 0x64, 0x50, 0x63,
	0x7f, 0xa5, 0xe4, 0xb3, 0x6e, 0xcf, 0x56, 0xd3, 0x85, 0x88, 0x78, 0x46, 0xa8, 0x6b, 0xa2, 0x73,
	0x5b, 0xd7, 0x16, 0x6f, 0xfe, 0x9e, 0xeb, 0xb8, 0xb1, 0x99, 0xeb, 0xb8, 0xb9, 0x99, 0x43, 0xb7,
	0x36, 0x73, 0xe8, 0xb7, 0xcd, 0x1c, 0x7a, 0xef, 0x5e, 0xae, 0xe3, 0xd6, 0xbd, 0x5c, 0xc7, 0xcf,
	0xf7, 0x72, 0x1d, 0x2f, 0xe6, 0x4b, 0x65, 0xf7, 0xd5, 0x95, 0x22, 0x03, 0x03, 0x8a, 0x67, 0xed,
	0x4b, 0x97, 0xca, 0x4b, 0x65, 0xa3, 0xe2, 0x19, 0x02, 0x53, 0xee, 0x6a, 0xcd, 0x72, 0x8a, 0x3d,
	0xfc, 0x5f, 0xcc, 0x1c, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xb3, 0xf4, 0x71, 0x0b, 0x24,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryLends(ctx context.Context, in *QueryLendsRequest, opts ...grpc.CallOption) (*QueryLendsResponse, error)
	QueryLend(ctx context.Context, in *QueryLendRequest, opts ...grpc.CallOption) (*QueryLendResponse, error)
	QueryAllLendByOwner(ctx context.Context, in *QueryAllLendByOwnerRequest, opts ...grpc.CallOption) (*QueryAllLendByOwnerResponse, error)
	QueryAllLendByOwnerAndPool(ctx context.Context, in *QueryAllLendByOwnerAndPoolRequest, opts ...grpc.CallOption) (*QueryAllLendByOwnerAndPoolResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryPairs(ctx context.Context, in *QueryPairsRequest, opts ...grpc.CallOption) (*QueryPairsResponse, error)
	QueryPair(ctx context.Context, in *QueryPairRequest, opts ...grpc.CallOption) (*QueryPairResponse, error)
	QueryAssetRatesParams(ctx context.Context, in *QueryAssetRatesParamsRequest, opts ...grpc.CallOption) (*QueryAssetRatesParamsResponse, error)
	QueryAssetRatesParam(ctx context.Context, in *QueryAssetRatesParamRequest, opts ...grpc.CallOption) (*QueryAssetRatesParamResponse, error)
	QueryPools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	QueryPool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	QueryAssetToPairMappings(ctx context.Context, in *QueryAssetToPairMappingsRequest, opts ...grpc.CallOption) (*QueryAssetToPairMappingsResponse, error)
	QueryAssetToPairMapping(ctx context.Context, in *QueryAssetToPairMappingRequest, opts ...grpc.CallOption) (*QueryAssetToPairMappingResponse, error)
	QueryBorrows(ctx context.Context, in *QueryBorrowsRequest, opts ...grpc.CallOption) (*QueryBorrowsResponse, error)
	QueryBorrow(ctx context.Context, in *QueryBorrowRequest, opts ...grpc.CallOption) (*QueryBorrowResponse, error)
	QueryAllBorrowByOwner(ctx context.Context, in *QueryAllBorrowByOwnerRequest, opts ...grpc.CallOption) (*QueryAllBorrowByOwnerResponse, error)
	QueryAllBorrowByOwnerAndPool(ctx context.Context, in *QueryAllBorrowByOwnerAndPoolRequest, opts ...grpc.CallOption) (*QueryAllBorrowByOwnerAndPoolResponse, error)
	QueryPoolAssetLBMapping(ctx context.Context, in *QueryPoolAssetLBMappingRequest, opts ...grpc.CallOption) (*QueryPoolAssetLBMappingResponse, error)
	QueryReserveBuybackAssetData(ctx context.Context, in *QueryReserveBuybackAssetDataRequest, opts ...grpc.CallOption) (*QueryReserveBuybackAssetDataResponse, error)
	QueryAuctionParams(ctx context.Context, in *QueryAuctionParamRequest, opts ...grpc.CallOption) (*QueryAuctionParamResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryLends(ctx context.Context, in *QueryLendsRequest, opts ...grpc.CallOption) (*QueryLendsResponse, error) {
	out := new(QueryLendsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryLends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLend(ctx context.Context, in *QueryLendRequest, opts ...grpc.CallOption) (*QueryLendResponse, error) {
	out := new(QueryLendResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryLend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllLendByOwner(ctx context.Context, in *QueryAllLendByOwnerRequest, opts ...grpc.CallOption) (*QueryAllLendByOwnerResponse, error) {
	out := new(QueryAllLendByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAllLendByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllLendByOwnerAndPool(ctx context.Context, in *QueryAllLendByOwnerAndPoolRequest, opts ...grpc.CallOption) (*QueryAllLendByOwnerAndPoolResponse, error) {
	out := new(QueryAllLendByOwnerAndPoolResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAllLendByOwnerAndPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPairs(ctx context.Context, in *QueryPairsRequest, opts ...grpc.CallOption) (*QueryPairsResponse, error) {
	out := new(QueryPairsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPair(ctx context.Context, in *QueryPairRequest, opts ...grpc.CallOption) (*QueryPairResponse, error) {
	out := new(QueryPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssetRatesParams(ctx context.Context, in *QueryAssetRatesParamsRequest, opts ...grpc.CallOption) (*QueryAssetRatesParamsResponse, error) {
	out := new(QueryAssetRatesParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAssetRatesParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssetRatesParam(ctx context.Context, in *QueryAssetRatesParamRequest, opts ...grpc.CallOption) (*QueryAssetRatesParamResponse, error) {
	out := new(QueryAssetRatesParamResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAssetRatesParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssetToPairMappings(ctx context.Context, in *QueryAssetToPairMappingsRequest, opts ...grpc.CallOption) (*QueryAssetToPairMappingsResponse, error) {
	out := new(QueryAssetToPairMappingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAssetToPairMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssetToPairMapping(ctx context.Context, in *QueryAssetToPairMappingRequest, opts ...grpc.CallOption) (*QueryAssetToPairMappingResponse, error) {
	out := new(QueryAssetToPairMappingResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAssetToPairMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBorrows(ctx context.Context, in *QueryBorrowsRequest, opts ...grpc.CallOption) (*QueryBorrowsResponse, error) {
	out := new(QueryBorrowsResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryBorrows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryBorrow(ctx context.Context, in *QueryBorrowRequest, opts ...grpc.CallOption) (*QueryBorrowResponse, error) {
	out := new(QueryBorrowResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllBorrowByOwner(ctx context.Context, in *QueryAllBorrowByOwnerRequest, opts ...grpc.CallOption) (*QueryAllBorrowByOwnerResponse, error) {
	out := new(QueryAllBorrowByOwnerResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllBorrowByOwnerAndPool(ctx context.Context, in *QueryAllBorrowByOwnerAndPoolRequest, opts ...grpc.CallOption) (*QueryAllBorrowByOwnerAndPoolResponse, error) {
	out := new(QueryAllBorrowByOwnerAndPoolResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwnerAndPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolAssetLBMapping(ctx context.Context, in *QueryPoolAssetLBMappingRequest, opts ...grpc.CallOption) (*QueryPoolAssetLBMappingResponse, error) {
	out := new(QueryPoolAssetLBMappingResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryPoolAssetLBMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryReserveBuybackAssetData(ctx context.Context, in *QueryReserveBuybackAssetDataRequest, opts ...grpc.CallOption) (*QueryReserveBuybackAssetDataResponse, error) {
	out := new(QueryReserveBuybackAssetDataResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryReserveBuybackAssetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAuctionParams(ctx context.Context, in *QueryAuctionParamRequest, opts ...grpc.CallOption) (*QueryAuctionParamResponse, error) {
	out := new(QueryAuctionParamResponse)
	err := c.cc.Invoke(ctx, "/comdex.lend.v1beta1.Query/QueryAuctionParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryLends(context.Context, *QueryLendsRequest) (*QueryLendsResponse, error)
	QueryLend(context.Context, *QueryLendRequest) (*QueryLendResponse, error)
	QueryAllLendByOwner(context.Context, *QueryAllLendByOwnerRequest) (*QueryAllLendByOwnerResponse, error)
	QueryAllLendByOwnerAndPool(context.Context, *QueryAllLendByOwnerAndPoolRequest) (*QueryAllLendByOwnerAndPoolResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryPairs(context.Context, *QueryPairsRequest) (*QueryPairsResponse, error)
	QueryPair(context.Context, *QueryPairRequest) (*QueryPairResponse, error)
	QueryAssetRatesParams(context.Context, *QueryAssetRatesParamsRequest) (*QueryAssetRatesParamsResponse, error)
	QueryAssetRatesParam(context.Context, *QueryAssetRatesParamRequest) (*QueryAssetRatesParamResponse, error)
	QueryPools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	QueryPool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	QueryAssetToPairMappings(context.Context, *QueryAssetToPairMappingsRequest) (*QueryAssetToPairMappingsResponse, error)
	QueryAssetToPairMapping(context.Context, *QueryAssetToPairMappingRequest) (*QueryAssetToPairMappingResponse, error)
	QueryBorrows(context.Context, *QueryBorrowsRequest) (*QueryBorrowsResponse, error)
	QueryBorrow(context.Context, *QueryBorrowRequest) (*QueryBorrowResponse, error)
	QueryAllBorrowByOwner(context.Context, *QueryAllBorrowByOwnerRequest) (*QueryAllBorrowByOwnerResponse, error)
	QueryAllBorrowByOwnerAndPool(context.Context, *QueryAllBorrowByOwnerAndPoolRequest) (*QueryAllBorrowByOwnerAndPoolResponse, error)
	QueryPoolAssetLBMapping(context.Context, *QueryPoolAssetLBMappingRequest) (*QueryPoolAssetLBMappingResponse, error)
	QueryReserveBuybackAssetData(context.Context, *QueryReserveBuybackAssetDataRequest) (*QueryReserveBuybackAssetDataResponse, error)
	QueryAuctionParams(context.Context, *QueryAuctionParamRequest) (*QueryAuctionParamResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryLends(ctx context.Context, req *QueryLendsRequest) (*QueryLendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLends not implemented")
}
func (*UnimplementedQueryServer) QueryLend(ctx context.Context, req *QueryLendRequest) (*QueryLendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLend not implemented")
}
func (*UnimplementedQueryServer) QueryAllLendByOwner(ctx context.Context, req *QueryAllLendByOwnerRequest) (*QueryAllLendByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllLendByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryAllLendByOwnerAndPool(ctx context.Context, req *QueryAllLendByOwnerAndPoolRequest) (*QueryAllLendByOwnerAndPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllLendByOwnerAndPool not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryPairs(ctx context.Context, req *QueryPairsRequest) (*QueryPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPairs not implemented")
}
func (*UnimplementedQueryServer) QueryPair(ctx context.Context, req *QueryPairRequest) (*QueryPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPair not implemented")
}
func (*UnimplementedQueryServer) QueryAssetRatesParams(ctx context.Context, req *QueryAssetRatesParamsRequest) (*QueryAssetRatesParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssetRatesParams not implemented")
}
func (*UnimplementedQueryServer) QueryAssetRatesParam(ctx context.Context, req *QueryAssetRatesParamRequest) (*QueryAssetRatesParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssetRatesParam not implemented")
}
func (*UnimplementedQueryServer) QueryPools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPools not implemented")
}
func (*UnimplementedQueryServer) QueryPool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPool not implemented")
}
func (*UnimplementedQueryServer) QueryAssetToPairMappings(ctx context.Context, req *QueryAssetToPairMappingsRequest) (*QueryAssetToPairMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssetToPairMappings not implemented")
}
func (*UnimplementedQueryServer) QueryAssetToPairMapping(ctx context.Context, req *QueryAssetToPairMappingRequest) (*QueryAssetToPairMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssetToPairMapping not implemented")
}
func (*UnimplementedQueryServer) QueryBorrows(ctx context.Context, req *QueryBorrowsRequest) (*QueryBorrowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBorrows not implemented")
}
func (*UnimplementedQueryServer) QueryBorrow(ctx context.Context, req *QueryBorrowRequest) (*QueryBorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBorrow not implemented")
}
func (*UnimplementedQueryServer) QueryAllBorrowByOwner(ctx context.Context, req *QueryAllBorrowByOwnerRequest) (*QueryAllBorrowByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllBorrowByOwner not implemented")
}
func (*UnimplementedQueryServer) QueryAllBorrowByOwnerAndPool(ctx context.Context, req *QueryAllBorrowByOwnerAndPoolRequest) (*QueryAllBorrowByOwnerAndPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllBorrowByOwnerAndPool not implemented")
}
func (*UnimplementedQueryServer) QueryPoolAssetLBMapping(ctx context.Context, req *QueryPoolAssetLBMappingRequest) (*QueryPoolAssetLBMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolAssetLBMapping not implemented")
}
func (*UnimplementedQueryServer) QueryReserveBuybackAssetData(ctx context.Context, req *QueryReserveBuybackAssetDataRequest) (*QueryReserveBuybackAssetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReserveBuybackAssetData not implemented")
}
func (*UnimplementedQueryServer) QueryAuctionParams(ctx context.Context, req *QueryAuctionParamRequest) (*QueryAuctionParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuctionParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryLends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryLends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLends(ctx, req.(*QueryLendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryLend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLend(ctx, req.(*QueryLendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllLendByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLendByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllLendByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAllLendByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllLendByOwner(ctx, req.(*QueryAllLendByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllLendByOwnerAndPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLendByOwnerAndPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllLendByOwnerAndPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAllLendByOwnerAndPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllLendByOwnerAndPool(ctx, req.(*QueryAllLendByOwnerAndPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPairs(ctx, req.(*QueryPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPair(ctx, req.(*QueryPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssetRatesParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetRatesParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssetRatesParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAssetRatesParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssetRatesParams(ctx, req.(*QueryAssetRatesParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssetRatesParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetRatesParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssetRatesParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAssetRatesParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssetRatesParam(ctx, req.(*QueryAssetRatesParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssetToPairMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetToPairMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssetToPairMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAssetToPairMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssetToPairMappings(ctx, req.(*QueryAssetToPairMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssetToPairMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetToPairMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssetToPairMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAssetToPairMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssetToPairMapping(ctx, req.(*QueryAssetToPairMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBorrows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBorrows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryBorrows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBorrows(ctx, req.(*QueryBorrowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryBorrow(ctx, req.(*QueryBorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllBorrowByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBorrowByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllBorrowByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllBorrowByOwner(ctx, req.(*QueryAllBorrowByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllBorrowByOwnerAndPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBorrowByOwnerAndPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllBorrowByOwnerAndPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAllBorrowByOwnerAndPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllBorrowByOwnerAndPool(ctx, req.(*QueryAllBorrowByOwnerAndPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolAssetLBMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolAssetLBMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolAssetLBMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryPoolAssetLBMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolAssetLBMapping(ctx, req.(*QueryPoolAssetLBMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryReserveBuybackAssetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveBuybackAssetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryReserveBuybackAssetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryReserveBuybackAssetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryReserveBuybackAssetData(ctx, req.(*QueryReserveBuybackAssetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAuctionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAuctionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.lend.v1beta1.Query/QueryAuctionParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAuctionParams(ctx, req.(*QueryAuctionParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.lend.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLends",
			Handler:    _Query_QueryLends_Handler,
		},
		{
			MethodName: "QueryLend",
			Handler:    _Query_QueryLend_Handler,
		},
		{
			MethodName: "QueryAllLendByOwner",
			Handler:    _Query_QueryAllLendByOwner_Handler,
		},
		{
			MethodName: "QueryAllLendByOwnerAndPool",
			Handler:    _Query_QueryAllLendByOwnerAndPool_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryPairs",
			Handler:    _Query_QueryPairs_Handler,
		},
		{
			MethodName: "QueryPair",
			Handler:    _Query_QueryPair_Handler,
		},
		{
			MethodName: "QueryAssetRatesParams",
			Handler:    _Query_QueryAssetRatesParams_Handler,
		},
		{
			MethodName: "QueryAssetRatesParam",
			Handler:    _Query_QueryAssetRatesParam_Handler,
		},
		{
			MethodName: "QueryPools",
			Handler:    _Query_QueryPools_Handler,
		},
		{
			MethodName: "QueryPool",
			Handler:    _Query_QueryPool_Handler,
		},
		{
			MethodName: "QueryAssetToPairMappings",
			Handler:    _Query_QueryAssetToPairMappings_Handler,
		},
		{
			MethodName: "QueryAssetToPairMapping",
			Handler:    _Query_QueryAssetToPairMapping_Handler,
		},
		{
			MethodName: "QueryBorrows",
			Handler:    _Query_QueryBorrows_Handler,
		},
		{
			MethodName: "QueryBorrow",
			Handler:    _Query_QueryBorrow_Handler,
		},
		{
			MethodName: "QueryAllBorrowByOwner",
			Handler:    _Query_QueryAllBorrowByOwner_Handler,
		},
		{
			MethodName: "QueryAllBorrowByOwnerAndPool",
			Handler:    _Query_QueryAllBorrowByOwnerAndPool_Handler,
		},
		{
			MethodName: "QueryPoolAssetLBMapping",
			Handler:    _Query_QueryPoolAssetLBMapping_Handler,
		},
		{
			MethodName: "QueryReserveBuybackAssetData",
			Handler:    _Query_QueryReserveBuybackAssetData_Handler,
		},
		{
			MethodName: "QueryAuctionParams",
			Handler:    _Query_QueryAuctionParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/lend/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLendsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lends) > 0 {
		for iNdEx := len(m.Lends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lend.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLendByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLendByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLendByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLendByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLendByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLendByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lends) > 0 {
		for iNdEx := len(m.Lends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLendByOwnerAndPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLendByOwnerAndPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLendByOwnerAndPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLendByOwnerAndPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLendByOwnerAndPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLendByOwnerAndPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lends) > 0 {
		for iNdEx := len(m.Lends) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lends[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtendedPairs) > 0 {
		for iNdEx := len(m.ExtendedPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExtendedPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAssetRatesParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRatesParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRatesParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetRatesParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRatesParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRatesParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetRatesParams) > 0 {
		for iNdEx := len(m.AssetRatesParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetRatesParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetRatesParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRatesParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRatesParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetRatesParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRatesParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRatesParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetRatesparams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAssetToPairMappingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetToPairMappingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetToPairMappingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetToPairMappingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetToPairMappingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetToPairMappingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetToPairMappings) > 0 {
		for iNdEx := len(m.AssetToPairMappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetToPairMappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetToPairMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetToPairMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetToPairMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetToPairMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetToPairMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetToPairMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetToPairMapping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBorrowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBorrowsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBorrowsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBorrowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBorrowsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBorrowsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Borrows) > 0 {
		for iNdEx := len(m.Borrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBorrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBorrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBorrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBorrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBorrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBorrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Borrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBorrowByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBorrowByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBorrowByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBorrowByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBorrowByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBorrowByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Borrows) > 0 {
		for iNdEx := len(m.Borrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBorrowByOwnerAndPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBorrowByOwnerAndPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBorrowByOwnerAndPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBorrowByOwnerAndPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBorrowByOwnerAndPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBorrowByOwnerAndPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Borrows) > 0 {
		for iNdEx := len(m.Borrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Borrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolAssetLBMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolAssetLBMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolAssetLBMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolAssetLBMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolAssetLBMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolAssetLBMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolAssetLBMapping.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReserveBuybackAssetDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveBuybackAssetDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveBuybackAssetDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveBuybackAssetDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveBuybackAssetDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveBuybackAssetDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReserveBuybackAssetData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuctionParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuctionParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLendsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLendsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lends) > 0 {
		for _, e := range m.Lends {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lend.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLendByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLendByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lends) > 0 {
		for _, e := range m.Lends {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLendByOwnerAndPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLendByOwnerAndPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lends) > 0 {
		for _, e := range m.Lends {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairs) > 0 {
		for _, e := range m.ExtendedPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExtendedPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAssetRatesParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetRatesParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetRatesParams) > 0 {
		for _, e := range m.AssetRatesParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetRatesParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryAssetRatesParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetRatesparams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAssetToPairMappingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetToPairMappingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetToPairMappings) > 0 {
		for _, e := range m.AssetToPairMappings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetToPairMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryAssetToPairMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetToPairMapping.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBorrowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBorrowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrows) > 0 {
		for _, e := range m.Borrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBorrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryBorrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Borrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBorrowByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBorrowByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrows) > 0 {
		for _, e := range m.Borrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBorrowByOwnerAndPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBorrowByOwnerAndPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Borrows) > 0 {
		for _, e := range m.Borrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolAssetLBMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolAssetLBMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolAssetLBMapping.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReserveBuybackAssetDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovQuery(uint64(m.AssetId))
	}
	return n
}

func (m *QueryReserveBuybackAssetDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReserveBuybackAssetData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuctionParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryAuctionParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuctionParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lends = append(m.Lends, LendAsset{})
			if err := m.Lends[len(m.Lends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLendByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLendByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLendByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLendByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLendByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLendByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lends = append(m.Lends, LendAsset{})
			if err := m.Lends[len(m.Lends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLendByOwnerAndPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLendByOwnerAndPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLendByOwnerAndPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLendByOwnerAndPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLendByOwnerAndPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLendByOwnerAndPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lends = append(m.Lends, LendAsset{})
			if err := m.Lends[len(m.Lends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairs = append(m.ExtendedPairs, Extended_Pair{})
			if err := m.ExtendedPairs[len(m.ExtendedPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendedPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetRatesParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRatesParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRatesParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetRatesParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRatesParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRatesParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetRatesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetRatesParams = append(m.AssetRatesParams, AssetRatesParams{})
			if err := m.AssetRatesParams[len(m.AssetRatesParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetRatesParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRatesParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRatesParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetRatesParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRatesParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRatesParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetRatesparams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetRatesparams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetToPairMappingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetToPairMappingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetToPairMappingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetToPairMappingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetToPairMappingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetToPairMappingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetToPairMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetToPairMappings = append(m.AssetToPairMappings, AssetToPairMapping{})
			if err := m.AssetToPairMappings[len(m.AssetToPairMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetToPairMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetToPairMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetToPairMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetToPairMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetToPairMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetToPairMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetToPairMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetToPairMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBorrowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBorrowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBorrowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBorrowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBorrowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBorrowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrows = append(m.Borrows, BorrowAsset{})
			if err := m.Borrows[len(m.Borrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBorrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBorrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBorrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBorrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBorrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBorrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Borrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBorrowByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBorrowByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrows = append(m.Borrows, BorrowAsset{})
			if err := m.Borrows[len(m.Borrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBorrowByOwnerAndPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerAndPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerAndPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBorrowByOwnerAndPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerAndPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBorrowByOwnerAndPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Borrows = append(m.Borrows, BorrowAsset{})
			if err := m.Borrows[len(m.Borrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolAssetLBMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolAssetLBMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolAssetLBMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolAssetLBMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolAssetLBMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolAssetLBMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAssetLBMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolAssetLBMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveBuybackAssetDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveBuybackAssetDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveBuybackAssetDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveBuybackAssetDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveBuybackAssetDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveBuybackAssetDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveBuybackAssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveBuybackAssetData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
