// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petri/lend/v1beta1/lend.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LendAssetOld struct {
	ID                  uint64                                  `protobuf:"varint,1,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	AssetID             uint64                                  `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	PoolID              uint64                                  `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Owner               string                                  `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	LendingTime         time.Time                               `protobuf:"bytes,6,opt,name=lending_time,json=lendingTime,proto3,stdtime" json:"lending_time" yaml:"lending_time"`
	UpdatedAmountIn     github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,7,opt,name=updated_amount_in,json=updatedAmountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"updated_amount_in" yaml:"updated_amount_in"`
	AvailableToBorrow   github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,8,opt,name=available_to_borrow,json=availableToBorrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_to_borrow" yaml:"available_to_borrow"`
	Reward_Accumulated  github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,9,opt,name=reward_Accumulated,json=rewardAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reward_Accumulated" yaml:"reward_accumulated"`
	AppID               uint64                                  `protobuf:"varint,10,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	GlobalIndex         github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,11,opt,name=global_index,json=globalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"global_index" yaml:"global_index"`
	LastInteractionTime time.Time                               `protobuf:"bytes,12,opt,name=last_interaction_time,json=lastInteractionTime,proto3,stdtime" json:"last_interaction_time" yaml:"last_interaction_time"`
	CPoolName           string                                  `protobuf:"bytes,13,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
}

func (m *LendAssetOld) Reset()         { *m = LendAssetOld{} }
func (m *LendAssetOld) String() string { return proto.CompactTextString(m) }
func (*LendAssetOld) ProtoMessage()    {}
func (*LendAssetOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{0}
}
func (m *LendAssetOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendAssetOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendAssetOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendAssetOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendAssetOld.Merge(m, src)
}
func (m *LendAssetOld) XXX_Size() int {
	return m.Size()
}
func (m *LendAssetOld) XXX_DiscardUnknown() {
	xxx_messageInfo_LendAssetOld.DiscardUnknown(m)
}

var xxx_messageInfo_LendAssetOld proto.InternalMessageInfo

func (m *LendAssetOld) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LendAssetOld) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *LendAssetOld) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *LendAssetOld) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LendAssetOld) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LendAssetOld) GetLendingTime() time.Time {
	if m != nil {
		return m.LendingTime
	}
	return time.Time{}
}

func (m *LendAssetOld) GetAppID() uint64 {
	if m != nil {
		return m.AppID
	}
	return 0
}

func (m *LendAssetOld) GetLastInteractionTime() time.Time {
	if m != nil {
		return m.LastInteractionTime
	}
	return time.Time{}
}

func (m *LendAssetOld) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

type BorrowAssetOld struct {
	ID                   uint64                                  `protobuf:"varint,1,opt,name=borrowing_id,json=borrowingId,proto3" json:"borrowing_id,omitempty" yaml:"borrowing_id"`
	LendingID            uint64                                  `protobuf:"varint,2,opt,name=lending_id,json=lendingId,proto3" json:"lending_id,omitempty" yaml:"lending_id"`
	IsStableBorrow       bool                                    `protobuf:"varint,3,opt,name=is_stable_borrow,json=isStableBorrow,proto3" json:"is_stable_borrow,omitempty" yaml:"is_stable_borrow"`
	PairID               uint64                                  `protobuf:"varint,4,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	AmountIn             github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in" yaml:"amount_in"`
	AmountOut            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_out" yaml:"amount_out"`
	BridgedAssetAmount   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=bridged_asset_amount,json=bridgedAssetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bridged_asset_amount" yaml:"bridged_asset_amount"`
	BorrowingTime        time.Time                               `protobuf:"bytes,8,opt,name=borrowing_time,json=borrowingTime,proto3,stdtime" json:"borrowing_time" yaml:"borrowing_time"`
	StableBorrowRate     github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,9,opt,name=stable_borrow_rate,json=stableBorrowRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stable_borrow_rate" yaml:"stable_borrow_rate"`
	UpdatedAmountOut     github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,10,opt,name=updated_amount_out,json=updatedAmountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"updated_amount_out" yaml:"updated_amount_out"`
	Interest_Accumulated github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,11,opt,name=interest_Accumulated,json=interestAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"interest_Accumulated" yaml:"interest_accumulated"`
	GlobalIndex          github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,12,opt,name=global_index,json=globalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"global_index" yaml:"global_index"`
	ReserveGlobalIndex   github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,13,opt,name=reserve_global_index,json=reserveGlobalIndex,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_global_index" yaml:"reserve_global_index"`
	LastInteractionTime  time.Time                               `protobuf:"bytes,14,opt,name=last_interaction_time,json=lastInteractionTime,proto3,stdtime" json:"last_interaction_time" yaml:"last_interaction_time"`
	CPoolName            string                                  `protobuf:"bytes,15,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
}

func (m *BorrowAssetOld) Reset()         { *m = BorrowAssetOld{} }
func (m *BorrowAssetOld) String() string { return proto.CompactTextString(m) }
func (*BorrowAssetOld) ProtoMessage()    {}
func (*BorrowAssetOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{1}
}
func (m *BorrowAssetOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowAssetOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowAssetOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowAssetOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowAssetOld.Merge(m, src)
}
func (m *BorrowAssetOld) XXX_Size() int {
	return m.Size()
}
func (m *BorrowAssetOld) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowAssetOld.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowAssetOld proto.InternalMessageInfo

func (m *BorrowAssetOld) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BorrowAssetOld) GetLendingID() uint64 {
	if m != nil {
		return m.LendingID
	}
	return 0
}

func (m *BorrowAssetOld) GetIsStableBorrow() bool {
	if m != nil {
		return m.IsStableBorrow
	}
	return false
}

func (m *BorrowAssetOld) GetPairID() uint64 {
	if m != nil {
		return m.PairID
	}
	return 0
}

func (m *BorrowAssetOld) GetAmountIn() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountIn
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAssetOld) GetAmountOut() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.AmountOut
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAssetOld) GetBridgedAssetAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.BridgedAssetAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *BorrowAssetOld) GetBorrowingTime() time.Time {
	if m != nil {
		return m.BorrowingTime
	}
	return time.Time{}
}

func (m *BorrowAssetOld) GetLastInteractionTime() time.Time {
	if m != nil {
		return m.LastInteractionTime
	}
	return time.Time{}
}

func (m *BorrowAssetOld) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

type PoolOld struct {
	PoolID               uint64                    `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	ModuleName           string                    `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty" yaml:"module_name"`
	MainAssetId          uint64                    `protobuf:"varint,3,opt,name=main_asset_id,json=mainAssetId,proto3" json:"main_asset_id,omitempty" yaml:"main_asset_id"`
	FirstBridgedAssetID  uint64                    `protobuf:"varint,4,opt,name=first_bridged_asset_id,json=firstBridgedAssetId,proto3" json:"first_bridged_asset_id,omitempty" yaml:"first_bridged_asset_id"`
	SecondBridgedAssetID uint64                    `protobuf:"varint,5,opt,name=second_bridged_asset_id,json=secondBridgedAssetId,proto3" json:"second_bridged_asset_id,omitempty" yaml:"second_bridged_asset_id"`
	CPoolName            string                    `protobuf:"bytes,6,opt,name=cpool_name,json=cpoolName,proto3" json:"cpool_name,omitempty" yaml:"cpool_name"`
	ReserveFunds         uint64                    `protobuf:"varint,7,opt,name=reserve_funds,json=reserveFunds,proto3" json:"reserve_funds,omitempty" yaml:"reserve_funds"`
	AssetData            []AssetDataPoolMappingOld `protobuf:"bytes,8,rep,name=asset_data,json=assetData,proto3" json:"asset_data" yaml:"asset_data"`
}

func (m *PoolOld) Reset()         { *m = PoolOld{} }
func (m *PoolOld) String() string { return proto.CompactTextString(m) }
func (*PoolOld) ProtoMessage()    {}
func (*PoolOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{2}
}
func (m *PoolOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolOld.Merge(m, src)
}
func (m *PoolOld) XXX_Size() int {
	return m.Size()
}
func (m *PoolOld) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolOld.DiscardUnknown(m)
}

var xxx_messageInfo_PoolOld proto.InternalMessageInfo

func (m *PoolOld) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *PoolOld) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *PoolOld) GetMainAssetId() uint64 {
	if m != nil {
		return m.MainAssetId
	}
	return 0
}

func (m *PoolOld) GetFirstBridgedAssetID() uint64 {
	if m != nil {
		return m.FirstBridgedAssetID
	}
	return 0
}

func (m *PoolOld) GetSecondBridgedAssetID() uint64 {
	if m != nil {
		return m.SecondBridgedAssetID
	}
	return 0
}

func (m *PoolOld) GetCPoolName() string {
	if m != nil {
		return m.CPoolName
	}
	return ""
}

func (m *PoolOld) GetReserveFunds() uint64 {
	if m != nil {
		return m.ReserveFunds
	}
	return 0
}

func (m *PoolOld) GetAssetData() []AssetDataPoolMappingOld {
	if m != nil {
		return m.AssetData
	}
	return nil
}

type AssetDataPoolMappingOld struct {
	AssetID   uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	IsBridged bool   `protobuf:"varint,2,opt,name=is_bridged,json=isBridged,proto3" json:"is_bridged,omitempty" yaml:"is_bridged"`
}

func (m *AssetDataPoolMappingOld) Reset()         { *m = AssetDataPoolMappingOld{} }
func (m *AssetDataPoolMappingOld) String() string { return proto.CompactTextString(m) }
func (*AssetDataPoolMappingOld) ProtoMessage()    {}
func (*AssetDataPoolMappingOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_b87bb4bef8334ddd, []int{3}
}
func (m *AssetDataPoolMappingOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetDataPoolMappingOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetDataPoolMappingOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetDataPoolMappingOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetDataPoolMappingOld.Merge(m, src)
}
func (m *AssetDataPoolMappingOld) XXX_Size() int {
	return m.Size()
}
func (m *AssetDataPoolMappingOld) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetDataPoolMappingOld.DiscardUnknown(m)
}

var xxx_messageInfo_AssetDataPoolMappingOld proto.InternalMessageInfo

func (m *AssetDataPoolMappingOld) GetAssetID() uint64 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *AssetDataPoolMappingOld) GetIsBridged() bool {
	if m != nil {
		return m.IsBridged
	}
	return false
}

func init() {
	proto.RegisterType((*LendAssetOld)(nil), "petri.lend.v1beta1.LendAssetOld")
	proto.RegisterType((*BorrowAssetOld)(nil), "petri.lend.v1beta1.BorrowAssetOld")
	proto.RegisterType((*PoolOld)(nil), "petri.lend.v1beta1.PoolOld")
	proto.RegisterType((*AssetDataPoolMappingOld)(nil), "petri.lend.v1beta1.AssetDataPoolMappingOld")
}

func init() { proto.RegisterFile("petri/lend/v1beta1/lend.proto", fileDescriptor_b87bb4bef8334ddd) }

var fileDescriptor_b87bb4bef8334ddd = []byte{
	// 1297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0xcf, 0xb6, 0x79, 0xb1, 0xc7, 0x4e, 0x9a, 0x8c, 0xdd, 0x7f, 0xdd, 0xa4, 0xf5, 0xe6, 0x3f,
	0x42, 0x6d, 0x0e, 0x74, 0xad, 0x16, 0x90, 0xa0, 0x12, 0x12, 0x71, 0xd3, 0x82, 0x69, 0xd3, 0xa2,
	0x69, 0x4f, 0x1c, 0x58, 0x8d, 0x3d, 0x13, 0x77, 0xc5, 0xee, 0xce, 0xb2, 0xbb, 0x4e, 0x5b, 0x40,
	0xc0, 0x19, 0x09, 0xa9, 0x77, 0x3e, 0x03, 0x47, 0xbe, 0x43, 0x8f, 0x3d, 0x22, 0x0e, 0x0b, 0xda,
	0x7e, 0x03, 0x1f, 0x39, 0xa1, 0x79, 0xd9, 0xb7, 0x38, 0xb4, 0x75, 0x10, 0x70, 0xb2, 0xe7, 0x79,
	0xf9, 0x3d, 0xcf, 0x3c, 0xf3, 0xdb, 0xdf, 0xec, 0x82, 0xee, 0x88, 0x7b, 0x94, 0x3d, 0xee, 0xb9,
	0xcc, 0xa7, 0xbd, 0xc3, 0xab, 0x43, 0x16, 0x93, 0xab, 0x72, 0x61, 0x05, 0x21, 0x8f, 0x39, 0x6c,
	0x29, 0xbf, 0x25, 0x4d, 0xda, 0xbf, 0xd9, 0x1e, 0xf3, 0x31, 0x97, 0xfe, 0x9e, 0xf8, 0xa7, 0x42,
	0x37, 0xcd, 0x31, 0xe7, 0x63, 0x97, 0xf5, 0xe4, 0x6a, 0x38, 0x39, 0xe8, 0xc5, 0x8e, 0xc7, 0xa2,
	0x98, 0x78, 0x81, 0x0e, 0xe8, 0x8e, 0x78, 0xe4, 0xf1, 0xa8, 0x37, 0x24, 0x11, 0xcb, 0x6b, 0x8d,
	0xb8, 0xe3, 0x2b, 0x3f, 0xfa, 0xa1, 0x0e, 0x9a, 0x77, 0x98, 0x4f, 0x77, 0xa3, 0x88, 0xc5, 0xf7,
	0x5c, 0x0a, 0xaf, 0x03, 0x20, 0xea, 0x3a, 0xfe, 0xd8, 0x76, 0x68, 0xc7, 0xd8, 0x36, 0x76, 0x16,
	0xfb, 0x5b, 0x69, 0x62, 0x9e, 0x1a, 0xec, 0x4d, 0x13, 0x73, 0xe3, 0x09, 0xf1, 0xdc, 0xeb, 0xa8,
	0x88, 0x40, 0xb8, 0xae, 0x17, 0x03, 0x0a, 0xdf, 0x03, 0x35, 0x22, 0x70, 0x44, 0xe6, 0x29, 0x99,
	0xd9, 0x4d, 0x13, 0x73, 0x45, 0x62, 0xcb, 0xf4, 0x33, 0x2a, 0x3d, 0x0b, 0x42, 0x78, 0x45, 0xfe,
	0x1d, 0x50, 0xf8, 0x0e, 0x58, 0x09, 0x38, 0x77, 0x45, 0xe6, 0x69, 0x99, 0x79, 0x21, 0x4d, 0xcc,
	0xe5, 0x4f, 0x38, 0x77, 0x65, 0xe2, 0x9a, 0x4a, 0xd4, 0x21, 0x08, 0x2f, 0x8b, 0x7f, 0x03, 0x0a,
	0x2f, 0x81, 0x25, 0xfe, 0xc8, 0x67, 0x61, 0x67, 0x71, 0xdb, 0xd8, 0xa9, 0xf7, 0xd7, 0xa7, 0x89,
	0xd9, 0x54, 0xa1, 0xd2, 0x8c, 0xb0, 0x72, 0xc3, 0xaf, 0x40, 0x9d, 0x78, 0x7c, 0xe2, 0xc7, 0xb6,
	0xe3, 0x77, 0x96, 0xb6, 0x8d, 0x9d, 0xc6, 0xb5, 0xf3, 0x96, 0x1a, 0x8d, 0x25, 0x46, 0x93, 0x8d,
	0xd9, 0xba, 0xc1, 0x1d, 0xbf, 0x7f, 0xe3, 0x59, 0x62, 0x2e, 0x4c, 0x13, 0x73, 0x5d, 0xb7, 0x9b,
	0x65, 0xa2, 0x3f, 0x12, 0xf3, 0xf2, 0xd8, 0x89, 0x1f, 0x4e, 0x86, 0xd6, 0x88, 0x7b, 0x3d, 0x3d,
	0x5b, 0xf5, 0x73, 0x25, 0xa2, 0x9f, 0xf7, 0xe2, 0x27, 0x01, 0x8b, 0x24, 0x08, 0xae, 0xa9, 0xb4,
	0x81, 0x0f, 0x3f, 0x03, 0xcd, 0x6c, 0x60, 0xe2, 0x78, 0x3a, 0xcb, 0xb2, 0xfe, 0xa6, 0xa5, 0xce,
	0xce, 0xca, 0xce, 0xce, 0x7a, 0x90, 0x9d, 0x5d, 0xdf, 0xd4, 0x0d, 0xb4, 0xaa, 0xe3, 0x16, 0xd9,
	0xe8, 0xe9, 0x6f, 0xa6, 0x81, 0x1b, 0xda, 0x24, 0x52, 0xe0, 0x21, 0xd8, 0x98, 0x04, 0x94, 0xc4,
	0x8c, 0xda, 0xc5, 0x26, 0x57, 0xe4, 0x40, 0x3e, 0x16, 0x40, 0xbf, 0x26, 0xe6, 0xa5, 0xd7, 0xe8,
	0x7a, 0xe0, 0xc7, 0xd3, 0xc4, 0xec, 0xa8, 0x92, 0x33, 0x80, 0x08, 0x9f, 0xd1, 0xb6, 0xdd, 0x6c,
	0x5f, 0x5f, 0x83, 0x16, 0x39, 0x24, 0x8e, 0x4b, 0x86, 0x2e, 0xb3, 0x63, 0x6e, 0x0f, 0x79, 0x18,
	0xf2, 0x47, 0x9d, 0x9a, 0xac, 0x7c, 0x67, 0xee, 0xca, 0x9b, 0x7a, 0xda, 0xb3, 0x90, 0x08, 0x6f,
	0xe4, 0xd6, 0x07, 0xbc, 0x2f, 0x6d, 0xf0, 0x4b, 0x00, 0x43, 0xf6, 0x88, 0x84, 0xd4, 0xde, 0x1d,
	0x8d, 0x26, 0xde, 0xc4, 0x15, 0xbd, 0x75, 0xea, 0xb2, 0xf8, 0xed, 0xb9, 0x8b, 0x9f, 0x57, 0xc5,
	0x35, 0x22, 0x29, 0x10, 0x11, 0xde, 0x50, 0xc6, 0x52, 0x15, 0x78, 0x15, 0x2c, 0x93, 0x20, 0x10,
	0x64, 0x05, 0x92, 0xac, 0x9b, 0x69, 0x62, 0x2e, 0xed, 0x06, 0x81, 0xe4, 0xea, 0xaa, 0xde, 0x87,
	0x0c, 0x40, 0x78, 0x89, 0x04, 0xc1, 0x80, 0xc2, 0x87, 0xa0, 0x39, 0x76, 0xf9, 0x90, 0xb8, 0xb6,
	0xe3, 0x53, 0xf6, 0xb8, 0xd3, 0x90, 0x8d, 0xde, 0x9c, 0xa3, 0xd1, 0x3d, 0x36, 0x2a, 0x28, 0x51,
	0xc6, 0x42, 0xb8, 0xa1, 0x96, 0x03, 0xb1, 0x82, 0x8f, 0xc1, 0x59, 0x97, 0x44, 0xe2, 0xcc, 0x62,
	0x16, 0x92, 0x51, 0xec, 0x70, 0x5f, 0xf1, 0xae, 0xf9, 0x4a, 0xde, 0xed, 0x68, 0xde, 0x5d, 0xd0,
	0xbc, 0x3b, 0x0e, 0x46, 0x11, 0xb0, 0x25, 0x7c, 0x83, 0xc2, 0x25, 0x89, 0xb8, 0x0b, 0xc0, 0x48,
	0x3e, 0xa2, 0x3e, 0xf1, 0x58, 0x67, 0x55, 0xee, 0x10, 0xa5, 0x89, 0x59, 0xbf, 0x21, 0x1e, 0xe4,
	0xbb, 0xc4, 0x63, 0x85, 0x84, 0x14, 0x81, 0x08, 0xd7, 0xe5, 0x42, 0xf8, 0xd1, 0xcf, 0x4d, 0xb0,
	0xa6, 0x0e, 0x38, 0x57, 0xa4, 0x0f, 0x40, 0x53, 0xd1, 0xa0, 0xa2, 0x49, 0x17, 0x73, 0x4d, 0xd2,
	0x13, 0x29, 0xc7, 0x20, 0xdc, 0xc8, 0x97, 0x03, 0x2a, 0xfa, 0x2a, 0x69, 0x9a, 0x52, 0x26, 0xd9,
	0xd7, 0x1d, 0x2d, 0x5d, 0xaf, 0x96, 0xb6, 0x9b, 0x60, 0xdd, 0x89, 0xec, 0x28, 0x96, 0xc4, 0xd4,
	0x44, 0x17, 0x42, 0x55, 0xeb, 0x6f, 0x4d, 0x13, 0xf3, 0x9c, 0xca, 0x3d, 0x1a, 0x81, 0xf0, 0x9a,
	0x13, 0xdd, 0x97, 0x16, 0x4d, 0x5a, 0x21, 0x73, 0xc4, 0x09, 0x45, 0x1b, 0x8b, 0x25, 0x99, 0x23,
	0x4e, 0x58, 0x91, 0x39, 0x15, 0x22, 0x64, 0x4e, 0x78, 0xe8, 0x7f, 0x2b, 0x5f, 0xdf, 0x00, 0xa0,
	0x21, 0xf8, 0x24, 0xd6, 0xe2, 0xf5, 0x92, 0xea, 0x7b, 0xba, 0xfa, 0x46, 0xa5, 0x3a, 0x9f, 0xc4,
	0x73, 0x95, 0xd7, 0xfb, 0xbd, 0x37, 0x89, 0xe1, 0x8f, 0x06, 0x68, 0x0f, 0x43, 0x87, 0x8e, 0x85,
	0x1c, 0xc9, 0x9b, 0x43, 0xf9, 0xa4, 0xc4, 0xbd, 0xb4, 0x95, 0xbb, 0xba, 0x95, 0x2d, 0xcd, 0x90,
	0x63, 0x40, 0xe6, 0x6a, 0x0a, 0x6a, 0x04, 0x49, 0x4d, 0x25, 0x83, 0x90, 0x82, 0xb5, 0x82, 0x79,
	0xf2, 0x31, 0xab, 0xbd, 0xf2, 0x31, 0xfb, 0xbf, 0xee, 0xeb, 0xec, 0x51, 0xe6, 0x16, 0xcf, 0xd7,
	0x6a, 0x6e, 0x94, 0x4f, 0xd6, 0x13, 0x00, 0x2b, 0xcc, 0xb2, 0x43, 0x12, 0xb3, 0x13, 0x88, 0x9d,
	0xd2, 0x10, 0x2d, 0x76, 0xb3, 0x88, 0x08, 0xaf, 0x47, 0x25, 0xba, 0x62, 0x12, 0xcb, 0xd2, 0x47,
	0x2e, 0x03, 0x41, 0x03, 0xf0, 0xf7, 0x74, 0x76, 0x16, 0x11, 0xe1, 0xf5, 0xca, 0xfd, 0x22, 0x4e,
	0xfe, 0x3b, 0x03, 0xb4, 0xa5, 0xfc, 0xb0, 0x28, 0xae, 0xa8, 0xbc, 0x12, 0xcf, 0xfd, 0xb9, 0xab,
	0x6b, 0x22, 0xe4, 0x98, 0x15, 0x9d, 0x6f, 0x65, 0xe6, 0xb2, 0xd2, 0x1f, 0x95, 0xed, 0xe6, 0x3f,
	0x26, 0xdb, 0xdf, 0x82, 0x76, 0xc8, 0x22, 0x16, 0x1e, 0x32, 0xbb, 0x52, 0x71, 0x75, 0xee, 0xbd,
	0xaa, 0x8a, 0x5b, 0xd9, 0x8d, 0x36, 0x8b, 0x89, 0x30, 0xd4, 0xe6, 0x0f, 0x5f, 0xe7, 0xde, 0x58,
	0xfb, 0x77, 0xef, 0x8d, 0x33, 0x27, 0xb9, 0x37, 0x7e, 0x5a, 0x02, 0x2b, 0x22, 0x58, 0x5c, 0x18,
	0xa5, 0x77, 0x49, 0x63, 0x8e, 0x77, 0xc9, 0x9b, 0xa0, 0xe1, 0x71, 0x3a, 0x71, 0x99, 0x6a, 0xe3,
	0x94, 0x6c, 0xe3, 0x8d, 0x34, 0x31, 0xc1, 0xbe, 0x34, 0xeb, 0x3e, 0xa0, 0x4a, 0x2f, 0x85, 0x22,
	0x0c, 0xbc, 0x3c, 0x02, 0xde, 0x06, 0xab, 0x1e, 0x71, 0x7c, 0x3b, 0x7f, 0x13, 0x56, 0xef, 0xb3,
	0x97, 0xd3, 0xc4, 0x6c, 0xec, 0x13, 0xc7, 0x57, 0x6f, 0xc3, 0x74, 0x9a, 0x98, 0x6d, 0x8d, 0x54,
	0x8e, 0x46, 0xb8, 0xe1, 0x15, 0x41, 0xd0, 0x03, 0xff, 0x3b, 0x70, 0xc2, 0x28, 0xb6, 0xab, 0xda,
	0x95, 0x5f, 0x1f, 0xef, 0xa6, 0x89, 0xd9, 0xba, 0x25, 0x22, 0xfa, 0x25, 0x69, 0x92, 0xdb, 0xbc,
	0xa8, 0xd0, 0x8f, 0x4f, 0x47, 0xb8, 0x75, 0x30, 0x93, 0x45, 0xe1, 0x17, 0xe0, 0x5c, 0xc4, 0x46,
	0xdc, 0xa7, 0xb3, 0xf5, 0x96, 0x64, 0xbd, 0xeb, 0x69, 0x62, 0xb6, 0xef, 0xcb, 0x90, 0x99, 0x82,
	0x5d, 0xad, 0x2a, 0xc7, 0x03, 0x20, 0xdc, 0x8e, 0x66, 0xf3, 0xe8, 0x91, 0xb3, 0x5f, 0x3e, 0xc1,
	0xd9, 0xc3, 0xf7, 0xc1, 0x6a, 0xc6, 0xf2, 0x83, 0x89, 0x4f, 0x23, 0x79, 0x31, 0x2c, 0xf6, 0x3b,
	0xc5, 0x88, 0x2b, 0x6e, 0x84, 0x9b, 0x7a, 0x7d, 0x4b, 0x2c, 0x61, 0x04, 0x80, 0x6a, 0x92, 0x92,
	0x98, 0x74, 0x6a, 0xdb, 0xa7, 0x77, 0x1a, 0xd7, 0xde, 0xb4, 0x8e, 0xf9, 0x06, 0xb3, 0x64, 0xcf,
	0x7b, 0x24, 0x26, 0xa2, 0xb5, 0x7d, 0x12, 0x04, 0x8e, 0x3f, 0xbe, 0xe7, 0xd2, 0xfe, 0x25, 0x41,
	0x7f, 0xd1, 0x73, 0x1e, 0x50, 0xba, 0xff, 0x72, 0x68, 0x84, 0xeb, 0x24, 0xf3, 0xa3, 0xef, 0x0d,
	0x70, 0xee, 0x2f, 0xe0, 0x2a, 0x9f, 0x51, 0xc6, 0x7c, 0x9f, 0x51, 0x6f, 0x03, 0xe0, 0x44, 0xd9,
	0xec, 0x25, 0x85, 0x6b, 0xfd, 0xb3, 0x45, 0x33, 0x85, 0x0f, 0xe1, 0xba, 0x13, 0xe9, 0xa3, 0xe8,
	0x7f, 0xf4, 0x2c, 0xed, 0x1a, 0xcf, 0xd3, 0xae, 0xf1, 0x7b, 0xda, 0x35, 0x9e, 0xbe, 0xe8, 0x2e,
	0x3c, 0x7f, 0xd1, 0x5d, 0xf8, 0xe5, 0x45, 0x77, 0xe1, 0x53, 0xab, 0x22, 0x37, 0x62, 0x22, 0x57,
	0xf8, 0xc1, 0x81, 0x33, 0x72, 0x88, 0xab, 0xd7, 0x3d, 0xfd, 0x1d, 0x2b, 0xa5, 0x67, 0xb8, 0x2c,
	0xc5, 0xe1, 0xad, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x09, 0x9b, 0xcf, 0xc1, 0xe3, 0x0e, 0x00,
	0x00,
}

func (m *LendAssetOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendAssetOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendAssetOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x6a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastInteractionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLend(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x62
	{
		size := m.GlobalIndex.Size()
		i -= size
		if _, err := m.GlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.AppID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AppID))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.Reward_Accumulated.Size()
		i -= size
		if _, err := m.Reward_Accumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.AvailableToBorrow.Size()
		i -= size
		if _, err := m.AvailableToBorrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.UpdatedAmountIn.Size()
		i -= size
		if _, err := m.UpdatedAmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LendingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLend(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLend(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowAssetOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowAssetOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowAssetOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x7a
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastInteractionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintLend(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x72
	{
		size := m.ReserveGlobalIndex.Size()
		i -= size
		if _, err := m.ReserveGlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.GlobalIndex.Size()
		i -= size
		if _, err := m.GlobalIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.Interest_Accumulated.Size()
		i -= size
		if _, err := m.Interest_Accumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.UpdatedAmountOut.Size()
		i -= size
		if _, err := m.UpdatedAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StableBorrowRate.Size()
		i -= size
		if _, err := m.StableBorrowRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BorrowingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintLend(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.BridgedAssetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.AmountOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.AmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.PairID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x20
	}
	if m.IsStableBorrow {
		i--
		if m.IsStableBorrow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LendingID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.LendingID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetData) > 0 {
		for iNdEx := len(m.AssetData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLend(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ReserveFunds != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.ReserveFunds))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CPoolName) > 0 {
		i -= len(m.CPoolName)
		copy(dAtA[i:], m.CPoolName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.CPoolName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SecondBridgedAssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.SecondBridgedAssetID))
		i--
		dAtA[i] = 0x28
	}
	if m.FirstBridgedAssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.FirstBridgedAssetID))
		i--
		dAtA[i] = 0x20
	}
	if m.MainAssetId != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.MainAssetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintLend(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetDataPoolMappingOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetDataPoolMappingOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetDataPoolMappingOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBridged {
		i--
		if m.IsBridged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AssetID != 0 {
		i = encodeVarintLend(dAtA, i, uint64(m.AssetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLend(dAtA []byte, offset int, v uint64) int {
	offset -= sovLend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LendAssetOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LendingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.UpdatedAmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AvailableToBorrow.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Reward_Accumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	if m.AppID != 0 {
		n += 1 + sovLend(uint64(m.AppID))
	}
	l = m.GlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	return n
}

func (m *BorrowAssetOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLend(uint64(m.ID))
	}
	if m.LendingID != 0 {
		n += 1 + sovLend(uint64(m.LendingID))
	}
	if m.IsStableBorrow {
		n += 2
	}
	if m.PairID != 0 {
		n += 1 + sovLend(uint64(m.PairID))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.BridgedAssetAmount.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BorrowingTime)
	n += 1 + l + sovLend(uint64(l))
	l = m.StableBorrowRate.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.UpdatedAmountOut.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.Interest_Accumulated.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.GlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = m.ReserveGlobalIndex.Size()
	n += 1 + l + sovLend(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastInteractionTime)
	n += 1 + l + sovLend(uint64(l))
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	return n
}

func (m *PoolOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovLend(uint64(m.PoolID))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.MainAssetId != 0 {
		n += 1 + sovLend(uint64(m.MainAssetId))
	}
	if m.FirstBridgedAssetID != 0 {
		n += 1 + sovLend(uint64(m.FirstBridgedAssetID))
	}
	if m.SecondBridgedAssetID != 0 {
		n += 1 + sovLend(uint64(m.SecondBridgedAssetID))
	}
	l = len(m.CPoolName)
	if l > 0 {
		n += 1 + l + sovLend(uint64(l))
	}
	if m.ReserveFunds != 0 {
		n += 1 + sovLend(uint64(m.ReserveFunds))
	}
	if len(m.AssetData) > 0 {
		for _, e := range m.AssetData {
			l = e.Size()
			n += 1 + l + sovLend(uint64(l))
		}
	}
	return n
}

func (m *AssetDataPoolMappingOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != 0 {
		n += 1 + sovLend(uint64(m.AssetID))
	}
	if m.IsBridged {
		n += 2
	}
	return n
}

func sovLend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLend(x uint64) (n int) {
	return sovLend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LendAssetOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendAssetOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendAssetOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LendingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableToBorrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward_Accumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward_Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInteractionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastInteractionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowAssetOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowAssetOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowAssetOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingID", wireType)
			}
			m.LendingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LendingID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStableBorrow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStableBorrow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgedAssetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgedAssetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BorrowingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableBorrowRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableBorrowRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpdatedAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest_Accumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest_Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveGlobalIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveGlobalIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInteractionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastInteractionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainAssetId", wireType)
			}
			m.MainAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstBridgedAssetID", wireType)
			}
			m.FirstBridgedAssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstBridgedAssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondBridgedAssetID", wireType)
			}
			m.SecondBridgedAssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondBridgedAssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFunds", wireType)
			}
			m.ReserveFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData, AssetDataPoolMappingOld{})
			if err := m.AssetData[len(m.AssetData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetDataPoolMappingOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetDataPoolMappingOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetDataPoolMappingOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			m.AssetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBridged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBridged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLend = fmt.Errorf("proto: unexpected end of group")
)
