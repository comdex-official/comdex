// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/rwa/v1beta1/profile.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KycStatus int32

const (
	KycUnverified KycStatus = 0
	KycInProgress KycStatus = 1
	KycRejected   KycStatus = 2
	KycApproved   KycStatus = 3
	KycReVerify   KycStatus = 4
)

var KycStatus_name = map[int32]string{
	0: "KYC_UNVERIFIED",
	1: "KYC_VERIFICATION_IN_PROGRESS",
	2: "KYC_VERIFICATION_REJECTED",
	3: "KYC_VERIFICATION_APPROVED",
	4: "KYC_VERIFICATION_RE_VERIFY",
}

var KycStatus_value = map[string]int32{
	"KYC_UNVERIFIED":               0,
	"KYC_VERIFICATION_IN_PROGRESS": 1,
	"KYC_VERIFICATION_REJECTED":    2,
	"KYC_VERIFICATION_APPROVED":    3,
	"KYC_VERIFICATION_RE_VERIFY":   4,
}

func (x KycStatus) String() string {
	return proto.EnumName(KycStatus_name, int32(x))
}

func (KycStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e2b468fd1515f59b, []int{0}
}

type RwaUser struct {
	AccountAddress   string    `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	Name             string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address          string    `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Jurisdiction     string    `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	Owner            string    `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	EmailId          string    `protobuf:"bytes,7,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty"`
	KycStatus        KycStatus `protobuf:"varint,8,opt,name=kyc_status,json=kycStatus,proto3,enum=comdex.rwa.v1beta1.KycStatus" json:"kyc_status,omitempty"`
	KycType          string    `protobuf:"bytes,9,opt,name=kyc_type,json=kycType,proto3" json:"kyc_type,omitempty"`
	CounterpartyList []uint64  `protobuf:"varint,10,rep,packed,name=counterparty_list,json=counterpartyList,proto3" json:"counterparty_list,omitempty"`
}

func (m *RwaUser) Reset()         { *m = RwaUser{} }
func (m *RwaUser) String() string { return proto.CompactTextString(m) }
func (*RwaUser) ProtoMessage()    {}
func (*RwaUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b468fd1515f59b, []int{0}
}
func (m *RwaUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RwaUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RwaUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RwaUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RwaUser.Merge(m, src)
}
func (m *RwaUser) XXX_Size() int {
	return m.Size()
}
func (m *RwaUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RwaUser.DiscardUnknown(m)
}

var xxx_messageInfo_RwaUser proto.InternalMessageInfo

type Counterparty struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Accepted bool   `protobuf:"varint,4,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *Counterparty) Reset()         { *m = Counterparty{} }
func (m *Counterparty) String() string { return proto.CompactTextString(m) }
func (*Counterparty) ProtoMessage()    {}
func (*Counterparty) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b468fd1515f59b, []int{1}
}
func (m *Counterparty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Counterparty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Counterparty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Counterparty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counterparty.Merge(m, src)
}
func (m *Counterparty) XXX_Size() int {
	return m.Size()
}
func (m *Counterparty) XXX_DiscardUnknown() {
	xxx_messageInfo_Counterparty.DiscardUnknown(m)
}

var xxx_messageInfo_Counterparty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("comdex.rwa.v1beta1.KycStatus", KycStatus_name, KycStatus_value)
	proto.RegisterType((*RwaUser)(nil), "comdex.rwa.v1beta1.RwaUser")
	proto.RegisterType((*Counterparty)(nil), "comdex.rwa.v1beta1.Counterparty")
}

func init() { proto.RegisterFile("comdex/rwa/v1beta1/profile.proto", fileDescriptor_e2b468fd1515f59b) }

var fileDescriptor_e2b468fd1515f59b = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0xd3, 0xb4, 0x4d, 0x96, 0xfe, 0xa4, 0xab, 0x0a, 0xb9, 0x11, 0x35, 0x51, 0x24, 0x44,
	0x05, 0x6a, 0xac, 0xd2, 0x1b, 0xe2, 0x92, 0xa6, 0x06, 0x99, 0xa0, 0x26, 0x72, 0x7f, 0xa4, 0x72,
	0xb1, 0xb6, 0xbb, 0x93, 0xb0, 0x6d, 0xe2, 0xb5, 0xd6, 0x9b, 0x04, 0x1f, 0xb8, 0xa3, 0x9e, 0x78,
	0x81, 0x9e, 0xb8, 0xf0, 0x0e, 0xbc, 0x40, 0x8f, 0x3d, 0x72, 0x42, 0x90, 0xbe, 0x01, 0x0f, 0x80,
	0x90, 0xd7, 0x69, 0x54, 0xd4, 0xde, 0xe6, 0xfb, 0x99, 0x59, 0xcd, 0xec, 0x0c, 0xaa, 0x50, 0xd1,
	0x67, 0xf0, 0xd1, 0x91, 0x23, 0xe2, 0x0c, 0xb7, 0x4e, 0x40, 0x91, 0x2d, 0x27, 0x92, 0xa2, 0xc3,
	0x7b, 0x50, 0x8b, 0xa4, 0x50, 0x02, 0xe3, 0xcc, 0x51, 0x93, 0x23, 0x52, 0x9b, 0x38, 0xca, 0xab,
	0x5d, 0xd1, 0x15, 0x5a, 0x76, 0xd2, 0x28, 0x73, 0x56, 0xbf, 0xe7, 0xd0, 0xbc, 0x3f, 0x22, 0x87,
	0x31, 0x48, 0xfc, 0x14, 0x2d, 0x13, 0x4a, 0xc5, 0x20, 0x54, 0x01, 0x61, 0x4c, 0x42, 0x1c, 0x5b,
	0x66, 0xc5, 0xdc, 0x28, 0xfa, 0x4b, 0x13, 0xba, 0x9e, 0xb1, 0x18, 0xa3, 0x7c, 0x48, 0xfa, 0x60,
	0xcd, 0x68, 0x55, 0xc7, 0xd8, 0x42, 0xf3, 0x37, 0x49, 0x79, 0x4d, 0xdf, 0x40, 0x5c, 0x45, 0x0b,
	0xa7, 0x03, 0xc9, 0x63, 0xc6, 0xa9, 0xe2, 0x22, 0xb4, 0x66, 0xb5, 0xfc, 0x1f, 0x87, 0x57, 0xd1,
	0xac, 0x18, 0x85, 0x20, 0xad, 0x39, 0x2d, 0x66, 0x00, 0xaf, 0xa1, 0x02, 0xf4, 0x09, 0xef, 0x05,
	0x9c, 0x59, 0xf3, 0x59, 0x51, 0x8d, 0x3d, 0x86, 0x5f, 0x21, 0x74, 0x96, 0xd0, 0x20, 0x56, 0x44,
	0x0d, 0x62, 0xab, 0x50, 0x31, 0x37, 0x96, 0x5e, 0xac, 0xd7, 0xee, 0xb6, 0x5d, 0x6b, 0x26, 0x74,
	0x5f, 0x9b, 0xfc, 0xe2, 0xd9, 0x4d, 0x98, 0x16, 0x4e, 0xb3, 0x55, 0x12, 0x81, 0x55, 0xcc, 0x0a,
	0x9f, 0x25, 0xf4, 0x20, 0x89, 0x00, 0x3f, 0x47, 0x2b, 0xba, 0x57, 0x90, 0x11, 0x91, 0x2a, 0x09,
	0x7a, 0x3c, 0x56, 0x16, 0xaa, 0xcc, 0x6c, 0xe4, 0xfd, 0xd2, 0x6d, 0xe1, 0x1d, 0x8f, 0x55, 0xf5,
	0x13, 0x5a, 0x68, 0xdc, 0xe2, 0xf0, 0x3a, 0xca, 0x71, 0xa6, 0x87, 0x96, 0xdf, 0x59, 0xfc, 0xf3,
	0xf3, 0x71, 0x31, 0x21, 0xfd, 0xde, 0xcb, 0x2a, 0x67, 0x55, 0x3f, 0xc7, 0x19, 0x7e, 0x88, 0xe6,
	0x62, 0x08, 0x19, 0x48, 0x2b, 0xa7, 0x1f, 0x9d, 0x20, 0x5c, 0x46, 0x05, 0x09, 0x14, 0xf8, 0x10,
	0xe4, 0x64, 0xa6, 0x53, 0x9c, 0x6a, 0x84, 0x52, 0x88, 0x14, 0x30, 0x3d, 0xd8, 0x82, 0x3f, 0xc5,
	0xcf, 0xfe, 0x9a, 0xa8, 0x38, 0xed, 0x0f, 0x3f, 0x41, 0x4b, 0xcd, 0xe3, 0x46, 0x70, 0xb8, 0x77,
	0xe4, 0xfa, 0xde, 0x6b, 0xcf, 0xdd, 0x2d, 0x19, 0xe5, 0x95, 0xf3, 0x8b, 0xca, 0x62, 0x33, 0xa1,
	0x87, 0xe1, 0x10, 0x24, 0xef, 0x70, 0x60, 0x78, 0x1b, 0x3d, 0x4a, 0x6d, 0x99, 0xa9, 0x51, 0x3f,
	0xf0, 0x5a, 0x7b, 0x81, 0xb7, 0x17, 0xb4, 0xfd, 0xd6, 0x1b, 0xdf, 0xdd, 0xdf, 0x2f, 0x99, 0xd3,
	0x24, 0x2f, 0x6c, 0x4b, 0xd1, 0xd5, 0x7f, 0x58, 0x43, 0x6b, 0x77, 0x92, 0x7c, 0xf7, 0xad, 0xdb,
	0x38, 0x70, 0x77, 0x4b, 0xb9, 0xf2, 0xf2, 0xf9, 0x45, 0xe5, 0x41, 0x33, 0xa1, 0x3e, 0x9c, 0x02,
	0x55, 0xc0, 0xee, 0xf5, 0xd7, 0xdb, 0x6d, 0xbf, 0x75, 0xe4, 0xee, 0x96, 0x66, 0xa6, 0xfe, 0x7a,
	0x14, 0x49, 0x31, 0x04, 0x86, 0x1d, 0x54, 0xbe, 0xa7, 0x7e, 0x86, 0x8f, 0x4b, 0xf9, 0x5b, 0x0f,
	0x1c, 0xa5, 0x7d, 0x24, 0xe5, 0xfc, 0xe7, 0xaf, 0xb6, 0xb1, 0xd3, 0xba, 0xfc, 0x6d, 0x1b, 0xdf,
	0xc6, 0xb6, 0x71, 0x39, 0xb6, 0xcd, 0xab, 0xb1, 0x6d, 0xfe, 0x1a, 0xdb, 0xe6, 0x97, 0x6b, 0xdb,
	0xb8, 0xba, 0xb6, 0x8d, 0x1f, 0xd7, 0xb6, 0xf1, 0x7e, 0xb3, 0xcb, 0xd5, 0x87, 0xc1, 0x49, 0xba,
	0x19, 0x4e, 0xb6, 0x1d, 0x9b, 0xa2, 0xd3, 0xe1, 0x94, 0x93, 0xde, 0x04, 0x3b, 0xd9, 0x21, 0xa5,
	0xbb, 0x10, 0x9f, 0xcc, 0xe9, 0xab, 0xd8, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xfb, 0x9e,
	0xb0, 0x63, 0x03, 0x00, 0x00,
}

func (m *RwaUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RwaUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RwaUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyList) > 0 {
		dAtA2 := make([]byte, len(m.CounterpartyList)*10)
		var j1 int
		for _, num := range m.CounterpartyList {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProfile(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x52
	}
	if len(m.KycType) > 0 {
		i -= len(m.KycType)
		copy(dAtA[i:], m.KycType)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.KycType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.KycStatus != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.KycStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EmailId) > 0 {
		i -= len(m.EmailId)
		copy(dAtA[i:], m.EmailId)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.EmailId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Jurisdiction) > 0 {
		i -= len(m.Jurisdiction)
		copy(dAtA[i:], m.Jurisdiction)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Jurisdiction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Counterparty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Counterparty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Counterparty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RwaUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Jurisdiction)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.EmailId)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	if m.KycStatus != 0 {
		n += 1 + sovProfile(uint64(m.KycStatus))
	}
	l = len(m.KycType)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	if len(m.CounterpartyList) > 0 {
		l = 0
		for _, e := range m.CounterpartyList {
			l += sovProfile(uint64(e))
		}
		n += 1 + sovProfile(uint64(l)) + l
	}
	return n
}

func (m *Counterparty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProfile(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	if m.Accepted {
		n += 2
	}
	return n
}

func sovProfile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RwaUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RwaUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RwaUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jurisdiction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jurisdiction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycStatus", wireType)
			}
			m.KycStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KycStatus |= KycStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KycType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProfile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CounterpartyList = append(m.CounterpartyList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProfile
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProfile
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProfile
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CounterpartyList) == 0 {
					m.CounterpartyList = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfile
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CounterpartyList = append(m.CounterpartyList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Counterparty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Counterparty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Counterparty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfile = fmt.Errorf("proto: unexpected end of group")
)
