// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/rwa/v1beta1/invoice.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceType int32

const (
	ServiceTypeUnspecified ServiceType = 0
	ServiceTypeGoods       ServiceType = 1
	ServiceTypeSERVICE     ServiceType = 2
)

var ServiceType_name = map[int32]string{
	0: "SERVICE_TYPE_UNSPECIFIED",
	1: "SERVICE_TYPE_GOODS",
	2: "SERVICE_TYPE_SERVICE",
}

var ServiceType_value = map[string]int32{
	"SERVICE_TYPE_UNSPECIFIED": 0,
	"SERVICE_TYPE_GOODS":       1,
	"SERVICE_TYPE_SERVICE":     2,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab85be152cb3ac0d, []int{0}
}

type Status int32

const (
	InvoiceStatusUnspecified   Status = 0
	InvoiceStatusRaised        Status = 1
	InvoiceStatusAccepted      Status = 2
	InvoiceStatusPaid          Status = 3
	InvoiceStatusPartiallyPaid Status = 4
	InvoiceStatusReVerify      Status = 5
)

var Status_name = map[int32]string{
	0: "INVOICE_STATUS_UNSPECIFIED",
	1: "INVOICE_STATUS_RAISED",
	2: "INVOICE_STATUS_ACCEPTED",
	3: "INVOICE_STATUS_PAID",
	4: "INVOICE_STATUS_PARTIALLY_PAID",
	5: "INVOICE_STATUS_RE_VERIFY",
}

var Status_value = map[string]int32{
	"INVOICE_STATUS_UNSPECIFIED":    0,
	"INVOICE_STATUS_RAISED":         1,
	"INVOICE_STATUS_ACCEPTED":       2,
	"INVOICE_STATUS_PAID":           3,
	"INVOICE_STATUS_PARTIALLY_PAID": 4,
	"INVOICE_STATUS_RE_VERIFY":      5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab85be152cb3ac0d, []int{1}
}

type Invoice struct {
	Id             uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From           string                                  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Receiver       string                                  `protobuf:"bytes,10,opt,name=receiver,proto3" json:"receiver,omitempty"`
	CounterpartyId uint64                                  `protobuf:"varint,3,opt,name=counterparty_id,json=counterpartyId,proto3" json:"counterparty_id,omitempty"`
	NftId          string                                  `protobuf:"bytes,4,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount" yaml:"amount"`
	Receivable     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=receivable,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"receivable" yaml:"receivable"`
	AmountPaid     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=amount_paid,json=amountPaid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_paid" yaml:"amount_paid"`
	ServiceType    ServiceType                             `protobuf:"varint,8,opt,name=service_type,json=serviceType,proto3,enum=comdex.rwa.v1beta1.ServiceType" json:"service_type,omitempty"`
	Status         Status                                  `protobuf:"varint,9,opt,name=status,proto3,enum=comdex.rwa.v1beta1.Status" json:"status,omitempty"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab85be152cb3ac0d, []int{0}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return m.Size()
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("comdex.rwa.v1beta1.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("comdex.rwa.v1beta1.Status", Status_name, Status_value)
	proto.RegisterType((*Invoice)(nil), "comdex.rwa.v1beta1.Invoice")
}

func init() { proto.RegisterFile("comdex/rwa/v1beta1/invoice.proto", fileDescriptor_ab85be152cb3ac0d) }

var fileDescriptor_ab85be152cb3ac0d = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0xed, 0x10, 0x02, 0x4c, 0x76, 0x59, 0x33, 0x10, 0x30, 0xd6, 0xae, 0x63, 0x71, 0x21,
	0x42, 0x8b, 0xbd, 0x64, 0xa5, 0xdd, 0xd5, 0x6a, 0x0f, 0x1b, 0x12, 0x83, 0x2c, 0x21, 0x12, 0x39,
	0x21, 0x12, 0x7b, 0x89, 0x1c, 0x7b, 0x9c, 0x1d, 0x35, 0xce, 0x58, 0xb6, 0x13, 0x9a, 0x53, 0xd5,
	0x5b, 0xe5, 0x53, 0xbf, 0x80, 0x4f, 0xbd, 0xf4, 0xd2, 0xef, 0xc1, 0x91, 0x63, 0x4f, 0xa8, 0x0d,
	0xfd, 0x04, 0x3d, 0xb6, 0x97, 0x2a, 0x1e, 0x17, 0x9c, 0x80, 0x84, 0x38, 0xc5, 0xcf, 0xf3, 0xff,
	0xbd, 0xff, 0xff, 0x59, 0x2f, 0x03, 0x24, 0x93, 0x38, 0x16, 0x7a, 0xae, 0x78, 0x17, 0x86, 0x32,
	0x3a, 0xe8, 0xa2, 0xc0, 0x38, 0x50, 0xf0, 0x60, 0x44, 0xb0, 0x89, 0x64, 0xd7, 0x23, 0x01, 0x81,
	0x90, 0x2a, 0x64, 0xef, 0xc2, 0x90, 0x13, 0x85, 0xb0, 0xd1, 0x23, 0x3d, 0x12, 0x1f, 0x2b, 0xd3,
	0x27, 0xaa, 0x14, 0x8a, 0x3d, 0x42, 0x7a, 0x7d, 0xa4, 0xc4, 0x55, 0x77, 0x68, 0x2b, 0x01, 0x76,
	0x90, 0x1f, 0x18, 0x8e, 0x9b, 0x08, 0x44, 0x93, 0xf8, 0x0e, 0xf1, 0x95, 0xae, 0xe1, 0xa3, 0x5b,
	0x37, 0x93, 0xe0, 0x01, 0x3d, 0xdf, 0xf9, 0x9a, 0x05, 0x4b, 0x1a, 0x35, 0x87, 0xab, 0x20, 0x83,
	0x2d, 0x9e, 0x95, 0xd8, 0x52, 0x56, 0xcf, 0x60, 0x0b, 0x42, 0x90, 0xb5, 0x3d, 0xe2, 0xf0, 0x19,
	0x89, 0x2d, 0xad, 0xe8, 0xf1, 0x33, 0x14, 0xc0, 0xb2, 0x87, 0x4c, 0x84, 0x47, 0xc8, 0xe3, 0x41,
	0xfc, 0xfe, 0xb6, 0x86, 0xbb, 0xe0, 0x27, 0x93, 0x0c, 0x07, 0x01, 0xf2, 0x5c, 0xc3, 0x0b, 0xc6,
	0x1d, 0x6c, 0xf1, 0x0b, 0x71, 0xb3, 0xd5, 0xf4, 0x6b, 0xcd, 0x82, 0x05, 0x90, 0x1b, 0xd8, 0xc1,
	0xf4, 0x3c, 0x1b, 0xb7, 0x58, 0x1c, 0xd8, 0x81, 0x66, 0x41, 0x1f, 0xe4, 0x0c, 0x67, 0xaa, 0xe4,
	0x17, 0x25, 0xb6, 0x94, 0x2f, 0x6f, 0xcb, 0x34, 0xbc, 0x3c, 0x0d, 0xff, 0xfd, 0x43, 0xc8, 0x55,
	0x82, 0x07, 0x87, 0xff, 0x5e, 0x5e, 0x17, 0x99, 0xcf, 0xd7, 0xc5, 0x1f, 0xc7, 0x86, 0xd3, 0xff,
	0x7b, 0x87, 0x62, 0x3b, 0x5f, 0xae, 0x8b, 0xbb, 0x3d, 0x1c, 0xfc, 0x3f, 0xec, 0xca, 0x26, 0x71,
	0x94, 0x64, 0x74, 0xfa, 0xb3, 0xef, 0x5b, 0xcf, 0x94, 0x60, 0xec, 0x22, 0x3f, 0xee, 0xa0, 0x27,
	0x56, 0xf0, 0x05, 0x00, 0x74, 0x00, 0xa3, 0xdb, 0x47, 0x7c, 0xee, 0x31, 0xe3, 0x5a, 0x62, 0xbc,
	0x46, 0x8d, 0xef, 0xd0, 0x27, 0x99, 0xa7, 0x2c, 0xe1, 0x4b, 0x16, 0xe4, 0x69, 0x96, 0x8e, 0x6b,
	0x60, 0x8b, 0x5f, 0x7a, 0x2c, 0x82, 0x9a, 0x44, 0x80, 0xe9, 0xd9, 0x63, 0xf6, 0x69, 0x19, 0x28,
	0xd8, 0x30, 0xb0, 0x05, 0x0f, 0xc1, 0x0f, 0x3e, 0xf2, 0x46, 0xd8, 0x44, 0x9d, 0xa9, 0x82, 0x5f,
	0x96, 0xd8, 0xd2, 0x6a, 0xb9, 0x28, 0xdf, 0xdf, 0x43, 0xb9, 0x49, 0x75, 0xad, 0xb1, 0x8b, 0xf4,
	0xbc, 0x7f, 0x57, 0xc0, 0x32, 0xc8, 0xf9, 0x81, 0x11, 0x0c, 0x7d, 0x7e, 0x25, 0xa6, 0x85, 0x07,
	0xe9, 0x58, 0xa1, 0x27, 0xca, 0xbd, 0x77, 0x2c, 0xc8, 0xa7, 0x1a, 0xc2, 0xbf, 0x00, 0xdf, 0x54,
	0xf5, 0xb6, 0x56, 0x55, 0x3b, 0xad, 0xf3, 0x86, 0xda, 0x39, 0x3b, 0x6d, 0x36, 0xd4, 0xaa, 0x76,
	0xa4, 0xa9, 0x35, 0x8e, 0x11, 0x84, 0x30, 0x92, 0x36, 0x53, 0xf2, 0xb3, 0x81, 0xef, 0x22, 0x13,
	0xdb, 0x18, 0x59, 0xf0, 0x57, 0x00, 0x67, 0xc8, 0xe3, 0x7a, 0xbd, 0xd6, 0xe4, 0x58, 0x61, 0x23,
	0x8c, 0x24, 0x2e, 0xc5, 0x1c, 0x13, 0x62, 0xf9, 0xf0, 0x37, 0xb0, 0x31, 0xa3, 0x4e, 0x0a, 0x2e,
	0x23, 0x6c, 0x86, 0x91, 0x04, 0x53, 0xfa, 0xe4, 0x44, 0xc8, 0xbe, 0x7a, 0x23, 0x32, 0x7b, 0x9f,
	0x32, 0x20, 0x47, 0x47, 0x80, 0xff, 0x00, 0x41, 0x3b, 0x6d, 0xd7, 0xa7, 0x2d, 0x9a, 0xad, 0x4a,
	0xeb, 0xac, 0x39, 0x17, 0xf6, 0xe7, 0x30, 0x92, 0xf8, 0xe4, 0x9f, 0x45, 0x91, 0x74, 0xdc, 0x32,
	0x28, 0xcc, 0xd1, 0x7a, 0x45, 0x6b, 0xaa, 0x35, 0x8e, 0x15, 0xb6, 0xc2, 0x48, 0x5a, 0x9f, 0x01,
	0x75, 0x03, 0xfb, 0xc8, 0x82, 0x7f, 0x80, 0xad, 0x39, 0xa6, 0x52, 0xad, 0xaa, 0x8d, 0x96, 0x5a,
	0xe3, 0x32, 0xc2, 0x76, 0x18, 0x49, 0x85, 0x19, 0xaa, 0x62, 0x9a, 0xc8, 0x0d, 0x90, 0x05, 0x65,
	0xb0, 0x3e, 0xc7, 0x35, 0x2a, 0x5a, 0x8d, 0x5b, 0x10, 0x0a, 0x61, 0x24, 0xad, 0xcd, 0x30, 0xf1,
	0x32, 0x54, 0xc0, 0x2f, 0xf7, 0xf4, 0x7a, 0x4b, 0xab, 0x9c, 0x9c, 0x9c, 0x53, 0x32, 0x2b, 0x88,
	0x61, 0x24, 0x09, 0x73, 0xa4, 0x17, 0x60, 0xa3, 0xdf, 0x1f, 0xc7, 0x2d, 0xfe, 0x04, 0xfc, 0xfc,
	0x78, 0x6a, 0xa7, 0xad, 0xea, 0xda, 0xd1, 0x39, 0xb7, 0xf8, 0x40, 0x56, 0x1d, 0xb5, 0x91, 0x87,
	0xed, 0x31, 0xfd, 0xcc, 0x87, 0xf5, 0xcb, 0x8f, 0x22, 0xf3, 0x76, 0x22, 0x32, 0x97, 0x13, 0x91,
	0xbd, 0x9a, 0x88, 0xec, 0x87, 0x89, 0xc8, 0xbe, 0xbe, 0x11, 0x99, 0xab, 0x1b, 0x91, 0x79, 0x7f,
	0x23, 0x32, 0xff, 0xed, 0xcf, 0x6c, 0xf9, 0x74, 0xcd, 0xf6, 0x89, 0x6d, 0x63, 0x13, 0x1b, 0xfd,
	0xa4, 0x56, 0xe8, 0x05, 0x1b, 0x2f, 0x7c, 0x37, 0x17, 0x5f, 0x76, 0xbf, 0x7f, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x58, 0xf7, 0x15, 0x78, 0x7b, 0x05, 0x00, 0x00,
}

func (m *Invoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintInvoice(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.ServiceType != 0 {
		i = encodeVarintInvoice(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.AmountPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Receivable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x22
	}
	if m.CounterpartyId != 0 {
		i = encodeVarintInvoice(dAtA, i, uint64(m.CounterpartyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintInvoice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInvoice(dAtA []byte, offset int, v uint64) int {
	offset -= sovInvoice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Invoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInvoice(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.CounterpartyId != 0 {
		n += 1 + sovInvoice(uint64(m.CounterpartyId))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovInvoice(uint64(l))
	l = m.Receivable.Size()
	n += 1 + l + sovInvoice(uint64(l))
	l = m.AmountPaid.Size()
	n += 1 + l + sovInvoice(uint64(l))
	if m.ServiceType != 0 {
		n += 1 + sovInvoice(uint64(m.ServiceType))
	}
	if m.Status != 0 {
		n += 1 + sovInvoice(uint64(m.Status))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	return n
}

func sovInvoice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInvoice(x uint64) (n int) {
	return sovInvoice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Invoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyId", wireType)
			}
			m.CounterpartyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterpartyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Receivable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvoice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInvoice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInvoice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInvoice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvoice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInvoice = fmt.Errorf("proto: unexpected end of group")
)
