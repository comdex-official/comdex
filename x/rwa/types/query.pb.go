// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/rwa/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RwaUserRequest struct {
	AccountAddress string             `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty" yaml:"account_address"`
	Pagination     *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *RwaUserRequest) Reset()         { *m = RwaUserRequest{} }
func (m *RwaUserRequest) String() string { return proto.CompactTextString(m) }
func (*RwaUserRequest) ProtoMessage()    {}
func (*RwaUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{0}
}
func (m *RwaUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RwaUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RwaUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RwaUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RwaUserRequest.Merge(m, src)
}
func (m *RwaUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *RwaUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RwaUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RwaUserRequest proto.InternalMessageInfo

type RwaUserResponse struct {
	RwaUser    *RwaUser            `protobuf:"bytes,1,opt,name=rwa_user,json=rwaUser,proto3" json:"rwa_user,omitempty" yaml:"rwa_user"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *RwaUserResponse) Reset()         { *m = RwaUserResponse{} }
func (m *RwaUserResponse) String() string { return proto.CompactTextString(m) }
func (*RwaUserResponse) ProtoMessage()    {}
func (*RwaUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{1}
}
func (m *RwaUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RwaUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RwaUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RwaUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RwaUserResponse.Merge(m, src)
}
func (m *RwaUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *RwaUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RwaUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RwaUserResponse proto.InternalMessageInfo

type CounterPartyRequest struct {
	Id         uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *CounterPartyRequest) Reset()         { *m = CounterPartyRequest{} }
func (m *CounterPartyRequest) String() string { return proto.CompactTextString(m) }
func (*CounterPartyRequest) ProtoMessage()    {}
func (*CounterPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{2}
}
func (m *CounterPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterPartyRequest.Merge(m, src)
}
func (m *CounterPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CounterPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CounterPartyRequest proto.InternalMessageInfo

type CounterPartyResponse struct {
	CounterParty *Counterparty       `protobuf:"bytes,1,opt,name=counter_party,json=counterParty,proto3" json:"counter_party,omitempty" yaml:"counter_party"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *CounterPartyResponse) Reset()         { *m = CounterPartyResponse{} }
func (m *CounterPartyResponse) String() string { return proto.CompactTextString(m) }
func (*CounterPartyResponse) ProtoMessage()    {}
func (*CounterPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{3}
}
func (m *CounterPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterPartyResponse.Merge(m, src)
}
func (m *CounterPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CounterPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CounterPartyResponse proto.InternalMessageInfo

type InvoiceRequest struct {
	Id         uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *InvoiceRequest) Reset()         { *m = InvoiceRequest{} }
func (m *InvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*InvoiceRequest) ProtoMessage()    {}
func (*InvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{4}
}
func (m *InvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceRequest.Merge(m, src)
}
func (m *InvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceRequest proto.InternalMessageInfo

type InvoiceSenderRequest struct {
	From       string             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *InvoiceSenderRequest) Reset()         { *m = InvoiceSenderRequest{} }
func (m *InvoiceSenderRequest) String() string { return proto.CompactTextString(m) }
func (*InvoiceSenderRequest) ProtoMessage()    {}
func (*InvoiceSenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{5}
}
func (m *InvoiceSenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceSenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceSenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceSenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceSenderRequest.Merge(m, src)
}
func (m *InvoiceSenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceSenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceSenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceSenderRequest proto.InternalMessageInfo

type InvoiceReceiverRequest struct {
	Receiver   string             `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty" yaml:"receiver"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *InvoiceReceiverRequest) Reset()         { *m = InvoiceReceiverRequest{} }
func (m *InvoiceReceiverRequest) String() string { return proto.CompactTextString(m) }
func (*InvoiceReceiverRequest) ProtoMessage()    {}
func (*InvoiceReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{6}
}
func (m *InvoiceReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceReceiverRequest.Merge(m, src)
}
func (m *InvoiceReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceReceiverRequest proto.InternalMessageInfo

type InvoiceResponse struct {
	Invoice    *Invoice            `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty" yaml:"invoice"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *InvoiceResponse) Reset()         { *m = InvoiceResponse{} }
func (m *InvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*InvoiceResponse) ProtoMessage()    {}
func (*InvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ee06e2e474883e7, []int{7}
}
func (m *InvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceResponse.Merge(m, src)
}
func (m *InvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RwaUserRequest)(nil), "comdex.rwa.v1beta1.RwaUserRequest")
	proto.RegisterType((*RwaUserResponse)(nil), "comdex.rwa.v1beta1.RwaUserResponse")
	proto.RegisterType((*CounterPartyRequest)(nil), "comdex.rwa.v1beta1.CounterPartyRequest")
	proto.RegisterType((*CounterPartyResponse)(nil), "comdex.rwa.v1beta1.CounterPartyResponse")
	proto.RegisterType((*InvoiceRequest)(nil), "comdex.rwa.v1beta1.InvoiceRequest")
	proto.RegisterType((*InvoiceSenderRequest)(nil), "comdex.rwa.v1beta1.InvoiceSenderRequest")
	proto.RegisterType((*InvoiceReceiverRequest)(nil), "comdex.rwa.v1beta1.InvoiceReceiverRequest")
	proto.RegisterType((*InvoiceResponse)(nil), "comdex.rwa.v1beta1.InvoiceResponse")
}

func init() { proto.RegisterFile("comdex/rwa/v1beta1/query.proto", fileDescriptor_5ee06e2e474883e7) }

var fileDescriptor_5ee06e2e474883e7 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0x33, 0x51, 0x7b, 0xdb, 0x4e, 0xdb, 0x44, 0x9d, 0xe6, 0x56, 0x55, 0xee, 0xbd, 0x4e,
	0x34, 0xbd, 0x6a, 0xa3, 0x4a, 0xb5, 0x69, 0x91, 0x58, 0xb0, 0x6b, 0xba, 0xaa, 0x58, 0x50, 0x8c,
	0xd8, 0x20, 0x41, 0x34, 0xb1, 0x27, 0x61, 0xa4, 0xc4, 0x93, 0x8e, 0x9d, 0x86, 0xa8, 0xca, 0x02,
	0x1e, 0x80, 0x0f, 0x55, 0x42, 0x82, 0x27, 0xe8, 0x03, 0xb0, 0x44, 0xac, 0xbb, 0xac, 0xc4, 0x02,
	0x56, 0x11, 0xa4, 0x88, 0x07, 0xc8, 0x13, 0x20, 0x7b, 0xc6, 0xf9, 0x28, 0xc6, 0xed, 0x26, 0x12,
	0xbb, 0xe8, 0x9c, 0x33, 0xe7, 0xff, 0xf3, 0x7f, 0x7c, 0x8e, 0x03, 0x35, 0x8b, 0xd7, 0x6d, 0xfa,
	0xd4, 0x10, 0x2d, 0x62, 0x1c, 0x6d, 0x97, 0xa9, 0x47, 0xb6, 0x8d, 0xc3, 0x26, 0x15, 0x6d, 0xbd,
	0x21, 0xb8, 0xc7, 0x11, 0x92, 0x79, 0x5d, 0xb4, 0x88, 0xae, 0xf2, 0xd9, 0x4c, 0x95, 0x57, 0x79,
	0x90, 0x36, 0xfc, 0x5f, 0xb2, 0x32, 0xfb, 0x6f, 0x95, 0xf3, 0x6a, 0x8d, 0x1a, 0xa4, 0xc1, 0x0c,
	0xe2, 0x38, 0xdc, 0x23, 0x1e, 0xe3, 0x8e, 0xab, 0xb2, 0x9b, 0x16, 0x77, 0xeb, 0xdc, 0x35, 0xca,
	0xc4, 0xa5, 0x52, 0x60, 0x20, 0xd7, 0x20, 0x55, 0xe6, 0x04, 0xc5, 0xaa, 0x36, 0x1f, 0xc1, 0xd4,
	0x10, 0xbc, 0xc2, 0x6a, 0x34, 0xa6, 0x82, 0x39, 0x47, 0x9c, 0x59, 0x61, 0x85, 0x36, 0xaa, 0x17,
	0x96, 0x58, 0x9c, 0x29, 0x0d, 0xfc, 0x1e, 0xc0, 0x94, 0xd9, 0x22, 0x0f, 0x5c, 0x2a, 0x4c, 0x7a,
	0xd8, 0xa4, 0xae, 0x87, 0xf6, 0x60, 0x9a, 0x58, 0x16, 0x6f, 0x3a, 0x5e, 0x89, 0xd8, 0xb6, 0xa0,
	0xae, 0xbb, 0x0a, 0xf2, 0xa0, 0x30, 0x57, 0xcc, 0xf6, 0xbb, 0xb9, 0x95, 0x36, 0xa9, 0xd7, 0x6e,
	0xe3, 0x4b, 0x05, 0xd8, 0x4c, 0xa9, 0xc8, 0xae, 0x0c, 0xa0, 0x47, 0x10, 0x0e, 0x9f, 0x67, 0x35,
	0x99, 0x07, 0x85, 0xf9, 0x9d, 0x75, 0x5d, 0xc2, 0xe8, 0x3e, 0x8c, 0x2e, 0xdd, 0x55, 0x48, 0xfa,
	0x01, 0xa9, 0x52, 0x05, 0x50, 0xfc, 0xbb, 0xdf, 0xcd, 0x2d, 0x49, 0x9d, 0x61, 0x0f, 0x6c, 0x8e,
	0x34, 0xc4, 0x1f, 0x01, 0x4c, 0x0f, 0xb0, 0xdd, 0x06, 0x77, 0x5c, 0x8a, 0xee, 0xc0, 0x59, 0xd1,
	0x22, 0xa5, 0xa6, 0x4b, 0x45, 0x00, 0x3c, 0xbf, 0xf3, 0x8f, 0xfe, 0xeb, 0xad, 0xe9, 0xea, 0x58,
	0x71, 0xb9, 0xdf, 0xcd, 0xa5, 0xa5, 0x4a, 0x78, 0x0c, 0x9b, 0x33, 0x42, 0x66, 0xd1, 0xe3, 0x08,
	0xfe, 0x8d, 0x2b, 0xf9, 0x25, 0xc9, 0x75, 0x1e, 0xe0, 0x04, 0xc0, 0xe5, 0x3d, 0xdf, 0x30, 0x2a,
	0x0e, 0x88, 0xf0, 0xda, 0xa1, 0xf9, 0xff, 0xc1, 0x24, 0xb3, 0x03, 0xfc, 0xa9, 0xe2, 0x62, 0xbf,
	0x9b, 0x9b, 0x93, 0x6d, 0x98, 0x8d, 0xcd, 0x24, 0xb3, 0x27, 0x6d, 0xeb, 0x67, 0x00, 0x33, 0xe3,
	0x54, 0xca, 0xdb, 0x12, 0x5c, 0xb4, 0x64, 0xbc, 0xd4, 0xf0, 0x13, 0xca, 0xe0, 0x7c, 0x94, 0xc1,
	0xaa, 0x41, 0x50, 0x57, 0x5c, 0xed, 0x77, 0x73, 0x19, 0x29, 0x3a, 0xd6, 0x00, 0x9b, 0x0b, 0xd6,
	0x88, 0xd0, 0xc4, 0xfd, 0x7e, 0x01, 0x60, 0x6a, 0x5f, 0x4e, 0xc6, 0x9f, 0x61, 0xf5, 0x3b, 0x00,
	0x33, 0x0a, 0xe8, 0x3e, 0x75, 0xec, 0xe1, 0xf8, 0xad, 0xc1, 0xa9, 0x8a, 0xe0, 0x75, 0x35, 0x73,
	0xe9, 0x7e, 0x37, 0x37, 0x2f, 0x3b, 0xf9, 0x51, 0x6c, 0x06, 0xc9, 0x49, 0xc3, 0x9d, 0x02, 0xb8,
	0x32, 0x70, 0xcb, 0xa2, 0xec, 0x68, 0x88, 0x67, 0xc0, 0x59, 0xa1, 0x42, 0x0a, 0x71, 0x74, 0x90,
	0x54, 0x06, 0x9b, 0x83, 0xa2, 0x49, 0xa3, 0x7e, 0x00, 0x30, 0x3d, 0x40, 0x55, 0x6f, 0xeb, 0x3e,
	0x9c, 0x51, 0x5b, 0x30, 0x6e, 0x11, 0xa8, 0x53, 0x45, 0xd4, 0xef, 0xe6, 0x52, 0xea, 0xee, 0x65,
	0x08, 0x9b, 0xe1, 0xf9, 0x49, 0xbf, 0x97, 0x3b, 0x3f, 0xa6, 0xe1, 0xf4, 0x3d, 0xbf, 0x03, 0x7a,
	0x09, 0xe0, 0x42, 0xf0, 0x4b, 0x2d, 0x28, 0x84, 0x63, 0xb6, 0x97, 0x32, 0x28, 0xbb, 0x16, 0x5b,
	0x23, 0x31, 0xf0, 0xad, 0xe7, 0x9f, 0xbe, 0x9f, 0x24, 0x6f, 0x20, 0xdd, 0x88, 0xf8, 0x5c, 0x84,
	0xbb, 0xcf, 0x38, 0xbe, 0xb4, 0xd3, 0x3b, 0xe8, 0x0d, 0x80, 0x4b, 0x01, 0xd1, 0xe8, 0x4a, 0x40,
	0x1b, 0x31, 0x33, 0x3f, 0xba, 0xca, 0xb2, 0x85, 0xab, 0x0b, 0x15, 0xa0, 0x1e, 0x00, 0x16, 0xd0,
	0x7a, 0x14, 0xe0, 0xd8, 0xda, 0x30, 0x8e, 0x99, 0xdd, 0x41, 0xcf, 0x42, 0xab, 0xd4, 0x15, 0x46,
	0x5b, 0x35, 0x3e, 0xee, 0xd1, 0x56, 0x5d, 0x7a, 0x73, 0x70, 0x21, 0x20, 0xc1, 0x28, 0x6f, 0xfc,
	0xfe, 0xcb, 0x2a, 0x19, 0x5e, 0x03, 0x98, 0x19, 0x65, 0xd8, 0x75, 0xe5, 0x18, 0xa3, 0x42, 0x8c,
	0xce, 0xd8, 0xa4, 0x5f, 0x8f, 0x68, 0x33, 0x20, 0xfa, 0x1f, 0xe1, 0x58, 0x22, 0x7f, 0x29, 0x74,
	0xd0, 0x5b, 0x00, 0x57, 0xc6, 0x99, 0xc2, 0xe9, 0x45, 0x9b, 0xb1, 0x5a, 0x63, 0x23, 0x7e, 0x3d,
	0xae, 0xd8, 0x3b, 0x1b, 0x70, 0x85, 0x5b, 0xa0, 0x53, 0xbc, 0x7b, 0xf6, 0x4d, 0x4b, 0x9c, 0xf6,
	0xb4, 0xc4, 0x59, 0x4f, 0x03, 0xe7, 0x3d, 0x0d, 0x7c, 0xed, 0x69, 0xe0, 0xd5, 0x85, 0x96, 0x38,
	0xbf, 0xd0, 0x12, 0x5f, 0x2e, 0xb4, 0xc4, 0xc3, 0xad, 0x2a, 0xf3, 0x9e, 0x34, 0xcb, 0xbe, 0xb8,
	0xea, 0xb9, 0xc5, 0x2b, 0x15, 0x66, 0x31, 0x52, 0x0b, 0x35, 0xa4, 0x8a, 0xd7, 0x6e, 0x50, 0xb7,
	0xfc, 0x57, 0xf0, 0x07, 0xe6, 0xe6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x0d, 0x49, 0xaa,
	0xba, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryRwaUser(ctx context.Context, in *RwaUserRequest, opts ...grpc.CallOption) (*RwaUserResponse, error)
	QueryCounterParty(ctx context.Context, in *CounterPartyRequest, opts ...grpc.CallOption) (*CounterPartyResponse, error)
	QueryInvoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	QueryInvoiceAsSender(ctx context.Context, in *InvoiceSenderRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	QueryInvoiceAsReceiver(ctx context.Context, in *InvoiceReceiverRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryRwaUser(ctx context.Context, in *RwaUserRequest, opts ...grpc.CallOption) (*RwaUserResponse, error) {
	out := new(RwaUserResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Query/QueryRwaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCounterParty(ctx context.Context, in *CounterPartyRequest, opts ...grpc.CallOption) (*CounterPartyResponse, error) {
	out := new(CounterPartyResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Query/QueryCounterParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryInvoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Query/QueryInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryInvoiceAsSender(ctx context.Context, in *InvoiceSenderRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Query/QueryInvoiceAsSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryInvoiceAsReceiver(ctx context.Context, in *InvoiceReceiverRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Query/QueryInvoiceAsReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryRwaUser(context.Context, *RwaUserRequest) (*RwaUserResponse, error)
	QueryCounterParty(context.Context, *CounterPartyRequest) (*CounterPartyResponse, error)
	QueryInvoice(context.Context, *InvoiceRequest) (*InvoiceResponse, error)
	QueryInvoiceAsSender(context.Context, *InvoiceSenderRequest) (*InvoiceResponse, error)
	QueryInvoiceAsReceiver(context.Context, *InvoiceReceiverRequest) (*InvoiceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryRwaUser(ctx context.Context, req *RwaUserRequest) (*RwaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRwaUser not implemented")
}
func (*UnimplementedQueryServer) QueryCounterParty(ctx context.Context, req *CounterPartyRequest) (*CounterPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCounterParty not implemented")
}
func (*UnimplementedQueryServer) QueryInvoice(ctx context.Context, req *InvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoice not implemented")
}
func (*UnimplementedQueryServer) QueryInvoiceAsSender(ctx context.Context, req *InvoiceSenderRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoiceAsSender not implemented")
}
func (*UnimplementedQueryServer) QueryInvoiceAsReceiver(ctx context.Context, req *InvoiceReceiverRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvoiceAsReceiver not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryRwaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RwaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRwaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Query/QueryRwaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRwaUser(ctx, req.(*RwaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCounterParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCounterParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Query/QueryCounterParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCounterParty(ctx, req.(*CounterPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Query/QueryInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryInvoice(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryInvoiceAsSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryInvoiceAsSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Query/QueryInvoiceAsSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryInvoiceAsSender(ctx, req.(*InvoiceSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryInvoiceAsReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryInvoiceAsReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Query/QueryInvoiceAsReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryInvoiceAsReceiver(ctx, req.(*InvoiceReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.rwa.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRwaUser",
			Handler:    _Query_QueryRwaUser_Handler,
		},
		{
			MethodName: "QueryCounterParty",
			Handler:    _Query_QueryCounterParty_Handler,
		},
		{
			MethodName: "QueryInvoice",
			Handler:    _Query_QueryInvoice_Handler,
		},
		{
			MethodName: "QueryInvoiceAsSender",
			Handler:    _Query_QueryInvoiceAsSender_Handler,
		},
		{
			MethodName: "QueryInvoiceAsReceiver",
			Handler:    _Query_QueryInvoiceAsReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/rwa/v1beta1/query.proto",
}

func (m *RwaUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RwaUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RwaUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RwaUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RwaUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RwaUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RwaUser != nil {
		{
			size, err := m.RwaUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CounterPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CounterPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CounterParty != nil {
		{
			size, err := m.CounterParty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceSenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceSenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceSenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Invoice != nil {
		{
			size, err := m.Invoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RwaUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RwaUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RwaUser != nil {
		l = m.RwaUser.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CounterPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CounterPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CounterParty != nil {
		l = m.CounterParty.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *InvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *InvoiceSenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *InvoiceReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *InvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Invoice != nil {
		l = m.Invoice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RwaUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RwaUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RwaUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RwaUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RwaUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RwaUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RwaUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RwaUser == nil {
				m.RwaUser = &RwaUser{}
			}
			if err := m.RwaUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CounterParty == nil {
				m.CounterParty = &Counterparty{}
			}
			if err := m.CounterParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceSenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceSenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceSenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoice == nil {
				m.Invoice = &Invoice{}
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
