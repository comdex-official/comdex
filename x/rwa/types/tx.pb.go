// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/rwa/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateRwaUserRequest struct {
	From         string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Owner        string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Jurisdiction string `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty" yaml:"jurisdiction"`
	EmailId      string `protobuf:"bytes,6,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty" yaml:"email_id"`
}

func (m *CreateRwaUserRequest) Reset()         { *m = CreateRwaUserRequest{} }
func (m *CreateRwaUserRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRwaUserRequest) ProtoMessage()    {}
func (*CreateRwaUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{0}
}
func (m *CreateRwaUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRwaUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRwaUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRwaUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRwaUserRequest.Merge(m, src)
}
func (m *CreateRwaUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRwaUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRwaUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRwaUserRequest proto.InternalMessageInfo

type CreateRwaUserResponse struct {
}

func (m *CreateRwaUserResponse) Reset()         { *m = CreateRwaUserResponse{} }
func (m *CreateRwaUserResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRwaUserResponse) ProtoMessage()    {}
func (*CreateRwaUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{1}
}
func (m *CreateRwaUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRwaUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRwaUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRwaUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRwaUserResponse.Merge(m, src)
}
func (m *CreateRwaUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateRwaUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRwaUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRwaUserResponse proto.InternalMessageInfo

type CreateCounterPartyRequest struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	SendTo string `protobuf:"bytes,2,opt,name=send_to,json=sendTo,proto3" json:"send_to,omitempty" yaml:"send_to"`
}

func (m *CreateCounterPartyRequest) Reset()         { *m = CreateCounterPartyRequest{} }
func (m *CreateCounterPartyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCounterPartyRequest) ProtoMessage()    {}
func (*CreateCounterPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{2}
}
func (m *CreateCounterPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCounterPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCounterPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCounterPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCounterPartyRequest.Merge(m, src)
}
func (m *CreateCounterPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCounterPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCounterPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCounterPartyRequest proto.InternalMessageInfo

type CreateCounterPartyResponse struct {
}

func (m *CreateCounterPartyResponse) Reset()         { *m = CreateCounterPartyResponse{} }
func (m *CreateCounterPartyResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCounterPartyResponse) ProtoMessage()    {}
func (*CreateCounterPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{3}
}
func (m *CreateCounterPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCounterPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCounterPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCounterPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCounterPartyResponse.Merge(m, src)
}
func (m *CreateCounterPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCounterPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCounterPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCounterPartyResponse proto.InternalMessageInfo

type UpdateCounterPartyRequest struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From     string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	SendTo   string `protobuf:"bytes,3,opt,name=send_to,json=sendTo,proto3" json:"send_to,omitempty" yaml:"send_to"`
	Accepted bool   `protobuf:"varint,4,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (m *UpdateCounterPartyRequest) Reset()         { *m = UpdateCounterPartyRequest{} }
func (m *UpdateCounterPartyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCounterPartyRequest) ProtoMessage()    {}
func (*UpdateCounterPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{4}
}
func (m *UpdateCounterPartyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCounterPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCounterPartyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCounterPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCounterPartyRequest.Merge(m, src)
}
func (m *UpdateCounterPartyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCounterPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCounterPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCounterPartyRequest proto.InternalMessageInfo

type UpdateCounterPartyResponse struct {
}

func (m *UpdateCounterPartyResponse) Reset()         { *m = UpdateCounterPartyResponse{} }
func (m *UpdateCounterPartyResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCounterPartyResponse) ProtoMessage()    {}
func (*UpdateCounterPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{5}
}
func (m *UpdateCounterPartyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCounterPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCounterPartyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCounterPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCounterPartyResponse.Merge(m, src)
}
func (m *UpdateCounterPartyResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCounterPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCounterPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCounterPartyResponse proto.InternalMessageInfo

type UpdateRwaUserRequest struct {
	From         string    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Address      string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Owner        string    `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Jurisdiction string    `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty" yaml:"jurisdiction"`
	EmailId      string    `protobuf:"bytes,6,opt,name=email_id,json=emailId,proto3" json:"email_id,omitempty" yaml:"email_id"`
	Kyc          KycStatus `protobuf:"varint,7,opt,name=kyc,proto3,enum=comdex.rwa.v1beta1.KycStatus" json:"kyc,omitempty"`
	KycType      string    `protobuf:"bytes,8,opt,name=kyc_type,json=kycType,proto3" json:"kyc_type,omitempty"`
}

func (m *UpdateRwaUserRequest) Reset()         { *m = UpdateRwaUserRequest{} }
func (m *UpdateRwaUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRwaUserRequest) ProtoMessage()    {}
func (*UpdateRwaUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{6}
}
func (m *UpdateRwaUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRwaUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRwaUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRwaUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRwaUserRequest.Merge(m, src)
}
func (m *UpdateRwaUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRwaUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRwaUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRwaUserRequest proto.InternalMessageInfo

type UpdateRwaUserResponse struct {
}

func (m *UpdateRwaUserResponse) Reset()         { *m = UpdateRwaUserResponse{} }
func (m *UpdateRwaUserResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRwaUserResponse) ProtoMessage()    {}
func (*UpdateRwaUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{7}
}
func (m *UpdateRwaUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRwaUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRwaUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRwaUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRwaUserResponse.Merge(m, src)
}
func (m *UpdateRwaUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRwaUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRwaUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRwaUserResponse proto.InternalMessageInfo

type UpdateKYCRequest struct {
	From    string    `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Kyc     KycStatus `protobuf:"varint,2,opt,name=kyc,proto3,enum=comdex.rwa.v1beta1.KycStatus" json:"kyc,omitempty"`
	KycType string    `protobuf:"bytes,3,opt,name=kyc_type,json=kycType,proto3" json:"kyc_type,omitempty"`
}

func (m *UpdateKYCRequest) Reset()         { *m = UpdateKYCRequest{} }
func (m *UpdateKYCRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateKYCRequest) ProtoMessage()    {}
func (*UpdateKYCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{8}
}
func (m *UpdateKYCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateKYCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateKYCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateKYCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKYCRequest.Merge(m, src)
}
func (m *UpdateKYCRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateKYCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKYCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKYCRequest proto.InternalMessageInfo

type UpdateKYCResponse struct {
}

func (m *UpdateKYCResponse) Reset()         { *m = UpdateKYCResponse{} }
func (m *UpdateKYCResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateKYCResponse) ProtoMessage()    {}
func (*UpdateKYCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{9}
}
func (m *UpdateKYCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateKYCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateKYCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateKYCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKYCResponse.Merge(m, src)
}
func (m *UpdateKYCResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateKYCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKYCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKYCResponse proto.InternalMessageInfo

type CreateInvoiceRequest struct {
	Id             uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From           string                                  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Receiver       string                                  `protobuf:"bytes,10,opt,name=receiver,proto3" json:"receiver,omitempty"`
	CounterpartyId uint64                                  `protobuf:"varint,3,opt,name=counterparty_id,json=counterpartyId,proto3" json:"counterparty_id,omitempty"`
	NftId          string                                  `protobuf:"bytes,4,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=amount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount" yaml:"amount"`
	Receivable     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=receivable,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"receivable" yaml:"receivable"`
	AmountPaid     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=amount_paid,json=amountPaid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_paid" yaml:"amount_paid"`
	ServiceType    ServiceType                             `protobuf:"varint,8,opt,name=service_type,json=serviceType,proto3,enum=comdex.rwa.v1beta1.ServiceType" json:"service_type,omitempty"`
	Status         Status                                  `protobuf:"varint,9,opt,name=status,proto3,enum=comdex.rwa.v1beta1.Status" json:"status,omitempty"`
}

func (m *CreateInvoiceRequest) Reset()         { *m = CreateInvoiceRequest{} }
func (m *CreateInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateInvoiceRequest) ProtoMessage()    {}
func (*CreateInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{10}
}
func (m *CreateInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateInvoiceRequest.Merge(m, src)
}
func (m *CreateInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateInvoiceRequest proto.InternalMessageInfo

type CreateInvoiceResponse struct {
}

func (m *CreateInvoiceResponse) Reset()         { *m = CreateInvoiceResponse{} }
func (m *CreateInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*CreateInvoiceResponse) ProtoMessage()    {}
func (*CreateInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cfc1a70bd2ff8382, []int{11}
}
func (m *CreateInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateInvoiceResponse.Merge(m, src)
}
func (m *CreateInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateInvoiceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateRwaUserRequest)(nil), "comdex.rwa.v1beta1.CreateRwaUserRequest")
	proto.RegisterType((*CreateRwaUserResponse)(nil), "comdex.rwa.v1beta1.CreateRwaUserResponse")
	proto.RegisterType((*CreateCounterPartyRequest)(nil), "comdex.rwa.v1beta1.CreateCounterPartyRequest")
	proto.RegisterType((*CreateCounterPartyResponse)(nil), "comdex.rwa.v1beta1.CreateCounterPartyResponse")
	proto.RegisterType((*UpdateCounterPartyRequest)(nil), "comdex.rwa.v1beta1.UpdateCounterPartyRequest")
	proto.RegisterType((*UpdateCounterPartyResponse)(nil), "comdex.rwa.v1beta1.UpdateCounterPartyResponse")
	proto.RegisterType((*UpdateRwaUserRequest)(nil), "comdex.rwa.v1beta1.UpdateRwaUserRequest")
	proto.RegisterType((*UpdateRwaUserResponse)(nil), "comdex.rwa.v1beta1.UpdateRwaUserResponse")
	proto.RegisterType((*UpdateKYCRequest)(nil), "comdex.rwa.v1beta1.UpdateKYCRequest")
	proto.RegisterType((*UpdateKYCResponse)(nil), "comdex.rwa.v1beta1.UpdateKYCResponse")
	proto.RegisterType((*CreateInvoiceRequest)(nil), "comdex.rwa.v1beta1.CreateInvoiceRequest")
	proto.RegisterType((*CreateInvoiceResponse)(nil), "comdex.rwa.v1beta1.CreateInvoiceResponse")
}

func init() { proto.RegisterFile("comdex/rwa/v1beta1/tx.proto", fileDescriptor_cfc1a70bd2ff8382) }

var fileDescriptor_cfc1a70bd2ff8382 = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x73, 0xe3, 0x44,
	0x14, 0xb6, 0xec, 0xf3, 0x8f, 0x7b, 0x09, 0x4e, 0x6e, 0x93, 0xcc, 0x29, 0x02, 0xa4, 0x8c, 0xf8,
	0x71, 0x61, 0x20, 0xd2, 0x9c, 0xe9, 0xa0, 0x61, 0x62, 0x28, 0x32, 0x99, 0x1b, 0x6e, 0x74, 0x77,
	0xc5, 0x41, 0x91, 0x59, 0x4b, 0x6b, 0xb3, 0xc4, 0xd6, 0x0a, 0xad, 0xec, 0x9c, 0x2b, 0x86, 0xa1,
	0xa1, 0x61, 0x86, 0x96, 0x9a, 0x86, 0x3f, 0x25, 0xe5, 0x95, 0x54, 0x1e, 0x48, 0xfe, 0x00, 0x66,
	0x5c, 0x52, 0x31, 0xfb, 0x23, 0xb6, 0x95, 0x93, 0x7d, 0x09, 0x35, 0x95, 0xa5, 0xfd, 0xbe, 0xb7,
	0xef, 0xdb, 0xb7, 0x9f, 0xdf, 0x13, 0xbc, 0x19, 0xb2, 0x41, 0x44, 0x5e, 0xf8, 0xe9, 0x19, 0xf6,
	0x47, 0x0f, 0x3b, 0x24, 0xc3, 0x0f, 0xfd, 0xec, 0x85, 0x97, 0xa4, 0x2c, 0x63, 0x08, 0x29, 0xd0,
	0x4b, 0xcf, 0xb0, 0xa7, 0x41, 0x6b, 0xbb, 0xc7, 0x7a, 0x4c, 0xc2, 0xbe, 0x78, 0x52, 0x4c, 0x6b,
	0xaf, 0x60, 0x1b, 0x1a, 0x8f, 0x18, 0x0d, 0xc9, 0x0a, 0x46, 0x92, 0xb2, 0x2e, 0xed, 0x5f, 0x31,
	0xec, 0x90, 0xf1, 0x01, 0xe3, 0x7e, 0x07, 0x73, 0x32, 0xa3, 0x84, 0x8c, 0xc6, 0x0a, 0x77, 0x7f,
	0x2b, 0xc3, 0x76, 0x3b, 0x25, 0x38, 0x23, 0xc1, 0x19, 0x7e, 0xc6, 0x49, 0x1a, 0x90, 0xef, 0x86,
	0x84, 0x67, 0xe8, 0x1d, 0xb8, 0xd3, 0x4d, 0xd9, 0xc0, 0x34, 0xf6, 0x8c, 0xfd, 0xbb, 0x87, 0x1b,
	0xd3, 0x89, 0xb3, 0x36, 0xc6, 0x83, 0xfe, 0x27, 0xae, 0x58, 0x75, 0x03, 0x09, 0x0a, 0x52, 0x8c,
	0x07, 0xc4, 0x2c, 0x5f, 0x27, 0x89, 0x55, 0x37, 0x90, 0x20, 0xfa, 0x08, 0xea, 0x38, 0x8a, 0x52,
	0xc2, 0xb9, 0x59, 0x91, 0x3c, 0x34, 0x9d, 0x38, 0x4d, 0xc5, 0xd3, 0x80, 0x1b, 0x5c, 0x51, 0xd0,
	0xfb, 0x50, 0x65, 0x67, 0x31, 0x49, 0xcd, 0x3b, 0x92, 0xbb, 0x39, 0x9d, 0x38, 0xeb, 0x8a, 0x2b,
	0x97, 0xdd, 0x40, 0xc1, 0xe8, 0x53, 0x58, 0xff, 0x76, 0x98, 0x52, 0x1e, 0xd1, 0x30, 0xa3, 0x2c,
	0x36, 0xab, 0x92, 0x7e, 0x7f, 0x3a, 0x71, 0xb6, 0x14, 0x7d, 0x11, 0x75, 0x83, 0x1c, 0x19, 0x79,
	0xd0, 0x20, 0x03, 0x4c, 0xfb, 0x27, 0x34, 0x32, 0x6b, 0x32, 0x70, 0x6b, 0x3a, 0x71, 0x36, 0x54,
	0xe0, 0x15, 0xe2, 0x06, 0x75, 0xf9, 0x78, 0x14, 0xb9, 0xf7, 0x61, 0xe7, 0x5a, 0x91, 0x78, 0xc2,
	0x62, 0x4e, 0xdc, 0x01, 0xec, 0x2a, 0xa0, 0xcd, 0x86, 0x71, 0x46, 0xd2, 0xc7, 0x38, 0xcd, 0xc6,
	0xb7, 0x2a, 0xe1, 0x87, 0x50, 0xe7, 0x24, 0x8e, 0x4e, 0x32, 0xa6, 0xab, 0xb8, 0x50, 0x1d, 0x0d,
	0xb8, 0x41, 0x4d, 0x3c, 0x3d, 0x65, 0xee, 0x5b, 0x60, 0x15, 0xa5, 0xd3, 0x62, 0x7e, 0x35, 0x60,
	0xf7, 0x59, 0x12, 0x2d, 0x51, 0xd3, 0x84, 0x32, 0x8d, 0xa4, 0x96, 0x3b, 0x41, 0x99, 0x46, 0x33,
	0x75, 0xe5, 0x1b, 0xaa, 0xab, 0xbc, 0x4e, 0x1d, 0xb2, 0xa0, 0x81, 0xc3, 0x90, 0x24, 0x19, 0x89,
	0xe4, 0xed, 0x35, 0x82, 0xd9, 0xbb, 0x50, 0x5e, 0x24, 0x4d, 0x2b, 0xff, 0xbb, 0x0c, 0xdb, 0x0a,
	0xfe, 0xdf, 0x85, 0x4b, 0x5d, 0x88, 0x7c, 0xa8, 0x9c, 0x8e, 0x43, 0xb3, 0xbe, 0x67, 0xec, 0x37,
	0x5b, 0x6f, 0x7b, 0xaf, 0xf6, 0x11, 0xef, 0x78, 0x1c, 0x3e, 0xc9, 0x70, 0x36, 0xe4, 0x81, 0x60,
	0xa2, 0x5d, 0x68, 0x9c, 0x8e, 0xc3, 0x93, 0x6c, 0x9c, 0x10, 0xb3, 0x21, 0x12, 0x04, 0xf5, 0xd3,
	0x71, 0xf8, 0x74, 0x9c, 0x10, 0xe1, 0xe8, 0x6b, 0x05, 0xd7, 0x57, 0xf1, 0xa3, 0x01, 0x9b, 0x0a,
	0x39, 0x7e, 0xde, 0xbe, 0xd5, 0x35, 0x68, 0x79, 0xe5, 0xff, 0x24, 0xaf, 0x92, 0x97, 0xb7, 0x05,
	0xf7, 0x16, 0x44, 0x68, 0x69, 0x3f, 0x55, 0xaf, 0x7a, 0xd5, 0x91, 0xea, 0x82, 0xcb, 0xac, 0x8d,
	0x16, 0xad, 0xad, 0xd5, 0x59, 0xd0, 0x48, 0x49, 0x48, 0xe8, 0x88, 0xa4, 0x26, 0xc8, 0xf5, 0xd9,
	0x3b, 0x7a, 0x00, 0x1b, 0xa1, 0xb2, 0x65, 0x22, 0x6c, 0x29, 0xee, 0xa3, 0x22, 0x37, 0x6b, 0x2e,
	0x2e, 0x1f, 0x45, 0x68, 0x07, 0x6a, 0x71, 0x37, 0x13, 0xb8, 0xf4, 0x45, 0x50, 0x8d, 0xbb, 0xd9,
	0x51, 0x84, 0x38, 0xd4, 0xf0, 0x40, 0x30, 0xe5, 0xfd, 0xaf, 0xb5, 0x76, 0x3d, 0xd5, 0x75, 0x3d,
	0xd1, 0x75, 0x67, 0xa7, 0x6f, 0x33, 0x1a, 0x1f, 0x7e, 0x76, 0x3e, 0x71, 0x4a, 0xd3, 0x89, 0xf3,
	0x86, 0x76, 0x9e, 0x0c, 0x73, 0xff, 0x99, 0x38, 0x0f, 0x7a, 0x34, 0xfb, 0x66, 0xd8, 0x11, 0x65,
	0xf3, 0x75, 0xcf, 0x56, 0x3f, 0x07, 0x3c, 0x3a, 0xf5, 0x45, 0x8d, 0xb8, 0xdc, 0x21, 0xd0, 0xa9,
	0xd0, 0xf7, 0x00, 0xea, 0x00, 0xb8, 0xd3, 0x27, 0xd2, 0x3f, 0x2b, 0x13, 0x7f, 0xae, 0x13, 0xdf,
	0x53, 0x89, 0xe7, 0xa1, 0xb7, 0x4a, 0xbe, 0x90, 0x12, 0xfd, 0x60, 0xc0, 0x9a, 0xd2, 0x72, 0x92,
	0x60, 0x1a, 0x49, 0x5f, 0xae, 0x94, 0xf0, 0x85, 0x96, 0x80, 0x16, 0xcf, 0x2e, 0x63, 0x6f, 0xa7,
	0x41, 0x05, 0x3e, 0xc6, 0x34, 0x42, 0x87, 0xb0, 0xce, 0x49, 0x3a, 0xa2, 0x21, 0x99, 0xbb, 0xbc,
	0xd9, 0x72, 0x8a, 0xcc, 0xf7, 0x44, 0xf1, 0x84, 0xbd, 0x82, 0x35, 0x3e, 0x7f, 0x41, 0x2d, 0xa8,
	0x71, 0xe9, 0x4a, 0xf3, 0xae, 0x8c, 0xb6, 0x0a, 0xa3, 0x95, 0x6f, 0x35, 0x73, 0x3e, 0x10, 0x66,
	0x4e, 0x54, 0x1e, 0x6d, 0xfd, 0x5c, 0x85, 0xca, 0x23, 0xde, 0x43, 0x3d, 0xd8, 0x7c, 0xc4, 0x7b,
	0xb9, 0xa1, 0x81, 0xf6, 0x8b, 0x36, 0x2e, 0x1a, 0xbe, 0xd6, 0x07, 0x37, 0x60, 0xaa, 0x84, 0x68,
	0x04, 0x3b, 0xb3, 0x44, 0x8b, 0xbd, 0x15, 0x1d, 0x2c, 0xdf, 0xa3, 0x60, 0x3c, 0x58, 0xde, 0x4d,
	0xe9, 0xb9, 0xbc, 0xaf, 0xf6, 0xf4, 0xe2, 0xbc, 0x4b, 0xc7, 0x52, 0x71, 0xde, 0xe5, 0xa3, 0x42,
	0x17, 0x36, 0xd7, 0xbb, 0x8a, 0x0b, 0x5b, 0x34, 0x4f, 0x8a, 0x0b, 0x5b, 0xd8, 0x08, 0xd1, 0xd7,
	0xb0, 0x3e, 0x4b, 0x74, 0xfc, 0xbc, 0x8d, 0xde, 0x5d, 0x1e, 0x3a, 0xef, 0x94, 0xd6, 0x7b, 0xaf,
	0x61, 0xe5, 0x4e, 0x91, 0xb3, 0xd0, 0x2a, 0x7b, 0xe4, 0xfb, 0xdd, 0x2a, 0x7b, 0x5c, 0xf3, 0xe3,
	0xe1, 0x97, 0xe7, 0x7f, 0xd9, 0xa5, 0xdf, 0x2f, 0xec, 0xd2, 0xf9, 0x85, 0x6d, 0xbc, 0xbc, 0xb0,
	0x8d, 0x3f, 0x2f, 0x6c, 0xe3, 0x97, 0x4b, 0xbb, 0xf4, 0xf2, 0xd2, 0x2e, 0xfd, 0x71, 0x69, 0x97,
	0xbe, 0x3a, 0xc8, 0xfd, 0xef, 0xc4, 0xb6, 0x07, 0xac, 0xdb, 0xa5, 0x21, 0xc5, 0x7d, 0xfd, 0xee,
	0xab, 0x0f, 0x4c, 0xf9, 0x17, 0xec, 0xd4, 0xe4, 0x77, 0xe3, 0xc7, 0xff, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xca, 0x52, 0xa0, 0xd7, 0xe4, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	MsgCreateRwaUser(ctx context.Context, in *CreateRwaUserRequest, opts ...grpc.CallOption) (*CreateRwaUserResponse, error)
	MsgCreateCounterParty(ctx context.Context, in *CreateCounterPartyRequest, opts ...grpc.CallOption) (*CreateCounterPartyResponse, error)
	MsgUpdateCounterParty(ctx context.Context, in *UpdateCounterPartyRequest, opts ...grpc.CallOption) (*UpdateCounterPartyResponse, error)
	MsgUpdateRwaUser(ctx context.Context, in *UpdateRwaUserRequest, opts ...grpc.CallOption) (*UpdateRwaUserResponse, error)
	MsgUpdateKYC(ctx context.Context, in *UpdateKYCRequest, opts ...grpc.CallOption) (*UpdateKYCResponse, error)
	MsgCreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MsgCreateRwaUser(ctx context.Context, in *CreateRwaUserRequest, opts ...grpc.CallOption) (*CreateRwaUserResponse, error) {
	out := new(CreateRwaUserResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgCreateRwaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgCreateCounterParty(ctx context.Context, in *CreateCounterPartyRequest, opts ...grpc.CallOption) (*CreateCounterPartyResponse, error) {
	out := new(CreateCounterPartyResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgCreateCounterParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgUpdateCounterParty(ctx context.Context, in *UpdateCounterPartyRequest, opts ...grpc.CallOption) (*UpdateCounterPartyResponse, error) {
	out := new(UpdateCounterPartyResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgUpdateCounterParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgUpdateRwaUser(ctx context.Context, in *UpdateRwaUserRequest, opts ...grpc.CallOption) (*UpdateRwaUserResponse, error) {
	out := new(UpdateRwaUserResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgUpdateRwaUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgUpdateKYC(ctx context.Context, in *UpdateKYCRequest, opts ...grpc.CallOption) (*UpdateKYCResponse, error) {
	out := new(UpdateKYCResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgUpdateKYC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgCreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/comdex.rwa.v1beta1.Msg/MsgCreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	MsgCreateRwaUser(context.Context, *CreateRwaUserRequest) (*CreateRwaUserResponse, error)
	MsgCreateCounterParty(context.Context, *CreateCounterPartyRequest) (*CreateCounterPartyResponse, error)
	MsgUpdateCounterParty(context.Context, *UpdateCounterPartyRequest) (*UpdateCounterPartyResponse, error)
	MsgUpdateRwaUser(context.Context, *UpdateRwaUserRequest) (*UpdateRwaUserResponse, error)
	MsgUpdateKYC(context.Context, *UpdateKYCRequest) (*UpdateKYCResponse, error)
	MsgCreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MsgCreateRwaUser(ctx context.Context, req *CreateRwaUserRequest) (*CreateRwaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCreateRwaUser not implemented")
}
func (*UnimplementedMsgServer) MsgCreateCounterParty(ctx context.Context, req *CreateCounterPartyRequest) (*CreateCounterPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCreateCounterParty not implemented")
}
func (*UnimplementedMsgServer) MsgUpdateCounterParty(ctx context.Context, req *UpdateCounterPartyRequest) (*UpdateCounterPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdateCounterParty not implemented")
}
func (*UnimplementedMsgServer) MsgUpdateRwaUser(ctx context.Context, req *UpdateRwaUserRequest) (*UpdateRwaUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdateRwaUser not implemented")
}
func (*UnimplementedMsgServer) MsgUpdateKYC(ctx context.Context, req *UpdateKYCRequest) (*UpdateKYCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdateKYC not implemented")
}
func (*UnimplementedMsgServer) MsgCreateInvoice(ctx context.Context, req *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCreateInvoice not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MsgCreateRwaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRwaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgCreateRwaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgCreateRwaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgCreateRwaUser(ctx, req.(*CreateRwaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgCreateCounterParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCounterPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgCreateCounterParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgCreateCounterParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgCreateCounterParty(ctx, req.(*CreateCounterPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgUpdateCounterParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCounterPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgUpdateCounterParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgUpdateCounterParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgUpdateCounterParty(ctx, req.(*UpdateCounterPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgUpdateRwaUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRwaUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgUpdateRwaUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgUpdateRwaUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgUpdateRwaUser(ctx, req.(*UpdateRwaUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgUpdateKYC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKYCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgUpdateKYC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgUpdateKYC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgUpdateKYC(ctx, req.(*UpdateKYCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgCreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgCreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.rwa.v1beta1.Msg/MsgCreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgCreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.rwa.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgCreateRwaUser",
			Handler:    _Msg_MsgCreateRwaUser_Handler,
		},
		{
			MethodName: "MsgCreateCounterParty",
			Handler:    _Msg_MsgCreateCounterParty_Handler,
		},
		{
			MethodName: "MsgUpdateCounterParty",
			Handler:    _Msg_MsgUpdateCounterParty_Handler,
		},
		{
			MethodName: "MsgUpdateRwaUser",
			Handler:    _Msg_MsgUpdateRwaUser_Handler,
		},
		{
			MethodName: "MsgUpdateKYC",
			Handler:    _Msg_MsgUpdateKYC_Handler,
		},
		{
			MethodName: "MsgCreateInvoice",
			Handler:    _Msg_MsgCreateInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/rwa/v1beta1/tx.proto",
}

func (m *CreateRwaUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRwaUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRwaUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmailId) > 0 {
		i -= len(m.EmailId)
		copy(dAtA[i:], m.EmailId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EmailId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Jurisdiction) > 0 {
		i -= len(m.Jurisdiction)
		copy(dAtA[i:], m.Jurisdiction)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Jurisdiction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRwaUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRwaUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRwaUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateCounterPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCounterPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCounterPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SendTo) > 0 {
		i -= len(m.SendTo)
		copy(dAtA[i:], m.SendTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SendTo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCounterPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCounterPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCounterPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateCounterPartyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCounterPartyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCounterPartyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.SendTo) > 0 {
		i -= len(m.SendTo)
		copy(dAtA[i:], m.SendTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SendTo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCounterPartyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCounterPartyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCounterPartyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateRwaUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRwaUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRwaUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KycType) > 0 {
		i -= len(m.KycType)
		copy(dAtA[i:], m.KycType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KycType)))
		i--
		dAtA[i] = 0x42
	}
	if m.Kyc != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Kyc))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EmailId) > 0 {
		i -= len(m.EmailId)
		copy(dAtA[i:], m.EmailId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EmailId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Jurisdiction) > 0 {
		i -= len(m.Jurisdiction)
		copy(dAtA[i:], m.Jurisdiction)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Jurisdiction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRwaUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRwaUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRwaUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateKYCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateKYCRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateKYCRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KycType) > 0 {
		i -= len(m.KycType)
		copy(dAtA[i:], m.KycType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KycType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Kyc != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Kyc))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateKYCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateKYCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateKYCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.ServiceType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ServiceType))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.AmountPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Receivable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x22
	}
	if m.CounterpartyId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CounterpartyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRwaUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Jurisdiction)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EmailId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreateRwaUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateCounterPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SendTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreateCounterPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateCounterPartyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SendTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Accepted {
		n += 2
	}
	return n
}

func (m *UpdateCounterPartyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateRwaUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Jurisdiction)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EmailId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Kyc != 0 {
		n += 1 + sovTx(uint64(m.Kyc))
	}
	l = len(m.KycType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UpdateRwaUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateKYCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Kyc != 0 {
		n += 1 + sovTx(uint64(m.Kyc))
	}
	l = len(m.KycType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UpdateKYCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CounterpartyId != 0 {
		n += 1 + sovTx(uint64(m.CounterpartyId))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Receivable.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.AmountPaid.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.ServiceType != 0 {
		n += 1 + sovTx(uint64(m.ServiceType))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *CreateInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRwaUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRwaUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRwaUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jurisdiction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jurisdiction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRwaUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRwaUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRwaUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCounterPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCounterPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCounterPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCounterPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCounterPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCounterPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCounterPartyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCounterPartyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCounterPartyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCounterPartyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCounterPartyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCounterPartyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRwaUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRwaUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRwaUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jurisdiction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jurisdiction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kyc", wireType)
			}
			m.Kyc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kyc |= KycStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KycType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRwaUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRwaUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRwaUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateKYCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateKYCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateKYCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kyc", wireType)
			}
			m.Kyc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kyc |= KycStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KycType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateKYCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateKYCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateKYCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyId", wireType)
			}
			m.CounterpartyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterpartyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receivable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Receivable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			m.ServiceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceType |= ServiceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
