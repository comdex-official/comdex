// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/gasless/v1beta1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryMessagesAndContractsRequest is a request type for the Query/MessagesAndContracts RPC method.
type QueryMessagesAndContractsRequest struct {
}

func (m *QueryMessagesAndContractsRequest) Reset()         { *m = QueryMessagesAndContractsRequest{} }
func (m *QueryMessagesAndContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessagesAndContractsRequest) ProtoMessage()    {}
func (*QueryMessagesAndContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{2}
}
func (m *QueryMessagesAndContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagesAndContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagesAndContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagesAndContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagesAndContractsRequest.Merge(m, src)
}
func (m *QueryMessagesAndContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagesAndContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagesAndContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagesAndContractsRequest proto.InternalMessageInfo

type ContractDetails struct {
	CodeId  uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Lable   string `protobuf:"bytes,3,opt,name=lable,proto3" json:"lable,omitempty"`
}

func (m *ContractDetails) Reset()         { *m = ContractDetails{} }
func (m *ContractDetails) String() string { return proto.CompactTextString(m) }
func (*ContractDetails) ProtoMessage()    {}
func (*ContractDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{3}
}
func (m *ContractDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractDetails.Merge(m, src)
}
func (m *ContractDetails) XXX_Size() int {
	return m.Size()
}
func (m *ContractDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ContractDetails proto.InternalMessageInfo

func (m *ContractDetails) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *ContractDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContractDetails) GetLable() string {
	if m != nil {
		return m.Lable
	}
	return ""
}

// QueryMessagesAndContractsResponse is a response type for the Query/MessagesAndContracts RPC method.
type QueryMessagesAndContractsResponse struct {
	Messages  []string           `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Contracts []*ContractDetails `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (m *QueryMessagesAndContractsResponse) Reset()         { *m = QueryMessagesAndContractsResponse{} }
func (m *QueryMessagesAndContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessagesAndContractsResponse) ProtoMessage()    {}
func (*QueryMessagesAndContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{4}
}
func (m *QueryMessagesAndContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagesAndContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagesAndContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagesAndContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagesAndContractsResponse.Merge(m, src)
}
func (m *QueryMessagesAndContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagesAndContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagesAndContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagesAndContractsResponse proto.InternalMessageInfo

func (m *QueryMessagesAndContractsResponse) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *QueryMessagesAndContractsResponse) GetContracts() []*ContractDetails {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type GasProviderResponse struct {
	Id                     uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string                `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	GasTankAddress         string                `protobuf:"bytes,3,opt,name=gas_tank_address,json=gasTankAddress,proto3" json:"gas_tank_address,omitempty"`
	GasTankBalances        []types.Coin          `protobuf:"bytes,4,rep,name=gas_tank_balances,json=gasTankBalances,proto3" json:"gas_tank_balances"`
	IsActive               bool                  `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MaxTxsCountPerConsumer uint64                `protobuf:"varint,6,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	MaxFeeUsagePerTx       cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	TxsAllowed             []string              `protobuf:"bytes,9,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	ContractsAllowed       []string              `protobuf:"bytes,10,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
	AuthorizedActors       []string              `protobuf:"bytes,11,rep,name=authorized_actors,json=authorizedActors,proto3" json:"authorized_actors,omitempty"`
	FeeDenom               string                `protobuf:"bytes,12,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
}

func (m *GasProviderResponse) Reset()         { *m = GasProviderResponse{} }
func (m *GasProviderResponse) String() string { return proto.CompactTextString(m) }
func (*GasProviderResponse) ProtoMessage()    {}
func (*GasProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{5}
}
func (m *GasProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasProviderResponse.Merge(m, src)
}
func (m *GasProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *GasProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GasProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GasProviderResponse proto.InternalMessageInfo

func (m *GasProviderResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GasProviderResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GasProviderResponse) GetGasTankAddress() string {
	if m != nil {
		return m.GasTankAddress
	}
	return ""
}

func (m *GasProviderResponse) GetGasTankBalances() []types.Coin {
	if m != nil {
		return m.GasTankBalances
	}
	return nil
}

func (m *GasProviderResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GasProviderResponse) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *GasProviderResponse) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *GasProviderResponse) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

func (m *GasProviderResponse) GetAuthorizedActors() []string {
	if m != nil {
		return m.AuthorizedActors
	}
	return nil
}

func (m *GasProviderResponse) GetFeeDenom() string {
	if m != nil {
		return m.FeeDenom
	}
	return ""
}

// QueryGasProviderRequest is a request type for the Query/GasProvider RPC method.
type QueryGasProviderRequest struct {
	GasProviderId uint64 `protobuf:"varint,1,opt,name=gas_provider_id,json=gasProviderId,proto3" json:"gas_provider_id,omitempty"`
}

func (m *QueryGasProviderRequest) Reset()         { *m = QueryGasProviderRequest{} }
func (m *QueryGasProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasProviderRequest) ProtoMessage()    {}
func (*QueryGasProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{6}
}
func (m *QueryGasProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasProviderRequest.Merge(m, src)
}
func (m *QueryGasProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasProviderRequest proto.InternalMessageInfo

func (m *QueryGasProviderRequest) GetGasProviderId() uint64 {
	if m != nil {
		return m.GasProviderId
	}
	return 0
}

// QueryGasProviderResponse is a response type for the Query/GasProvider RPC method.
type QueryGasProviderResponse struct {
	GasProvider GasProviderResponse `protobuf:"bytes,1,opt,name=gas_provider,json=gasProvider,proto3" json:"gas_provider"`
}

func (m *QueryGasProviderResponse) Reset()         { *m = QueryGasProviderResponse{} }
func (m *QueryGasProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasProviderResponse) ProtoMessage()    {}
func (*QueryGasProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{7}
}
func (m *QueryGasProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasProviderResponse.Merge(m, src)
}
func (m *QueryGasProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasProviderResponse proto.InternalMessageInfo

func (m *QueryGasProviderResponse) GetGasProvider() GasProviderResponse {
	if m != nil {
		return m.GasProvider
	}
	return GasProviderResponse{}
}

// QueryGasProvidersRequest is a request type for the Query/GasProviders RPC method.
type QueryGasProvidersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasProvidersRequest) Reset()         { *m = QueryGasProvidersRequest{} }
func (m *QueryGasProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasProvidersRequest) ProtoMessage()    {}
func (*QueryGasProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{8}
}
func (m *QueryGasProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasProvidersRequest.Merge(m, src)
}
func (m *QueryGasProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasProvidersRequest proto.InternalMessageInfo

func (m *QueryGasProvidersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasProvidersResponse is a response type for the Query/GasProviders RPC method.
type QueryGasProvidersResponse struct {
	GasProviders []GasProviderResponse `protobuf:"bytes,1,rep,name=gas_providers,json=gasProviders,proto3" json:"gas_providers"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasProvidersResponse) Reset()         { *m = QueryGasProvidersResponse{} }
func (m *QueryGasProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasProvidersResponse) ProtoMessage()    {}
func (*QueryGasProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{9}
}
func (m *QueryGasProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasProvidersResponse.Merge(m, src)
}
func (m *QueryGasProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasProvidersResponse proto.InternalMessageInfo

func (m *QueryGasProvidersResponse) GetGasProviders() []GasProviderResponse {
	if m != nil {
		return m.GasProviders
	}
	return nil
}

func (m *QueryGasProvidersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasConsumerRequest is a request type for the Query/GasConsumer RPC method.
type QueryGasConsumerRequest struct {
	Consumer string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (m *QueryGasConsumerRequest) Reset()         { *m = QueryGasConsumerRequest{} }
func (m *QueryGasConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumerRequest) ProtoMessage()    {}
func (*QueryGasConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{10}
}
func (m *QueryGasConsumerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumerRequest.Merge(m, src)
}
func (m *QueryGasConsumerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumerRequest proto.InternalMessageInfo

func (m *QueryGasConsumerRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

// QueryGasConsumerResponse is a response type for the Query/GasConsumer RPC method.
type QueryGasConsumerResponse struct {
	GasConsumer GasConsumer `protobuf:"bytes,1,opt,name=gas_consumer,json=gasConsumer,proto3" json:"gas_consumer"`
}

func (m *QueryGasConsumerResponse) Reset()         { *m = QueryGasConsumerResponse{} }
func (m *QueryGasConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumerResponse) ProtoMessage()    {}
func (*QueryGasConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{11}
}
func (m *QueryGasConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumerResponse.Merge(m, src)
}
func (m *QueryGasConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumerResponse proto.InternalMessageInfo

func (m *QueryGasConsumerResponse) GetGasConsumer() GasConsumer {
	if m != nil {
		return m.GasConsumer
	}
	return GasConsumer{}
}

// QueryGasConsumersRequest is a request type for the Query/GasConsumers RPC method.
type QueryGasConsumersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasConsumersRequest) Reset()         { *m = QueryGasConsumersRequest{} }
func (m *QueryGasConsumersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersRequest) ProtoMessage()    {}
func (*QueryGasConsumersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{12}
}
func (m *QueryGasConsumersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersRequest.Merge(m, src)
}
func (m *QueryGasConsumersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersRequest proto.InternalMessageInfo

func (m *QueryGasConsumersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasConsumersResponse is a response type for the Query/GasConsumers RPC method.
type QueryGasConsumersResponse struct {
	GasConsumers []GasConsumer       `protobuf:"bytes,1,rep,name=gas_consumers,json=gasConsumers,proto3" json:"gas_consumers"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasConsumersResponse) Reset()         { *m = QueryGasConsumersResponse{} }
func (m *QueryGasConsumersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersResponse) ProtoMessage()    {}
func (*QueryGasConsumersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{13}
}
func (m *QueryGasConsumersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersResponse.Merge(m, src)
}
func (m *QueryGasConsumersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersResponse proto.InternalMessageInfo

func (m *QueryGasConsumersResponse) GetGasConsumers() []GasConsumer {
	if m != nil {
		return m.GasConsumers
	}
	return nil
}

func (m *QueryGasConsumersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.gasless.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.gasless.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryMessagesAndContractsRequest)(nil), "comdex.gasless.v1beta1.QueryMessagesAndContractsRequest")
	proto.RegisterType((*ContractDetails)(nil), "comdex.gasless.v1beta1.ContractDetails")
	proto.RegisterType((*QueryMessagesAndContractsResponse)(nil), "comdex.gasless.v1beta1.QueryMessagesAndContractsResponse")
	proto.RegisterType((*GasProviderResponse)(nil), "comdex.gasless.v1beta1.GasProviderResponse")
	proto.RegisterType((*QueryGasProviderRequest)(nil), "comdex.gasless.v1beta1.QueryGasProviderRequest")
	proto.RegisterType((*QueryGasProviderResponse)(nil), "comdex.gasless.v1beta1.QueryGasProviderResponse")
	proto.RegisterType((*QueryGasProvidersRequest)(nil), "comdex.gasless.v1beta1.QueryGasProvidersRequest")
	proto.RegisterType((*QueryGasProvidersResponse)(nil), "comdex.gasless.v1beta1.QueryGasProvidersResponse")
	proto.RegisterType((*QueryGasConsumerRequest)(nil), "comdex.gasless.v1beta1.QueryGasConsumerRequest")
	proto.RegisterType((*QueryGasConsumerResponse)(nil), "comdex.gasless.v1beta1.QueryGasConsumerResponse")
	proto.RegisterType((*QueryGasConsumersRequest)(nil), "comdex.gasless.v1beta1.QueryGasConsumersRequest")
	proto.RegisterType((*QueryGasConsumersResponse)(nil), "comdex.gasless.v1beta1.QueryGasConsumersResponse")
}

func init() {
	proto.RegisterFile("comdex/gasless/v1beta1/query.proto", fileDescriptor_b3f33915e66c7457)
}

var fileDescriptor_b3f33915e66c7457 = []byte{
	// 1083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x89, 0x63, 0x8f, 0xdd, 0x36, 0x9d, 0x9a, 0x76, 0xeb, 0x52, 0xc7, 0xdd, 0xa0,
	0xd4, 0x34, 0xaa, 0x97, 0xb8, 0x20, 0x41, 0xc5, 0xc5, 0x49, 0x69, 0x15, 0x95, 0xa2, 0x60, 0x02,
	0x12, 0xbd, 0xac, 0xc6, 0xbb, 0x93, 0xcd, 0x2a, 0xbb, 0x3b, 0xee, 0xce, 0x38, 0xb8, 0x54, 0x5c,
	0x38, 0x20, 0x71, 0x43, 0xe2, 0xce, 0x8d, 0x1b, 0x07, 0x0e, 0x1c, 0xf9, 0x03, 0x7a, 0x2c, 0xe2,
	0x82, 0x38, 0x14, 0x94, 0xf0, 0x87, 0xa0, 0x9d, 0x1f, 0xbb, 0xeb, 0x38, 0xfe, 0xd1, 0x2a, 0xb7,
	0x9d, 0x99, 0xef, 0xbd, 0xf7, 0x7d, 0xef, 0xbd, 0x79, 0xb3, 0xc0, 0xb0, 0x49, 0xe0, 0xe0, 0x81,
	0xe9, 0x22, 0xea, 0x63, 0x4a, 0xcd, 0xc3, 0x8d, 0x2e, 0x66, 0x68, 0xc3, 0x7c, 0xd2, 0xc7, 0xd1,
	0xd3, 0x66, 0x2f, 0x22, 0x8c, 0xc0, 0xcb, 0x02, 0xd3, 0x94, 0x98, 0xa6, 0xc4, 0x54, 0x2b, 0x2e,
	0x71, 0x09, 0x87, 0x98, 0xf1, 0x97, 0x40, 0x57, 0xdf, 0x74, 0x09, 0x71, 0x7d, 0x6c, 0xa2, 0x9e,
	0x67, 0xa2, 0x30, 0x24, 0x0c, 0x31, 0x8f, 0x84, 0x54, 0x9e, 0xae, 0x8e, 0x89, 0xd7, 0x43, 0x11,
	0x0a, 0x14, 0xe8, 0xad, 0x31, 0x20, 0x45, 0x40, 0xa0, 0x6e, 0xd9, 0x84, 0x06, 0x84, 0x9a, 0x5d,
	0x44, 0xb1, 0xe0, 0x9b, 0xf1, 0xe6, 0x7a, 0x21, 0x8f, 0x2b, 0xb1, 0xb5, 0x2c, 0x56, 0xa1, 0x6c,
	0xe2, 0xc9, 0x73, 0xa3, 0x02, 0xe0, 0xa7, 0xb1, 0x87, 0x1d, 0x4e, 0xa3, 0x83, 0x9f, 0xf4, 0x31,
	0x65, 0xc6, 0x67, 0xe0, 0xd2, 0xd0, 0x2e, 0xed, 0x91, 0x90, 0x62, 0xf8, 0x21, 0xc8, 0x0b, 0xba,
	0xba, 0x56, 0xd7, 0x1a, 0xa5, 0x56, 0xad, 0x79, 0x7a, 0x82, 0x9a, 0xc2, 0x6e, 0x73, 0xe1, 0xf9,
	0xcb, 0x95, 0xb9, 0x8e, 0xb4, 0x31, 0x0c, 0x50, 0xe7, 0x4e, 0x1f, 0x61, 0x4a, 0x91, 0x8b, 0x69,
	0x3b, 0x74, 0xb6, 0x48, 0xc8, 0x22, 0x64, 0xb3, 0x24, 0xf0, 0x63, 0x70, 0x41, 0xed, 0xdd, 0xc3,
	0x0c, 0x79, 0x3e, 0x85, 0x57, 0xc0, 0x92, 0x4d, 0x1c, 0x6c, 0x79, 0x0e, 0x8f, 0xba, 0xd0, 0xc9,
	0xc7, 0xcb, 0x6d, 0x07, 0xea, 0x60, 0x09, 0x39, 0x4e, 0x84, 0x29, 0xd5, 0x73, 0x75, 0xad, 0x51,
	0xec, 0xa8, 0x25, 0xac, 0x80, 0x45, 0x1f, 0x75, 0x7d, 0xac, 0xcf, 0xf3, 0x7d, 0xb1, 0x30, 0xbe,
	0xd3, 0xc0, 0x8d, 0x09, 0x04, 0xa4, 0xc6, 0x2a, 0x28, 0x04, 0xf2, 0x5c, 0xd7, 0xea, 0xf3, 0x8d,
	0x62, 0x27, 0x59, 0xc3, 0x8f, 0x40, 0xd1, 0x56, 0x06, 0x7a, 0xae, 0x3e, 0xdf, 0x28, 0xb5, 0x6e,
	0x8e, 0x4b, 0xc1, 0x09, 0x19, 0x9d, 0xd4, 0xd2, 0xf8, 0x63, 0x01, 0x5c, 0x7a, 0x80, 0xe8, 0x4e,
	0x44, 0x0e, 0x3d, 0x07, 0x47, 0x49, 0xe8, 0xf3, 0x20, 0x97, 0x88, 0xcc, 0x79, 0x5c, 0xa0, 0x1d,
	0x61, 0xc4, 0x48, 0xa4, 0x04, 0xca, 0x25, 0x6c, 0x80, 0x65, 0x17, 0x51, 0x8b, 0xa1, 0xf0, 0xc0,
	0x52, 0x39, 0x10, 0x5a, 0xcf, 0xbb, 0x88, 0xee, 0xa2, 0xf0, 0xa0, 0x2d, 0x53, 0xf1, 0x10, 0x5c,
	0x4c, 0x90, 0x5d, 0xe4, 0xa3, 0xd0, 0xc6, 0x54, 0x5f, 0xe0, 0xd4, 0xaf, 0x36, 0x45, 0x6f, 0x34,
	0xe3, 0xde, 0xc8, 0xf0, 0xf6, 0x42, 0x59, 0xb8, 0x0b, 0xd2, 0xd7, 0xa6, 0xb4, 0x83, 0xd7, 0x40,
	0xd1, 0xa3, 0x16, 0xb2, 0x99, 0x77, 0x88, 0xf5, 0xc5, 0xba, 0xd6, 0x28, 0x74, 0x0a, 0x1e, 0x6d,
	0xf3, 0x35, 0xbc, 0x0b, 0xaa, 0x01, 0x1a, 0x58, 0x6c, 0x40, 0x2d, 0x9b, 0xf4, 0x43, 0x66, 0xf5,
	0x70, 0x64, 0xd9, 0x24, 0xa4, 0xfd, 0x00, 0x47, 0x7a, 0x9e, 0xab, 0xba, 0x1c, 0xa0, 0xc1, 0xee,
	0x80, 0x6e, 0xc5, 0xe7, 0x3b, 0x38, 0xda, 0x92, 0xa7, 0xf0, 0x4b, 0x61, 0xbb, 0x87, 0xb1, 0xd5,
	0x8f, 0x53, 0x3d, 0x6c, 0xbb, 0x14, 0x2b, 0xdb, 0xbc, 0x1e, 0x73, 0xfa, 0xfb, 0xe5, 0xca, 0x1b,
	0x82, 0x35, 0x75, 0x0e, 0x9a, 0x1e, 0x31, 0x03, 0xc4, 0xf6, 0x9b, 0xdb, 0x21, 0xe3, 0xae, 0xef,
	0x63, 0xfc, 0x79, 0x6c, 0x9e, 0x75, 0xfd, 0x08, 0x54, 0x46, 0x5d, 0xb3, 0x81, 0x5e, 0x98, 0xc5,
	0xe9, 0xf2, 0xb0, 0xd3, 0xdd, 0x01, 0x5c, 0x01, 0xa5, 0x58, 0x21, 0xf2, 0x7d, 0xf2, 0x15, 0x76,
	0xf4, 0x22, 0xef, 0x10, 0xc0, 0x06, 0xb4, 0x2d, 0x76, 0xe0, 0x3a, 0xb8, 0x98, 0x54, 0x3a, 0x81,
	0x01, 0x0e, 0x5b, 0x4e, 0x0e, 0x32, 0x60, 0xd4, 0x67, 0xfb, 0x24, 0xf2, 0xbe, 0xc6, 0x4e, 0x9c,
	0x58, 0x12, 0x51, 0xbd, 0x24, 0xc0, 0xe9, 0x41, 0x9b, 0xef, 0xc7, 0xd9, 0x8f, 0x55, 0x38, 0x38,
	0x24, 0x81, 0x5e, 0xe6, 0xd5, 0x2e, 0xec, 0x61, 0x7c, 0x2f, 0x5e, 0x1b, 0x6d, 0x70, 0x85, 0xf7,
	0xf6, 0x50, 0x5f, 0xf1, 0x3b, 0x05, 0xd7, 0x40, 0x5c, 0x48, 0xab, 0x27, 0xb7, 0xd3, 0x8b, 0x74,
	0xce, 0x4d, 0xc1, 0xdb, 0x8e, 0xd1, 0x03, 0xfa, 0xa8, 0x0b, 0xd9, 0x9a, 0xbb, 0xa0, 0x9c, 0xf5,
	0x21, 0xef, 0xff, 0xfa, 0xb8, 0xe6, 0x3f, 0xc5, 0x85, 0xec, 0xa9, 0x52, 0x26, 0xa6, 0xd1, 0x1d,
	0x8d, 0xa8, 0x26, 0x01, 0xbc, 0x0f, 0x40, 0x3a, 0xcc, 0x64, 0xbc, 0xb5, 0xa1, 0x8e, 0x15, 0x93,
	0x3a, 0x1d, 0x39, 0x2e, 0x96, 0xb6, 0x9d, 0x8c, 0xa5, 0xf1, 0xbb, 0x06, 0xae, 0x9e, 0x12, 0x44,
	0xea, 0xfa, 0x02, 0x9c, 0xcb, 0xea, 0x12, 0x57, 0xfe, 0xb5, 0x84, 0x95, 0x33, 0xc2, 0x28, 0x7c,
	0x30, 0xc4, 0x3e, 0xc7, 0xd9, 0xdf, 0x9c, 0xca, 0x5e, 0x38, 0x1c, 0xa2, 0xff, 0x5e, 0x5a, 0x57,
	0xd5, 0xd2, 0x2a, 0x43, 0x55, 0x50, 0x48, 0xae, 0x88, 0x26, 0xda, 0x41, 0xad, 0x8d, 0xfd, 0x34,
	0xb3, 0xa9, 0x99, 0xd4, 0xfc, 0xb1, 0xa8, 0xe5, 0x90, 0x6d, 0xa9, 0xb5, 0x3a, 0x41, 0xb2, 0x72,
	0x91, 0xa9, 0xa1, 0xda, 0xca, 0xd6, 0x50, 0xed, 0x9d, 0x79, 0x0d, 0x7f, 0xcb, 0xd4, 0x30, 0x13,
	0x44, 0xea, 0xf9, 0x44, 0xd4, 0x50, 0xe9, 0x51, 0x35, 0x7c, 0x05, 0x41, 0xe5, 0x8c, 0xa0, 0xb3,
	0xab, 0x5d, 0xeb, 0x9f, 0x25, 0xb0, 0xc8, 0x69, 0xc3, 0xef, 0x35, 0x90, 0x17, 0x6f, 0x22, 0xbc,
	0x35, 0x8e, 0xd6, 0xe8, 0x33, 0x5c, 0x5d, 0x9f, 0x09, 0x2b, 0x22, 0x1b, 0x6b, 0xdf, 0xfe, 0xf9,
	0xdf, 0x8f, 0xb9, 0x3a, 0xac, 0x99, 0x13, 0xff, 0x34, 0xe0, 0xaf, 0x1a, 0xa8, 0x9c, 0xf6, 0x02,
	0xc2, 0xf7, 0x27, 0x46, 0x9b, 0xf0, 0x6a, 0x57, 0x3f, 0x78, 0x0d, 0x4b, 0xc9, 0x7a, 0x95, 0xb3,
	0xbe, 0x0e, 0xaf, 0x8d, 0x63, 0x1d, 0x20, 0x1b, 0xfe, 0xa2, 0x81, 0x52, 0xe6, 0xe6, 0x41, 0x73,
	0x62, 0xbc, 0xd1, 0x11, 0x58, 0x7d, 0x67, 0x76, 0x03, 0xc9, 0xeb, 0x2e, 0xe7, 0xf5, 0x2e, 0x6c,
	0x8d, 0xcd, 0xa6, 0xb4, 0x30, 0x9f, 0x9d, 0x18, 0xae, 0xdf, 0xc0, 0x9f, 0x34, 0x50, 0xce, 0x4e,
	0x1b, 0x38, 0x73, 0xf8, 0x24, 0xa3, 0x1b, 0xaf, 0x60, 0x21, 0x19, 0xbf, 0xcd, 0x19, 0xaf, 0xc2,
	0x1b, 0xd3, 0x18, 0x53, 0xf8, 0xb3, 0xc8, 0x67, 0xf2, 0x46, 0x4e, 0xcd, 0xe7, 0x89, 0xd1, 0x33,
	0x3d, 0x9f, 0x27, 0x87, 0x8e, 0x71, 0x87, 0xb3, 0xbb, 0x0d, 0xd7, 0xc7, 0xb1, 0x53, 0xd7, 0xd7,
	0x7c, 0xa6, 0xbe, 0x92, 0x44, 0xa6, 0x57, 0x73, 0xe6, 0xb8, 0xb3, 0x27, 0x72, 0x64, 0x9e, 0x4c,
	0x4f, 0x64, 0x32, 0x69, 0x36, 0x1f, 0x3e, 0x3f, 0xaa, 0x69, 0x2f, 0x8e, 0x6a, 0xda, 0xbf, 0x47,
	0x35, 0xed, 0x87, 0xe3, 0xda, 0xdc, 0x8b, 0xe3, 0xda, 0xdc, 0x5f, 0xc7, 0xb5, 0xb9, 0xc7, 0x1b,
	0xae, 0xc7, 0xf6, 0xfb, 0xdd, 0x38, 0xba, 0x74, 0x73, 0x9b, 0xec, 0xed, 0x79, 0xb6, 0x87, 0x7c,
	0xe5, 0x36, 0x75, 0xcc, 0x9e, 0xf6, 0x30, 0xed, 0xe6, 0xf9, 0x1f, 0xf9, 0x9d, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x3b, 0x19, 0x0f, 0x9a, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// MessagesAndContracts return all cosmos.base.v1beta1.Msg messages and available contract details
	MessagesAndContracts(ctx context.Context, in *QueryMessagesAndContractsRequest, opts ...grpc.CallOption) (*QueryMessagesAndContractsResponse, error)
	// GasProvider returns gas provider details
	GasProvider(ctx context.Context, in *QueryGasProviderRequest, opts ...grpc.CallOption) (*QueryGasProviderResponse, error)
	// GasProviders return details of all the gas providers
	GasProviders(ctx context.Context, in *QueryGasProvidersRequest, opts ...grpc.CallOption) (*QueryGasProvidersResponse, error)
	// GasConsumer returns gas consumer details
	GasConsumer(ctx context.Context, in *QueryGasConsumerRequest, opts ...grpc.CallOption) (*QueryGasConsumerResponse, error)
	// GasConsumers return details of all the gas consumers
	GasConsumers(ctx context.Context, in *QueryGasConsumersRequest, opts ...grpc.CallOption) (*QueryGasConsumersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MessagesAndContracts(ctx context.Context, in *QueryMessagesAndContractsRequest, opts ...grpc.CallOption) (*QueryMessagesAndContractsResponse, error) {
	out := new(QueryMessagesAndContractsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/MessagesAndContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasProvider(ctx context.Context, in *QueryGasProviderRequest, opts ...grpc.CallOption) (*QueryGasProviderResponse, error) {
	out := new(QueryGasProviderResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasProviders(ctx context.Context, in *QueryGasProvidersRequest, opts ...grpc.CallOption) (*QueryGasProvidersResponse, error) {
	out := new(QueryGasProvidersResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasConsumer(ctx context.Context, in *QueryGasConsumerRequest, opts ...grpc.CallOption) (*QueryGasConsumerResponse, error) {
	out := new(QueryGasConsumerResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasConsumers(ctx context.Context, in *QueryGasConsumersRequest, opts ...grpc.CallOption) (*QueryGasConsumersResponse, error) {
	out := new(QueryGasConsumersResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasConsumers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// MessagesAndContracts return all cosmos.base.v1beta1.Msg messages and available contract details
	MessagesAndContracts(context.Context, *QueryMessagesAndContractsRequest) (*QueryMessagesAndContractsResponse, error)
	// GasProvider returns gas provider details
	GasProvider(context.Context, *QueryGasProviderRequest) (*QueryGasProviderResponse, error)
	// GasProviders return details of all the gas providers
	GasProviders(context.Context, *QueryGasProvidersRequest) (*QueryGasProvidersResponse, error)
	// GasConsumer returns gas consumer details
	GasConsumer(context.Context, *QueryGasConsumerRequest) (*QueryGasConsumerResponse, error)
	// GasConsumers return details of all the gas consumers
	GasConsumers(context.Context, *QueryGasConsumersRequest) (*QueryGasConsumersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) MessagesAndContracts(ctx context.Context, req *QueryMessagesAndContractsRequest) (*QueryMessagesAndContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAndContracts not implemented")
}
func (*UnimplementedQueryServer) GasProvider(ctx context.Context, req *QueryGasProviderRequest) (*QueryGasProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasProvider not implemented")
}
func (*UnimplementedQueryServer) GasProviders(ctx context.Context, req *QueryGasProvidersRequest) (*QueryGasProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasProviders not implemented")
}
func (*UnimplementedQueryServer) GasConsumer(ctx context.Context, req *QueryGasConsumerRequest) (*QueryGasConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasConsumer not implemented")
}
func (*UnimplementedQueryServer) GasConsumers(ctx context.Context, req *QueryGasConsumersRequest) (*QueryGasConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasConsumers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MessagesAndContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessagesAndContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MessagesAndContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/MessagesAndContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MessagesAndContracts(ctx, req.(*QueryMessagesAndContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasProvider(ctx, req.(*QueryGasProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasProviders(ctx, req.(*QueryGasProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasConsumer(ctx, req.(*QueryGasConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasConsumers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasConsumers(ctx, req.(*QueryGasConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.gasless.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MessagesAndContracts",
			Handler:    _Query_MessagesAndContracts_Handler,
		},
		{
			MethodName: "GasProvider",
			Handler:    _Query_GasProvider_Handler,
		},
		{
			MethodName: "GasProviders",
			Handler:    _Query_GasProviders_Handler,
		},
		{
			MethodName: "GasConsumer",
			Handler:    _Query_GasConsumer_Handler,
		},
		{
			MethodName: "GasConsumers",
			Handler:    _Query_GasConsumers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/gasless/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMessagesAndContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagesAndContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagesAndContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContractDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lable) > 0 {
		i -= len(m.Lable)
		copy(dAtA[i:], m.Lable)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Lable)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessagesAndContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagesAndContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagesAndContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GasProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AuthorizedActors) > 0 {
		for iNdEx := len(m.AuthorizedActors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizedActors[iNdEx])
			copy(dAtA[i:], m.AuthorizedActors[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AuthorizedActors[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x30
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.GasTankBalances) > 0 {
		for iNdEx := len(m.GasTankBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasTankBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GasTankAddress) > 0 {
		i -= len(m.GasTankAddress)
		copy(dAtA[i:], m.GasTankAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GasTankAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasProviderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasProvider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGasProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasProviders) > 0 {
		for iNdEx := len(m.GasProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasConsumer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasConsumers) > 0 {
		for iNdEx := len(m.GasConsumers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasConsumers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMessagesAndContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContractDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovQuery(uint64(m.CodeId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Lable)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMessagesAndContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GasProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GasTankAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.GasTankBalances) > 0 {
		for _, e := range m.GasTankBalances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.IsActive {
		n += 2
	}
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovQuery(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AuthorizedActors) > 0 {
		for _, s := range m.AuthorizedActors {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasProviderId != 0 {
		n += 1 + sovQuery(uint64(m.GasProviderId))
	}
	return n
}

func (m *QueryGasProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasProvider.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGasProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasProviders) > 0 {
		for _, e := range m.GasProviders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasConsumer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGasConsumersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasConsumers) > 0 {
		for _, e := range m.GasConsumers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagesAndContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagesAndContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagesAndContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagesAndContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagesAndContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagesAndContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &ContractDetails{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasTankAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasTankBalances = append(m.GasTankBalances, types.Coin{})
			if err := m.GasTankBalances[len(m.GasTankBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedActors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedActors = append(m.AuthorizedActors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProviderId", wireType)
			}
			m.GasProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasProviderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasProviders = append(m.GasProviders, GasProviderResponse{})
			if err := m.GasProviders[len(m.GasProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasConsumers = append(m.GasConsumers, GasConsumer{})
			if err := m.GasConsumers[len(m.GasConsumers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
