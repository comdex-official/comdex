// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/gasless/v1beta1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryMessagesAndContractsRequest is a request type for the Query/MessagesAndContracts RPC method.
type QueryMessagesAndContractsRequest struct {
}

func (m *QueryMessagesAndContractsRequest) Reset()         { *m = QueryMessagesAndContractsRequest{} }
func (m *QueryMessagesAndContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMessagesAndContractsRequest) ProtoMessage()    {}
func (*QueryMessagesAndContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{2}
}
func (m *QueryMessagesAndContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagesAndContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagesAndContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagesAndContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagesAndContractsRequest.Merge(m, src)
}
func (m *QueryMessagesAndContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagesAndContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagesAndContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagesAndContractsRequest proto.InternalMessageInfo

type ContractDetails struct {
	CodeId  uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Lable   string `protobuf:"bytes,3,opt,name=lable,proto3" json:"lable,omitempty"`
}

func (m *ContractDetails) Reset()         { *m = ContractDetails{} }
func (m *ContractDetails) String() string { return proto.CompactTextString(m) }
func (*ContractDetails) ProtoMessage()    {}
func (*ContractDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{3}
}
func (m *ContractDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractDetails.Merge(m, src)
}
func (m *ContractDetails) XXX_Size() int {
	return m.Size()
}
func (m *ContractDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ContractDetails proto.InternalMessageInfo

func (m *ContractDetails) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *ContractDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContractDetails) GetLable() string {
	if m != nil {
		return m.Lable
	}
	return ""
}

// QueryMessagesAndContractsResponse is a response type for the Query/MessagesAndContracts RPC method.
type QueryMessagesAndContractsResponse struct {
	Messages  []string           `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Contracts []*ContractDetails `protobuf:"bytes,2,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (m *QueryMessagesAndContractsResponse) Reset()         { *m = QueryMessagesAndContractsResponse{} }
func (m *QueryMessagesAndContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMessagesAndContractsResponse) ProtoMessage()    {}
func (*QueryMessagesAndContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{4}
}
func (m *QueryMessagesAndContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMessagesAndContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMessagesAndContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMessagesAndContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessagesAndContractsResponse.Merge(m, src)
}
func (m *QueryMessagesAndContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMessagesAndContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessagesAndContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessagesAndContractsResponse proto.InternalMessageInfo

func (m *QueryMessagesAndContractsResponse) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *QueryMessagesAndContractsResponse) GetContracts() []*ContractDetails {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type GasTankResponse struct {
	Id                     uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider               string                `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Reserve                string                `protobuf:"bytes,3,opt,name=reserve,proto3" json:"reserve,omitempty"`
	GasTankBalance         types.Coin            `protobuf:"bytes,4,opt,name=gas_tank_balance,json=gasTankBalance,proto3" json:"gas_tank_balance"`
	IsActive               bool                  `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	MaxTxsCountPerConsumer uint64                `protobuf:"varint,6,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	MaxFeeUsagePerTx       cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	TxsAllowed             []string              `protobuf:"bytes,9,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	ContractsAllowed       []string              `protobuf:"bytes,10,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
	AuthorizedActors       []string              `protobuf:"bytes,11,rep,name=authorized_actors,json=authorizedActors,proto3" json:"authorized_actors,omitempty"`
	FeeDenom               string                `protobuf:"bytes,12,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
}

func (m *GasTankResponse) Reset()         { *m = GasTankResponse{} }
func (m *GasTankResponse) String() string { return proto.CompactTextString(m) }
func (*GasTankResponse) ProtoMessage()    {}
func (*GasTankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{5}
}
func (m *GasTankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasTankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasTankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasTankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasTankResponse.Merge(m, src)
}
func (m *GasTankResponse) XXX_Size() int {
	return m.Size()
}
func (m *GasTankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GasTankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GasTankResponse proto.InternalMessageInfo

func (m *GasTankResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GasTankResponse) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *GasTankResponse) GetReserve() string {
	if m != nil {
		return m.Reserve
	}
	return ""
}

func (m *GasTankResponse) GetGasTankBalance() types.Coin {
	if m != nil {
		return m.GasTankBalance
	}
	return types.Coin{}
}

func (m *GasTankResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GasTankResponse) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *GasTankResponse) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *GasTankResponse) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

func (m *GasTankResponse) GetAuthorizedActors() []string {
	if m != nil {
		return m.AuthorizedActors
	}
	return nil
}

func (m *GasTankResponse) GetFeeDenom() string {
	if m != nil {
		return m.FeeDenom
	}
	return ""
}

// QueryGasTankRequest is a request type for the Query/GasTank RPC method.
type QueryGasTankRequest struct {
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
}

func (m *QueryGasTankRequest) Reset()         { *m = QueryGasTankRequest{} }
func (m *QueryGasTankRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasTankRequest) ProtoMessage()    {}
func (*QueryGasTankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{6}
}
func (m *QueryGasTankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTankRequest.Merge(m, src)
}
func (m *QueryGasTankRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTankRequest proto.InternalMessageInfo

func (m *QueryGasTankRequest) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

// QueryGasTankResponse is a response type for the Query/GasTank RPC method.
type QueryGasTankResponse struct {
	GasTank GasTankResponse `protobuf:"bytes,1,opt,name=gas_tank,json=gasTank,proto3" json:"gas_tank"`
}

func (m *QueryGasTankResponse) Reset()         { *m = QueryGasTankResponse{} }
func (m *QueryGasTankResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasTankResponse) ProtoMessage()    {}
func (*QueryGasTankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{7}
}
func (m *QueryGasTankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTankResponse.Merge(m, src)
}
func (m *QueryGasTankResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTankResponse proto.InternalMessageInfo

func (m *QueryGasTankResponse) GetGasTank() GasTankResponse {
	if m != nil {
		return m.GasTank
	}
	return GasTankResponse{}
}

// QueryGasTanksRequest is a request type for the Query/GasTanks RPC method.
type QueryGasTanksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasTanksRequest) Reset()         { *m = QueryGasTanksRequest{} }
func (m *QueryGasTanksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasTanksRequest) ProtoMessage()    {}
func (*QueryGasTanksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{8}
}
func (m *QueryGasTanksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTanksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTanksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTanksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTanksRequest.Merge(m, src)
}
func (m *QueryGasTanksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTanksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTanksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTanksRequest proto.InternalMessageInfo

func (m *QueryGasTanksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasTanksResponse is a response type for the Query/GasTanks RPC method.
type QueryGasTanksResponse struct {
	GasTanks   []GasTankResponse   `protobuf:"bytes,1,rep,name=gas_tanks,json=gasTanks,proto3" json:"gas_tanks"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasTanksResponse) Reset()         { *m = QueryGasTanksResponse{} }
func (m *QueryGasTanksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasTanksResponse) ProtoMessage()    {}
func (*QueryGasTanksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{9}
}
func (m *QueryGasTanksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTanksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTanksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTanksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTanksResponse.Merge(m, src)
}
func (m *QueryGasTanksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTanksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTanksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTanksResponse proto.InternalMessageInfo

func (m *QueryGasTanksResponse) GetGasTanks() []GasTankResponse {
	if m != nil {
		return m.GasTanks
	}
	return nil
}

func (m *QueryGasTanksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasTanksByProviderRequest is a request type for the Query/GasTanksByProvider RPC method.
type QueryGasTanksByProviderRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *QueryGasTanksByProviderRequest) Reset()         { *m = QueryGasTanksByProviderRequest{} }
func (m *QueryGasTanksByProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasTanksByProviderRequest) ProtoMessage()    {}
func (*QueryGasTanksByProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{10}
}
func (m *QueryGasTanksByProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTanksByProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTanksByProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTanksByProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTanksByProviderRequest.Merge(m, src)
}
func (m *QueryGasTanksByProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTanksByProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTanksByProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTanksByProviderRequest proto.InternalMessageInfo

func (m *QueryGasTanksByProviderRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// QueryGasTanksByProviderResponse is a response type for the Query/GasTanksByProvider RPC method.
type QueryGasTanksByProviderResponse struct {
	GasTanks []GasTankResponse `protobuf:"bytes,1,rep,name=gas_tanks,json=gasTanks,proto3" json:"gas_tanks"`
}

func (m *QueryGasTanksByProviderResponse) Reset()         { *m = QueryGasTanksByProviderResponse{} }
func (m *QueryGasTanksByProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasTanksByProviderResponse) ProtoMessage()    {}
func (*QueryGasTanksByProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{11}
}
func (m *QueryGasTanksByProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTanksByProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTanksByProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTanksByProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTanksByProviderResponse.Merge(m, src)
}
func (m *QueryGasTanksByProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTanksByProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTanksByProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTanksByProviderResponse proto.InternalMessageInfo

func (m *QueryGasTanksByProviderResponse) GetGasTanks() []GasTankResponse {
	if m != nil {
		return m.GasTanks
	}
	return nil
}

// QueryGasConsumerRequest is a request type for the Query/GasConsumer RPC method.
type QueryGasConsumerRequest struct {
	Consumer string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (m *QueryGasConsumerRequest) Reset()         { *m = QueryGasConsumerRequest{} }
func (m *QueryGasConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumerRequest) ProtoMessage()    {}
func (*QueryGasConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{12}
}
func (m *QueryGasConsumerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumerRequest.Merge(m, src)
}
func (m *QueryGasConsumerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumerRequest proto.InternalMessageInfo

func (m *QueryGasConsumerRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

// QueryGasConsumerResponse is a response type for the Query/GasConsumer RPC method.
type QueryGasConsumerResponse struct {
	GasConsumer GasConsumer `protobuf:"bytes,1,opt,name=gas_consumer,json=gasConsumer,proto3" json:"gas_consumer"`
}

func (m *QueryGasConsumerResponse) Reset()         { *m = QueryGasConsumerResponse{} }
func (m *QueryGasConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumerResponse) ProtoMessage()    {}
func (*QueryGasConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{13}
}
func (m *QueryGasConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumerResponse.Merge(m, src)
}
func (m *QueryGasConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumerResponse proto.InternalMessageInfo

func (m *QueryGasConsumerResponse) GetGasConsumer() GasConsumer {
	if m != nil {
		return m.GasConsumer
	}
	return GasConsumer{}
}

// QueryGasConsumersRequest is a request type for the Query/GasConsumers RPC method.
type QueryGasConsumersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasConsumersRequest) Reset()         { *m = QueryGasConsumersRequest{} }
func (m *QueryGasConsumersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersRequest) ProtoMessage()    {}
func (*QueryGasConsumersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{14}
}
func (m *QueryGasConsumersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersRequest.Merge(m, src)
}
func (m *QueryGasConsumersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersRequest proto.InternalMessageInfo

func (m *QueryGasConsumersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGasConsumersResponse is a response type for the Query/GasConsumers RPC method.
type QueryGasConsumersResponse struct {
	GasConsumers []GasConsumer       `protobuf:"bytes,1,rep,name=gas_consumers,json=gasConsumers,proto3" json:"gas_consumers"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGasConsumersResponse) Reset()         { *m = QueryGasConsumersResponse{} }
func (m *QueryGasConsumersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersResponse) ProtoMessage()    {}
func (*QueryGasConsumersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{15}
}
func (m *QueryGasConsumersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersResponse.Merge(m, src)
}
func (m *QueryGasConsumersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersResponse proto.InternalMessageInfo

func (m *QueryGasConsumersResponse) GetGasConsumers() []GasConsumer {
	if m != nil {
		return m.GasConsumers
	}
	return nil
}

func (m *QueryGasConsumersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type GasConsumersByGasTankIDResponse struct {
	Consumer                   string     `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	IsBlocked                  bool       `protobuf:"varint,2,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	TotalTxsAllowed            uint64     `protobuf:"varint,3,opt,name=total_txs_allowed,json=totalTxsAllowed,proto3" json:"total_txs_allowed,omitempty"`
	TotalTxsMade               uint64     `protobuf:"varint,4,opt,name=total_txs_made,json=totalTxsMade,proto3" json:"total_txs_made,omitempty"`
	TotalFeeConsumptionAllowed types.Coin `protobuf:"bytes,5,opt,name=total_fee_consumption_allowed,json=totalFeeConsumptionAllowed,proto3" json:"total_fee_consumption_allowed"`
	TotalFeesConsumed          types.Coin `protobuf:"bytes,6,opt,name=total_fees_consumed,json=totalFeesConsumed,proto3" json:"total_fees_consumed"`
	Usage                      *Usage     `protobuf:"bytes,7,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (m *GasConsumersByGasTankIDResponse) Reset()         { *m = GasConsumersByGasTankIDResponse{} }
func (m *GasConsumersByGasTankIDResponse) String() string { return proto.CompactTextString(m) }
func (*GasConsumersByGasTankIDResponse) ProtoMessage()    {}
func (*GasConsumersByGasTankIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{16}
}
func (m *GasConsumersByGasTankIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasConsumersByGasTankIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasConsumersByGasTankIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasConsumersByGasTankIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasConsumersByGasTankIDResponse.Merge(m, src)
}
func (m *GasConsumersByGasTankIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GasConsumersByGasTankIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GasConsumersByGasTankIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GasConsumersByGasTankIDResponse proto.InternalMessageInfo

func (m *GasConsumersByGasTankIDResponse) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *GasConsumersByGasTankIDResponse) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *GasConsumersByGasTankIDResponse) GetTotalTxsAllowed() uint64 {
	if m != nil {
		return m.TotalTxsAllowed
	}
	return 0
}

func (m *GasConsumersByGasTankIDResponse) GetTotalTxsMade() uint64 {
	if m != nil {
		return m.TotalTxsMade
	}
	return 0
}

func (m *GasConsumersByGasTankIDResponse) GetTotalFeeConsumptionAllowed() types.Coin {
	if m != nil {
		return m.TotalFeeConsumptionAllowed
	}
	return types.Coin{}
}

func (m *GasConsumersByGasTankIDResponse) GetTotalFeesConsumed() types.Coin {
	if m != nil {
		return m.TotalFeesConsumed
	}
	return types.Coin{}
}

func (m *GasConsumersByGasTankIDResponse) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

// QueryGasConsumersByGasTankIDRequest is a request type for the Query/GasConsumersByGasTankID RPC method.
type QueryGasConsumersByGasTankIDRequest struct {
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
}

func (m *QueryGasConsumersByGasTankIDRequest) Reset()         { *m = QueryGasConsumersByGasTankIDRequest{} }
func (m *QueryGasConsumersByGasTankIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersByGasTankIDRequest) ProtoMessage()    {}
func (*QueryGasConsumersByGasTankIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{17}
}
func (m *QueryGasConsumersByGasTankIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersByGasTankIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersByGasTankIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersByGasTankIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersByGasTankIDRequest.Merge(m, src)
}
func (m *QueryGasConsumersByGasTankIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersByGasTankIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersByGasTankIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersByGasTankIDRequest proto.InternalMessageInfo

func (m *QueryGasConsumersByGasTankIDRequest) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

// QueryGasConsumersByGasTankIDResponse is a response type for the Query/GasConsumersByGasTankID RPC method.
type QueryGasConsumersByGasTankIDResponse struct {
	GasTankId           uint64                            `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	OverallFeesConsumed types.Coin                        `protobuf:"bytes,2,opt,name=overall_fees_consumed,json=overallFeesConsumed,proto3" json:"overall_fees_consumed"`
	GasConsumers        []GasConsumersByGasTankIDResponse `protobuf:"bytes,3,rep,name=gas_consumers,json=gasConsumers,proto3" json:"gas_consumers"`
}

func (m *QueryGasConsumersByGasTankIDResponse) Reset()         { *m = QueryGasConsumersByGasTankIDResponse{} }
func (m *QueryGasConsumersByGasTankIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasConsumersByGasTankIDResponse) ProtoMessage()    {}
func (*QueryGasConsumersByGasTankIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{18}
}
func (m *QueryGasConsumersByGasTankIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasConsumersByGasTankIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasConsumersByGasTankIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasConsumersByGasTankIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasConsumersByGasTankIDResponse.Merge(m, src)
}
func (m *QueryGasConsumersByGasTankIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasConsumersByGasTankIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasConsumersByGasTankIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasConsumersByGasTankIDResponse proto.InternalMessageInfo

func (m *QueryGasConsumersByGasTankIDResponse) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *QueryGasConsumersByGasTankIDResponse) GetOverallFeesConsumed() types.Coin {
	if m != nil {
		return m.OverallFeesConsumed
	}
	return types.Coin{}
}

func (m *QueryGasConsumersByGasTankIDResponse) GetGasConsumers() []GasConsumersByGasTankIDResponse {
	if m != nil {
		return m.GasConsumers
	}
	return nil
}

type QueryGasTankIdsForAllTXC struct {
}

func (m *QueryGasTankIdsForAllTXC) Reset()         { *m = QueryGasTankIdsForAllTXC{} }
func (m *QueryGasTankIdsForAllTXC) String() string { return proto.CompactTextString(m) }
func (*QueryGasTankIdsForAllTXC) ProtoMessage()    {}
func (*QueryGasTankIdsForAllTXC) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{19}
}
func (m *QueryGasTankIdsForAllTXC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTankIdsForAllTXC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTankIdsForAllTXC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTankIdsForAllTXC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTankIdsForAllTXC.Merge(m, src)
}
func (m *QueryGasTankIdsForAllTXC) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTankIdsForAllTXC) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTankIdsForAllTXC.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTankIdsForAllTXC proto.InternalMessageInfo

type QueryGasTankIdsForAllTXCResponse struct {
	TxToGtIds []*TxGTIDs `protobuf:"bytes,1,rep,name=tx_to_gt_ids,json=txToGtIds,proto3" json:"tx_to_gt_ids,omitempty"`
}

func (m *QueryGasTankIdsForAllTXCResponse) Reset()         { *m = QueryGasTankIdsForAllTXCResponse{} }
func (m *QueryGasTankIdsForAllTXCResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasTankIdsForAllTXCResponse) ProtoMessage()    {}
func (*QueryGasTankIdsForAllTXCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f33915e66c7457, []int{20}
}
func (m *QueryGasTankIdsForAllTXCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasTankIdsForAllTXCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasTankIdsForAllTXCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasTankIdsForAllTXCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasTankIdsForAllTXCResponse.Merge(m, src)
}
func (m *QueryGasTankIdsForAllTXCResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasTankIdsForAllTXCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasTankIdsForAllTXCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasTankIdsForAllTXCResponse proto.InternalMessageInfo

func (m *QueryGasTankIdsForAllTXCResponse) GetTxToGtIds() []*TxGTIDs {
	if m != nil {
		return m.TxToGtIds
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.gasless.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.gasless.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryMessagesAndContractsRequest)(nil), "comdex.gasless.v1beta1.QueryMessagesAndContractsRequest")
	proto.RegisterType((*ContractDetails)(nil), "comdex.gasless.v1beta1.ContractDetails")
	proto.RegisterType((*QueryMessagesAndContractsResponse)(nil), "comdex.gasless.v1beta1.QueryMessagesAndContractsResponse")
	proto.RegisterType((*GasTankResponse)(nil), "comdex.gasless.v1beta1.GasTankResponse")
	proto.RegisterType((*QueryGasTankRequest)(nil), "comdex.gasless.v1beta1.QueryGasTankRequest")
	proto.RegisterType((*QueryGasTankResponse)(nil), "comdex.gasless.v1beta1.QueryGasTankResponse")
	proto.RegisterType((*QueryGasTanksRequest)(nil), "comdex.gasless.v1beta1.QueryGasTanksRequest")
	proto.RegisterType((*QueryGasTanksResponse)(nil), "comdex.gasless.v1beta1.QueryGasTanksResponse")
	proto.RegisterType((*QueryGasTanksByProviderRequest)(nil), "comdex.gasless.v1beta1.QueryGasTanksByProviderRequest")
	proto.RegisterType((*QueryGasTanksByProviderResponse)(nil), "comdex.gasless.v1beta1.QueryGasTanksByProviderResponse")
	proto.RegisterType((*QueryGasConsumerRequest)(nil), "comdex.gasless.v1beta1.QueryGasConsumerRequest")
	proto.RegisterType((*QueryGasConsumerResponse)(nil), "comdex.gasless.v1beta1.QueryGasConsumerResponse")
	proto.RegisterType((*QueryGasConsumersRequest)(nil), "comdex.gasless.v1beta1.QueryGasConsumersRequest")
	proto.RegisterType((*QueryGasConsumersResponse)(nil), "comdex.gasless.v1beta1.QueryGasConsumersResponse")
	proto.RegisterType((*GasConsumersByGasTankIDResponse)(nil), "comdex.gasless.v1beta1.GasConsumersByGasTankIDResponse")
	proto.RegisterType((*QueryGasConsumersByGasTankIDRequest)(nil), "comdex.gasless.v1beta1.QueryGasConsumersByGasTankIDRequest")
	proto.RegisterType((*QueryGasConsumersByGasTankIDResponse)(nil), "comdex.gasless.v1beta1.QueryGasConsumersByGasTankIDResponse")
	proto.RegisterType((*QueryGasTankIdsForAllTXC)(nil), "comdex.gasless.v1beta1.QueryGasTankIdsForAllTXC")
	proto.RegisterType((*QueryGasTankIdsForAllTXCResponse)(nil), "comdex.gasless.v1beta1.QueryGasTankIdsForAllTXCResponse")
}

func init() {
	proto.RegisterFile("comdex/gasless/v1beta1/query.proto", fileDescriptor_b3f33915e66c7457)
}

var fileDescriptor_b3f33915e66c7457 = []byte{
	// 1447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0x8f, 0xf2, 0xd3, 0x7e, 0xce, 0xb7, 0x3f, 0x36, 0x69, 0xab, 0xba, 0xdf, 0x38, 0xa9, 0x52,
	0x4a, 0x48, 0x5b, 0x9b, 0x24, 0xf4, 0x17, 0xe4, 0x40, 0x7e, 0x34, 0xc1, 0x40, 0xa1, 0xb8, 0x66,
	0x06, 0x7a, 0x40, 0xac, 0xa5, 0x8d, 0xa3, 0x89, 0xac, 0x75, 0xb5, 0x72, 0x70, 0xe9, 0xf4, 0xc2,
	0x81, 0x19, 0x2e, 0x0c, 0x33, 0x5c, 0x7a, 0xe2, 0x06, 0x27, 0x0e, 0x1c, 0xb8, 0x32, 0xc3, 0xb1,
	0xc7, 0x0e, 0x5c, 0x18, 0x0e, 0x1d, 0xa6, 0xe5, 0xcf, 0x60, 0x06, 0x46, 0xab, 0x5d, 0x59, 0xb2,
	0x2d, 0x47, 0xe9, 0xf4, 0xe6, 0xd5, 0xbe, 0xcf, 0x7b, 0x9f, 0xcf, 0xdb, 0xf7, 0xde, 0x6e, 0x02,
	0x9a, 0x41, 0x1b, 0x26, 0x69, 0x97, 0xea, 0x98, 0xd9, 0x84, 0xb1, 0xd2, 0xfe, 0x52, 0x8d, 0x78,
	0x78, 0xa9, 0x74, 0xb7, 0x45, 0xdc, 0x7b, 0xc5, 0xa6, 0x4b, 0x3d, 0x8a, 0x4e, 0x06, 0x36, 0x45,
	0x61, 0x53, 0x14, 0x36, 0xf9, 0xe9, 0x3a, 0xad, 0x53, 0x6e, 0x52, 0xf2, 0x7f, 0x05, 0xd6, 0xf9,
	0xff, 0xd7, 0x29, 0xad, 0xdb, 0xa4, 0x84, 0x9b, 0x56, 0x09, 0x3b, 0x0e, 0xf5, 0xb0, 0x67, 0x51,
	0x87, 0x89, 0xdd, 0xf9, 0x84, 0x78, 0x4d, 0xec, 0xe2, 0x86, 0x34, 0x3a, 0x97, 0x60, 0x24, 0x09,
	0x04, 0x56, 0x8b, 0x06, 0x65, 0x0d, 0xca, 0x4a, 0x35, 0xcc, 0x48, 0xc0, 0x37, 0xe2, 0xad, 0x6e,
	0x39, 0x3c, 0xae, 0xb0, 0x2d, 0x44, 0x6d, 0xa5, 0x95, 0x41, 0x2d, 0xb1, 0xaf, 0x4d, 0x03, 0xfa,
	0xc0, 0xf7, 0x70, 0x8b, 0xd3, 0xa8, 0x90, 0xbb, 0x2d, 0xc2, 0x3c, 0xed, 0x36, 0x4c, 0xc5, 0xbe,
	0xb2, 0x26, 0x75, 0x18, 0x41, 0xab, 0x30, 0x1e, 0xd0, 0x55, 0x95, 0x39, 0x65, 0x21, 0xb7, 0x5c,
	0x28, 0xf6, 0x4f, 0x50, 0x31, 0xc0, 0xad, 0x8f, 0x3e, 0x7a, 0x32, 0x3b, 0x54, 0x11, 0x18, 0x4d,
	0x83, 0x39, 0xee, 0xf4, 0x26, 0x61, 0x0c, 0xd7, 0x09, 0x5b, 0x73, 0xcc, 0x0d, 0xea, 0x78, 0x2e,
	0x36, 0xbc, 0x30, 0xf0, 0x1d, 0x38, 0x2a, 0xbf, 0x6d, 0x12, 0x0f, 0x5b, 0x36, 0x43, 0xa7, 0x60,
	0xc2, 0xa0, 0x26, 0xd1, 0x2d, 0x93, 0x47, 0x1d, 0xad, 0x8c, 0xfb, 0xcb, 0xb2, 0x89, 0x54, 0x98,
	0xc0, 0xa6, 0xe9, 0x12, 0xc6, 0xd4, 0xe1, 0x39, 0x65, 0x21, 0x5b, 0x91, 0x4b, 0x34, 0x0d, 0x63,
	0x36, 0xae, 0xd9, 0x44, 0x1d, 0xe1, 0xdf, 0x83, 0x85, 0xf6, 0xa5, 0x02, 0x67, 0x07, 0x10, 0x10,
	0x1a, 0xf3, 0x90, 0x69, 0x88, 0x7d, 0x55, 0x99, 0x1b, 0x59, 0xc8, 0x56, 0xc2, 0x35, 0xba, 0x01,
	0x59, 0x43, 0x02, 0xd4, 0xe1, 0xb9, 0x91, 0x85, 0xdc, 0xf2, 0xcb, 0x49, 0x29, 0xe8, 0x92, 0x51,
	0xe9, 0x20, 0xb5, 0x5f, 0x46, 0xe1, 0xe8, 0x36, 0x66, 0x55, 0xec, 0xec, 0x85, 0x61, 0x8f, 0xc0,
	0x70, 0x28, 0x70, 0xd8, 0x32, 0x7d, 0x1a, 0x4d, 0x97, 0xee, 0x5b, 0x26, 0x71, 0x85, 0xba, 0x70,
	0xed, 0x0b, 0x77, 0x09, 0x23, 0xee, 0xbe, 0x14, 0x28, 0x97, 0xa8, 0x0c, 0xc7, 0xea, 0x98, 0xe9,
	0x1e, 0x76, 0xf6, 0xf4, 0x1a, 0xb6, 0xb1, 0x63, 0x10, 0x75, 0x94, 0x1f, 0xd5, 0xe9, 0x62, 0x50,
	0x08, 0x45, 0xbf, 0x10, 0x22, 0x24, 0x2d, 0x47, 0x9c, 0xd2, 0x91, 0x7a, 0xc0, 0x68, 0x3d, 0x80,
	0xa1, 0x33, 0x90, 0xb5, 0x98, 0x8e, 0x0d, 0xcf, 0xda, 0x27, 0xea, 0xd8, 0x9c, 0xb2, 0x90, 0xa9,
	0x64, 0x2c, 0xb6, 0xc6, 0xd7, 0xe8, 0x75, 0xc8, 0x37, 0x70, 0x5b, 0xf7, 0xda, 0x4c, 0x37, 0x68,
	0xcb, 0xf1, 0xf4, 0x26, 0x71, 0x75, 0x83, 0x3a, 0xac, 0xd5, 0x20, 0xae, 0x3a, 0xce, 0x55, 0x9c,
	0x6c, 0xe0, 0x76, 0xb5, 0xcd, 0x36, 0xfc, 0xfd, 0x5b, 0xc4, 0xdd, 0x10, 0xbb, 0xe8, 0xe3, 0x00,
	0xbb, 0x43, 0x88, 0xde, 0xf2, 0xd3, 0x1a, 0xc7, 0x4e, 0xf8, 0x82, 0xd6, 0x67, 0x7c, 0x4a, 0x7f,
	0x3e, 0x99, 0x3d, 0x11, 0x90, 0x66, 0xe6, 0x5e, 0xd1, 0xa2, 0xa5, 0x06, 0xf6, 0x76, 0x8b, 0x65,
	0xc7, 0xe3, 0xae, 0xb7, 0x08, 0xf9, 0xd0, 0x87, 0x47, 0x5d, 0xdf, 0x84, 0xe9, 0x5e, 0xd7, 0x5e,
	0x5b, 0xcd, 0xa4, 0x71, 0x7a, 0x2c, 0xee, 0xb4, 0xda, 0x46, 0xb3, 0x90, 0xf3, 0x15, 0x62, 0xdb,
	0xa6, 0x9f, 0x11, 0x53, 0xcd, 0xf2, 0x6a, 0x00, 0xaf, 0xcd, 0xd6, 0x82, 0x2f, 0xe8, 0x02, 0x1c,
	0x0f, 0x4f, 0x35, 0x34, 0x03, 0x6e, 0x76, 0x2c, 0xdc, 0x88, 0x18, 0xe3, 0x96, 0xb7, 0x4b, 0x5d,
	0xeb, 0x73, 0x62, 0xfa, 0x89, 0xa5, 0x2e, 0x53, 0x73, 0x81, 0x71, 0x67, 0x63, 0x8d, 0x7f, 0xf7,
	0xb3, 0xef, 0xab, 0x30, 0x89, 0x43, 0x1b, 0xea, 0x64, 0x70, 0xfe, 0x3b, 0x84, 0x6c, 0xfa, 0x6b,
	0xed, 0xb2, 0xe8, 0xce, 0xb0, 0x86, 0x78, 0xef, 0xa0, 0x02, 0xe4, 0xc2, 0xc3, 0x0f, 0x6b, 0x29,
	0x2b, 0x8e, 0xb5, 0x6c, 0x6a, 0x9f, 0xc2, 0x74, 0x1c, 0x26, 0x4a, 0xef, 0x2d, 0xc8, 0x48, 0x9c,
	0xe8, 0xeb, 0xc4, 0xa2, 0xee, 0x82, 0x8a, 0xd2, 0x99, 0x10, 0x31, 0xb4, 0x4f, 0xe2, 0x11, 0x64,
	0x57, 0xa3, 0x2d, 0x80, 0xce, 0x60, 0x12, 0x31, 0xce, 0xc7, 0x0a, 0x32, 0x98, 0xba, 0x9d, 0xf1,
	0x51, 0x27, 0x02, 0x5b, 0x89, 0x20, 0xb5, 0x1f, 0x15, 0x38, 0xd1, 0x15, 0x40, 0x68, 0x78, 0x1b,
	0xb2, 0x52, 0x43, 0xd0, 0xb6, 0x87, 0x16, 0x91, 0x11, 0x22, 0x18, 0xda, 0x8e, 0xb1, 0x1d, 0x0e,
	0x33, 0x32, 0x98, 0x6d, 0xe0, 0x2c, 0x46, 0x77, 0x15, 0x0a, 0x31, 0xb6, 0xeb, 0xf7, 0x6e, 0x89,
	0x16, 0x96, 0x89, 0x89, 0x76, 0xb9, 0x12, 0xef, 0x72, 0xad, 0x01, 0xb3, 0x89, 0xe8, 0x17, 0xaf,
	0x5a, 0xbb, 0x0c, 0xa7, 0x64, 0x38, 0xd9, 0x4f, 0x11, 0x96, 0x61, 0x7f, 0x0a, 0x96, 0x72, 0xad,
	0xed, 0x82, 0xda, 0x0b, 0x13, 0xf4, 0xde, 0x85, 0x49, 0x9f, 0x5e, 0x0c, 0x9b, 0x5b, 0x9e, 0x1f,
	0xc0, 0x50, 0xba, 0x10, 0xec, 0xfc, 0x7a, 0x96, 0x9f, 0xb4, 0x5a, 0x6f, 0xa4, 0x17, 0x5e, 0x60,
	0x3f, 0x2b, 0x70, 0xba, 0x4f, 0x10, 0xa1, 0xe7, 0x3d, 0xf8, 0x5f, 0x54, 0x8f, 0x4c, 0xf9, 0x21,
	0x04, 0x4d, 0x46, 0x04, 0xbd, 0xc0, 0x42, 0x7b, 0x38, 0x02, 0xb3, 0x51, 0xc6, 0xeb, 0xb2, 0x68,
	0xca, 0x9b, 0xd1, 0x7b, 0x2d, 0xe9, 0x10, 0xd1, 0x0c, 0x80, 0xc5, 0xf4, 0x9a, 0x4d, 0x8d, 0x3d,
	0x62, 0x72, 0x22, 0x99, 0x4a, 0xd6, 0x62, 0xeb, 0xc1, 0x07, 0xb4, 0x08, 0xc7, 0x3d, 0xea, 0x61,
	0x5b, 0x8f, 0x4e, 0xc3, 0x11, 0x3e, 0x5e, 0x8e, 0xf2, 0x8d, 0x6a, 0x67, 0x24, 0x9e, 0x83, 0x23,
	0x1d, 0xdb, 0x06, 0x36, 0x83, 0xfb, 0x67, 0xb4, 0x32, 0x29, 0x0d, 0x6f, 0x62, 0x93, 0xa0, 0x1a,
	0xcc, 0x04, 0x56, 0xfe, 0x90, 0x0b, 0x68, 0x34, 0x7d, 0x25, 0xa1, 0xf7, 0xb1, 0x74, 0x97, 0x56,
	0x9e, 0x7b, 0xd9, 0x22, 0x64, 0xa3, 0xe3, 0x43, 0x32, 0x79, 0x1f, 0xa6, 0xc2, 0x18, 0xe1, 0xa1,
	0x99, 0xfc, 0x72, 0x4a, 0xe1, 0xf9, 0xb8, 0xf4, 0x2c, 0xb3, 0x6a, 0xa2, 0x15, 0x18, 0xe3, 0xb7,
	0x0a, 0xbf, 0xa3, 0x72, 0xcb, 0x33, 0x49, 0xc7, 0xce, 0x6f, 0x90, 0x4a, 0x60, 0xab, 0xdd, 0x80,
	0xf9, 0x9e, 0x82, 0x8a, 0x1d, 0x4f, 0xba, 0xd9, 0xfd, 0xaf, 0x02, 0xe7, 0x06, 0xfb, 0x11, 0xc7,
	0x7c, 0x80, 0x23, 0x74, 0x1b, 0x4e, 0xd0, 0x7d, 0xe2, 0x62, 0xbb, 0x3b, 0x2f, 0xc3, 0xe9, 0xf2,
	0x32, 0x25, 0xd0, 0xb1, 0xcc, 0xd4, 0xba, 0x1b, 0x63, 0x84, 0x37, 0xc6, 0xd5, 0x14, 0x8d, 0xd1,
	0x4f, 0x44, 0xbf, 0x66, 0xd1, 0xf2, 0x9d, 0xf6, 0x0f, 0xa4, 0xb0, 0x2d, 0xea, 0xae, 0xd9, 0x76,
	0xf5, 0xa3, 0x0d, 0xcd, 0x14, 0x2f, 0xcb, 0x3e, 0x7b, 0x61, 0x62, 0xde, 0x84, 0x49, 0xaf, 0xad,
	0x7b, 0x54, 0xaf, 0x7b, 0xba, 0x65, 0xca, 0xde, 0x9d, 0x4d, 0xa2, 0x58, 0x6d, 0x6f, 0x57, 0xcb,
	0x9b, 0xac, 0x92, 0xf5, 0xda, 0x55, 0xba, 0xed, 0x95, 0x4d, 0xb6, 0xfc, 0x4f, 0x0e, 0xc6, 0x78,
	0x18, 0xf4, 0x95, 0x02, 0xe3, 0xc1, 0x13, 0x17, 0x2d, 0x26, 0x39, 0xe8, 0x7d, 0x55, 0xe7, 0x2f,
	0xa4, 0xb2, 0x0d, 0xf8, 0x6a, 0xe7, 0xbf, 0xf8, 0xfd, 0xef, 0x6f, 0x87, 0xe7, 0x50, 0xa1, 0x34,
	0xf0, 0x0f, 0x07, 0xf4, 0x93, 0x02, 0xd3, 0xfd, 0x1e, 0xb4, 0xe8, 0xda, 0xc0, 0x68, 0x03, 0x1e,
	0xe1, 0xf9, 0xeb, 0xcf, 0x81, 0x14, 0xac, 0xe7, 0x39, 0xeb, 0x19, 0x74, 0x26, 0x89, 0x75, 0x03,
	0x1b, 0xe8, 0xa1, 0x02, 0x13, 0xe2, 0xa8, 0xd0, 0xe0, 0x9c, 0xc4, 0x5f, 0x38, 0xf9, 0x8b, 0xe9,
	0x8c, 0x05, 0x97, 0x65, 0xce, 0xe5, 0x22, 0x5a, 0x4c, 0xe2, 0xe2, 0x37, 0x49, 0xe9, 0x7e, 0xa4,
	0x5d, 0x1e, 0xa0, 0xaf, 0x15, 0xc8, 0xc8, 0x0b, 0x17, 0xa5, 0x0a, 0x17, 0x66, 0xed, 0x52, 0x4a,
	0x6b, 0xc1, 0xee, 0x25, 0xce, 0x6e, 0x16, 0xcd, 0x0c, 0x62, 0xc7, 0xd0, 0xaf, 0x0a, 0xa0, 0xde,
	0x17, 0x00, 0xba, 0x92, 0x2a, 0x58, 0xcf, 0x83, 0x23, 0x7f, 0xf5, 0xd0, 0x38, 0x41, 0xf7, 0x3a,
	0xa7, 0xbb, 0x82, 0x96, 0x12, 0xcb, 0x51, 0x20, 0x02, 0xde, 0xa5, 0xfb, 0x72, 0xfd, 0x00, 0x7d,
	0xaf, 0x40, 0x2e, 0xd2, 0xf1, 0xa8, 0x74, 0x10, 0x87, 0xae, 0xf7, 0x47, 0xfe, 0xd5, 0xf4, 0x00,
	0xc1, 0x76, 0x85, 0xb3, 0xbd, 0x84, 0x2e, 0x24, 0xb1, 0x95, 0xa3, 0xaa, 0x74, 0x5f, 0xfe, 0x7a,
	0x80, 0xbe, 0x53, 0x60, 0x32, 0x3a, 0x99, 0x50, 0xea, 0xb8, 0x61, 0x0d, 0x2c, 0x1d, 0x02, 0x21,
	0xa8, 0xbe, 0xc2, 0xa9, 0xce, 0xa3, 0xb3, 0x07, 0x51, 0x65, 0xe8, 0x37, 0x05, 0x4e, 0x25, 0x8c,
	0x4e, 0xf4, 0x46, 0xea, 0xc8, 0xbd, 0xb7, 0x4f, 0x7e, 0xf5, 0xf9, 0xc0, 0x42, 0xc1, 0x2a, 0x57,
	0x70, 0x05, 0xbd, 0x36, 0xb0, 0xcf, 0x42, 0x19, 0x5d, 0x1d, 0xf7, 0x83, 0x02, 0x53, 0x7d, 0xe6,
	0xf6, 0xc1, 0xc9, 0xef, 0x46, 0xe4, 0xaf, 0x1d, 0x16, 0x91, 0x7e, 0x6a, 0x79, 0x6d, 0x63, 0xfd,
	0x9d, 0x47, 0x4f, 0x0b, 0xca, 0xe3, 0xa7, 0x05, 0xe5, 0xaf, 0xa7, 0x05, 0xe5, 0x9b, 0x67, 0x85,
	0xa1, 0xc7, 0xcf, 0x0a, 0x43, 0x7f, 0x3c, 0x2b, 0x0c, 0xdd, 0x59, 0xaa, 0x5b, 0xde, 0x6e, 0xab,
	0xe6, 0x87, 0x17, 0x0e, 0x2e, 0xd1, 0x9d, 0x1d, 0xcb, 0xb0, 0xb0, 0x2d, 0x1d, 0x76, 0x5c, 0x7a,
	0xf7, 0x9a, 0x84, 0xd5, 0xc6, 0xf9, 0x7f, 0x5f, 0x56, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcf,
	0x46, 0x85, 0x44, 0x86, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// MessagesAndContracts return all cosmos.base.v1beta1.Msg messages and available contract details
	MessagesAndContracts(ctx context.Context, in *QueryMessagesAndContractsRequest, opts ...grpc.CallOption) (*QueryMessagesAndContractsResponse, error)
	// GasTank returns gas tank details
	GasTank(ctx context.Context, in *QueryGasTankRequest, opts ...grpc.CallOption) (*QueryGasTankResponse, error)
	// GasTanks return details of all the gas tanks
	GasTanks(ctx context.Context, in *QueryGasTanksRequest, opts ...grpc.CallOption) (*QueryGasTanksResponse, error)
	// GasTanksByProvider return details of all the gas tanks for the given provider
	GasTanksByProvider(ctx context.Context, in *QueryGasTanksByProviderRequest, opts ...grpc.CallOption) (*QueryGasTanksByProviderResponse, error)
	// GasConsumer returns gas consumer details
	GasConsumer(ctx context.Context, in *QueryGasConsumerRequest, opts ...grpc.CallOption) (*QueryGasConsumerResponse, error)
	// GasConsumers return details of all the gas consumers
	GasConsumers(ctx context.Context, in *QueryGasConsumersRequest, opts ...grpc.CallOption) (*QueryGasConsumersResponse, error)
	// GasConsumersByGasTankID return details of all the gas consumers for the given tank ID
	GasConsumersByGasTankID(ctx context.Context, in *QueryGasConsumersByGasTankIDRequest, opts ...grpc.CallOption) (*QueryGasConsumersByGasTankIDResponse, error)
	// GasTankIdsForAllTXC returns gas tanks ids with all available tx or contracts
	GasTankIdsForAllTXC(ctx context.Context, in *QueryGasTankIdsForAllTXC, opts ...grpc.CallOption) (*QueryGasTankIdsForAllTXCResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MessagesAndContracts(ctx context.Context, in *QueryMessagesAndContractsRequest, opts ...grpc.CallOption) (*QueryMessagesAndContractsResponse, error) {
	out := new(QueryMessagesAndContractsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/MessagesAndContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasTank(ctx context.Context, in *QueryGasTankRequest, opts ...grpc.CallOption) (*QueryGasTankResponse, error) {
	out := new(QueryGasTankResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasTanks(ctx context.Context, in *QueryGasTanksRequest, opts ...grpc.CallOption) (*QueryGasTanksResponse, error) {
	out := new(QueryGasTanksResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasTanks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasTanksByProvider(ctx context.Context, in *QueryGasTanksByProviderRequest, opts ...grpc.CallOption) (*QueryGasTanksByProviderResponse, error) {
	out := new(QueryGasTanksByProviderResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasTanksByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasConsumer(ctx context.Context, in *QueryGasConsumerRequest, opts ...grpc.CallOption) (*QueryGasConsumerResponse, error) {
	out := new(QueryGasConsumerResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasConsumers(ctx context.Context, in *QueryGasConsumersRequest, opts ...grpc.CallOption) (*QueryGasConsumersResponse, error) {
	out := new(QueryGasConsumersResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasConsumers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasConsumersByGasTankID(ctx context.Context, in *QueryGasConsumersByGasTankIDRequest, opts ...grpc.CallOption) (*QueryGasConsumersByGasTankIDResponse, error) {
	out := new(QueryGasConsumersByGasTankIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasConsumersByGasTankID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasTankIdsForAllTXC(ctx context.Context, in *QueryGasTankIdsForAllTXC, opts ...grpc.CallOption) (*QueryGasTankIdsForAllTXCResponse, error) {
	out := new(QueryGasTankIdsForAllTXCResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Query/GasTankIdsForAllTXC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// MessagesAndContracts return all cosmos.base.v1beta1.Msg messages and available contract details
	MessagesAndContracts(context.Context, *QueryMessagesAndContractsRequest) (*QueryMessagesAndContractsResponse, error)
	// GasTank returns gas tank details
	GasTank(context.Context, *QueryGasTankRequest) (*QueryGasTankResponse, error)
	// GasTanks return details of all the gas tanks
	GasTanks(context.Context, *QueryGasTanksRequest) (*QueryGasTanksResponse, error)
	// GasTanksByProvider return details of all the gas tanks for the given provider
	GasTanksByProvider(context.Context, *QueryGasTanksByProviderRequest) (*QueryGasTanksByProviderResponse, error)
	// GasConsumer returns gas consumer details
	GasConsumer(context.Context, *QueryGasConsumerRequest) (*QueryGasConsumerResponse, error)
	// GasConsumers return details of all the gas consumers
	GasConsumers(context.Context, *QueryGasConsumersRequest) (*QueryGasConsumersResponse, error)
	// GasConsumersByGasTankID return details of all the gas consumers for the given tank ID
	GasConsumersByGasTankID(context.Context, *QueryGasConsumersByGasTankIDRequest) (*QueryGasConsumersByGasTankIDResponse, error)
	// GasTankIdsForAllTXC returns gas tanks ids with all available tx or contracts
	GasTankIdsForAllTXC(context.Context, *QueryGasTankIdsForAllTXC) (*QueryGasTankIdsForAllTXCResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) MessagesAndContracts(ctx context.Context, req *QueryMessagesAndContractsRequest) (*QueryMessagesAndContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAndContracts not implemented")
}
func (*UnimplementedQueryServer) GasTank(ctx context.Context, req *QueryGasTankRequest) (*QueryGasTankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasTank not implemented")
}
func (*UnimplementedQueryServer) GasTanks(ctx context.Context, req *QueryGasTanksRequest) (*QueryGasTanksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasTanks not implemented")
}
func (*UnimplementedQueryServer) GasTanksByProvider(ctx context.Context, req *QueryGasTanksByProviderRequest) (*QueryGasTanksByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasTanksByProvider not implemented")
}
func (*UnimplementedQueryServer) GasConsumer(ctx context.Context, req *QueryGasConsumerRequest) (*QueryGasConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasConsumer not implemented")
}
func (*UnimplementedQueryServer) GasConsumers(ctx context.Context, req *QueryGasConsumersRequest) (*QueryGasConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasConsumers not implemented")
}
func (*UnimplementedQueryServer) GasConsumersByGasTankID(ctx context.Context, req *QueryGasConsumersByGasTankIDRequest) (*QueryGasConsumersByGasTankIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasConsumersByGasTankID not implemented")
}
func (*UnimplementedQueryServer) GasTankIdsForAllTXC(ctx context.Context, req *QueryGasTankIdsForAllTXC) (*QueryGasTankIdsForAllTXCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasTankIdsForAllTXC not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MessagesAndContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessagesAndContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MessagesAndContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/MessagesAndContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MessagesAndContracts(ctx, req.(*QueryMessagesAndContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasTankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasTank(ctx, req.(*QueryGasTankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasTanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasTanksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasTanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasTanks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasTanks(ctx, req.(*QueryGasTanksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasTanksByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasTanksByProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasTanksByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasTanksByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasTanksByProvider(ctx, req.(*QueryGasTanksByProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasConsumer(ctx, req.(*QueryGasConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasConsumers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasConsumers(ctx, req.(*QueryGasConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasConsumersByGasTankID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasConsumersByGasTankIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasConsumersByGasTankID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasConsumersByGasTankID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasConsumersByGasTankID(ctx, req.(*QueryGasConsumersByGasTankIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasTankIdsForAllTXC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasTankIdsForAllTXC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasTankIdsForAllTXC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Query/GasTankIdsForAllTXC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasTankIdsForAllTXC(ctx, req.(*QueryGasTankIdsForAllTXC))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.gasless.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MessagesAndContracts",
			Handler:    _Query_MessagesAndContracts_Handler,
		},
		{
			MethodName: "GasTank",
			Handler:    _Query_GasTank_Handler,
		},
		{
			MethodName: "GasTanks",
			Handler:    _Query_GasTanks_Handler,
		},
		{
			MethodName: "GasTanksByProvider",
			Handler:    _Query_GasTanksByProvider_Handler,
		},
		{
			MethodName: "GasConsumer",
			Handler:    _Query_GasConsumer_Handler,
		},
		{
			MethodName: "GasConsumers",
			Handler:    _Query_GasConsumers_Handler,
		},
		{
			MethodName: "GasConsumersByGasTankID",
			Handler:    _Query_GasConsumersByGasTankID_Handler,
		},
		{
			MethodName: "GasTankIdsForAllTXC",
			Handler:    _Query_GasTankIdsForAllTXC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/gasless/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMessagesAndContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagesAndContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagesAndContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ContractDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lable) > 0 {
		i -= len(m.Lable)
		copy(dAtA[i:], m.Lable)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Lable)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMessagesAndContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMessagesAndContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMessagesAndContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GasTankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasTankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasTankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AuthorizedActors) > 0 {
		for iNdEx := len(m.AuthorizedActors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizedActors[iNdEx])
			copy(dAtA[i:], m.AuthorizedActors[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AuthorizedActors[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x30
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.GasTankBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Reserve) > 0 {
		i -= len(m.Reserve)
		copy(dAtA[i:], m.Reserve)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reserve)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasTankId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasTank.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGasTanksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTanksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTanksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTanksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTanksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTanksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasTanks) > 0 {
		for iNdEx := len(m.GasTanks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasTanks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTanksByProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTanksByProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTanksByProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTanksByProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTanksByProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTanksByProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasTanks) > 0 {
		for iNdEx := len(m.GasTanks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasTanks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasConsumer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasConsumers) > 0 {
		for iNdEx := len(m.GasConsumers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasConsumers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GasConsumersByGasTankIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasConsumersByGasTankIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasConsumersByGasTankIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Usage != nil {
		{
			size, err := m.Usage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.TotalFeesConsumed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalFeeConsumptionAllowed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TotalTxsMade != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalTxsMade))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalTxsAllowed != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalTxsAllowed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsBlocked {
		i--
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersByGasTankIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersByGasTankIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersByGasTankIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasTankId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasConsumersByGasTankIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasConsumersByGasTankIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasConsumersByGasTankIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasConsumers) > 0 {
		for iNdEx := len(m.GasConsumers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasConsumers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.OverallFeesConsumed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GasTankId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasTankIdsForAllTXC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTankIdsForAllTXC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTankIdsForAllTXC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGasTankIdsForAllTXCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasTankIdsForAllTXCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasTankIdsForAllTXCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxToGtIds) > 0 {
		for iNdEx := len(m.TxToGtIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxToGtIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMessagesAndContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ContractDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovQuery(uint64(m.CodeId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Lable)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMessagesAndContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GasTankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reserve)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.GasTankBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsActive {
		n += 2
	}
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovQuery(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.AuthorizedActors) > 0 {
		for _, s := range m.AuthorizedActors {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasTankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovQuery(uint64(m.GasTankId))
	}
	return n
}

func (m *QueryGasTankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasTank.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGasTanksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasTanksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasTanks) > 0 {
		for _, e := range m.GasTanks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasTanksByProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasTanksByProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasTanks) > 0 {
		for _, e := range m.GasTanks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGasConsumerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasConsumer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGasConsumersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasConsumers) > 0 {
		for _, e := range m.GasConsumers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GasConsumersByGasTankIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsBlocked {
		n += 2
	}
	if m.TotalTxsAllowed != 0 {
		n += 1 + sovQuery(uint64(m.TotalTxsAllowed))
	}
	if m.TotalTxsMade != 0 {
		n += 1 + sovQuery(uint64(m.TotalTxsMade))
	}
	l = m.TotalFeeConsumptionAllowed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalFeesConsumed.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasConsumersByGasTankIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovQuery(uint64(m.GasTankId))
	}
	return n
}

func (m *QueryGasConsumersByGasTankIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovQuery(uint64(m.GasTankId))
	}
	l = m.OverallFeesConsumed.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.GasConsumers) > 0 {
		for _, e := range m.GasConsumers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGasTankIdsForAllTXC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGasTankIdsForAllTXCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxToGtIds) > 0 {
		for _, e := range m.TxToGtIds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagesAndContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagesAndContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagesAndContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMessagesAndContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMessagesAndContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMessagesAndContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &ContractDetails{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasTankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasTankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasTankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasTankBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedActors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedActors = append(m.AuthorizedActors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasTank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTanksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTanksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTanksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTanksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTanksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTanksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTanks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasTanks = append(m.GasTanks, GasTankResponse{})
			if err := m.GasTanks[len(m.GasTanks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTanksByProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTanksByProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTanksByProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTanksByProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTanksByProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTanksByProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTanks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasTanks = append(m.GasTanks, GasTankResponse{})
			if err := m.GasTanks[len(m.GasTanks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasConsumers = append(m.GasConsumers, GasConsumer{})
			if err := m.GasConsumers[len(m.GasConsumers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasConsumersByGasTankIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasConsumersByGasTankIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasConsumersByGasTankIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTxsAllowed", wireType)
			}
			m.TotalTxsAllowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTxsAllowed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTxsMade", wireType)
			}
			m.TotalTxsMade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTxsMade |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFeeConsumptionAllowed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFeeConsumptionAllowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFeesConsumed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFeesConsumed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersByGasTankIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersByGasTankIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersByGasTankIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasConsumersByGasTankIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasConsumersByGasTankIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasConsumersByGasTankIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverallFeesConsumed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OverallFeesConsumed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasConsumers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasConsumers = append(m.GasConsumers, GasConsumersByGasTankIDResponse{})
			if err := m.GasConsumers[len(m.GasConsumers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTankIdsForAllTXC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTankIdsForAllTXC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTankIdsForAllTXC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasTankIdsForAllTXCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasTankIdsForAllTXCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasTankIdsForAllTXCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxToGtIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxToGtIds = append(m.TxToGtIds, &TxGTIDs{})
			if err := m.TxToGtIds[len(m.TxToGtIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
