// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/gasless/v1beta1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateGasProvider defines an SDK message for creating a new GasProvider.
type MsgCreateGasProvider struct {
	// creator specifies the bech32-encoded address that is the gas provider.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// fee_denom specifies the denom of the gas deposit coin
	FeeDenom string `protobuf:"bytes,2,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
	// max_fee_usage_per_tx specifies the maximum fee allowed for each tx
	MaxFeeUsagePerTx cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	// max_txs_count_per_consumer specifies the number of txs allowed for each consumer
	MaxTxsCountPerConsumer uint64 `protobuf:"varint,4,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	// max_fee_usage_per_consumer specifies the maximum fee consumption allowed for each consumer
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	// txs_allowed specifies txs paths allowed to consume gas from the gas tank
	TxsAllowed []string `protobuf:"bytes,6,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	// contracts_allowed specifies wasm contracts allowed to consume gas from the gas tank
	ContractsAllowed []string `protobuf:"bytes,7,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
	// gas_deposit specifies the initial desposit in the gas tank
	GasDeposit types.Coin `protobuf:"bytes,8,opt,name=gas_deposit,json=gasDeposit,proto3" json:"gas_deposit"`
}

func (m *MsgCreateGasProvider) Reset()         { *m = MsgCreateGasProvider{} }
func (m *MsgCreateGasProvider) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGasProvider) ProtoMessage()    {}
func (*MsgCreateGasProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{0}
}
func (m *MsgCreateGasProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGasProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGasProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGasProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGasProvider.Merge(m, src)
}
func (m *MsgCreateGasProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGasProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGasProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGasProvider proto.InternalMessageInfo

func (m *MsgCreateGasProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGasProvider) GetFeeDenom() string {
	if m != nil {
		return m.FeeDenom
	}
	return ""
}

func (m *MsgCreateGasProvider) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *MsgCreateGasProvider) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *MsgCreateGasProvider) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

func (m *MsgCreateGasProvider) GetGasDeposit() types.Coin {
	if m != nil {
		return m.GasDeposit
	}
	return types.Coin{}
}

type MsgCreateGasProviderResponse struct {
}

func (m *MsgCreateGasProviderResponse) Reset()         { *m = MsgCreateGasProviderResponse{} }
func (m *MsgCreateGasProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGasProviderResponse) ProtoMessage()    {}
func (*MsgCreateGasProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{1}
}
func (m *MsgCreateGasProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGasProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGasProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGasProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGasProviderResponse.Merge(m, src)
}
func (m *MsgCreateGasProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGasProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGasProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGasProviderResponse proto.InternalMessageInfo

// MsgAuthorizeActors defines the SDK message for authorizing accounts to take actions on provider's behalf
type MsgAuthorizeActors struct {
	// gas_provider_id specifies the id of the gas provider
	GasProviderId uint64 `protobuf:"varint,1,opt,name=gas_provider_id,json=gasProviderId,proto3" json:"gas_provider_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// actors specifies the list of bech32-encoded address allowed to take actions
	Actors []string `protobuf:"bytes,3,rep,name=actors,proto3" json:"actors,omitempty"`
}

func (m *MsgAuthorizeActors) Reset()         { *m = MsgAuthorizeActors{} }
func (m *MsgAuthorizeActors) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeActors) ProtoMessage()    {}
func (*MsgAuthorizeActors) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{2}
}
func (m *MsgAuthorizeActors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeActors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeActors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeActors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeActors.Merge(m, src)
}
func (m *MsgAuthorizeActors) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeActors) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeActors.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeActors proto.InternalMessageInfo

func (m *MsgAuthorizeActors) GetGasProviderId() uint64 {
	if m != nil {
		return m.GasProviderId
	}
	return 0
}

func (m *MsgAuthorizeActors) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgAuthorizeActors) GetActors() []string {
	if m != nil {
		return m.Actors
	}
	return nil
}

type MsgAuthorizeActorsResponse struct {
}

func (m *MsgAuthorizeActorsResponse) Reset()         { *m = MsgAuthorizeActorsResponse{} }
func (m *MsgAuthorizeActorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeActorsResponse) ProtoMessage()    {}
func (*MsgAuthorizeActorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{3}
}
func (m *MsgAuthorizeActorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeActorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeActorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeActorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeActorsResponse.Merge(m, src)
}
func (m *MsgAuthorizeActorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeActorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeActorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeActorsResponse proto.InternalMessageInfo

// MsgUpdateGasProviderStatus defines an SDK message for updating the status of gas tank.
type MsgUpdateGasProviderStatus struct {
	// gas_provider_id specifies the id of the gas provider
	GasProviderId uint64 `protobuf:"varint,1,opt,name=gas_provider_id,json=gasProviderId,proto3" json:"gas_provider_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *MsgUpdateGasProviderStatus) Reset()         { *m = MsgUpdateGasProviderStatus{} }
func (m *MsgUpdateGasProviderStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasProviderStatus) ProtoMessage()    {}
func (*MsgUpdateGasProviderStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{4}
}
func (m *MsgUpdateGasProviderStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasProviderStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasProviderStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasProviderStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasProviderStatus.Merge(m, src)
}
func (m *MsgUpdateGasProviderStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasProviderStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasProviderStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasProviderStatus proto.InternalMessageInfo

func (m *MsgUpdateGasProviderStatus) GetGasProviderId() uint64 {
	if m != nil {
		return m.GasProviderId
	}
	return 0
}

func (m *MsgUpdateGasProviderStatus) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type MsgUpdateGasProviderStatusResponse struct {
}

func (m *MsgUpdateGasProviderStatusResponse) Reset()         { *m = MsgUpdateGasProviderStatusResponse{} }
func (m *MsgUpdateGasProviderStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasProviderStatusResponse) ProtoMessage()    {}
func (*MsgUpdateGasProviderStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{5}
}
func (m *MsgUpdateGasProviderStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasProviderStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasProviderStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasProviderStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasProviderStatusResponse.Merge(m, src)
}
func (m *MsgUpdateGasProviderStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasProviderStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasProviderStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasProviderStatusResponse proto.InternalMessageInfo

// MsgUpdateGasProviderConfig defines an SDK message for updating the configs of gas provider.
type MsgUpdateGasProviderConfig struct {
	// gas_provider_id specifies the id of the gas provider
	GasProviderId uint64 `protobuf:"varint,1,opt,name=gas_provider_id,json=gasProviderId,proto3" json:"gas_provider_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// max_fee_usage_per_tx specifies the maximum fee allowed for each tx
	MaxFeeUsagePerTx cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	// max_txs_count_per_consumer specifies the number of txs allowed for each consumer
	MaxTxsCountPerConsumer uint64 `protobuf:"varint,4,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	// max_fee_usage_per_consumer specifies the maximum fee consumption allowed for each consumer
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	// txs_allowed specifies txs paths allowed to consume gas from the gas tank
	TxsAllowed []string `protobuf:"bytes,6,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	// contracts_allowed specifies wasm contracts allowed to consume gas from the gas tank
	ContractsAllowed []string `protobuf:"bytes,7,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
}

func (m *MsgUpdateGasProviderConfig) Reset()         { *m = MsgUpdateGasProviderConfig{} }
func (m *MsgUpdateGasProviderConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasProviderConfig) ProtoMessage()    {}
func (*MsgUpdateGasProviderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{6}
}
func (m *MsgUpdateGasProviderConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasProviderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasProviderConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasProviderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasProviderConfig.Merge(m, src)
}
func (m *MsgUpdateGasProviderConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasProviderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasProviderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasProviderConfig proto.InternalMessageInfo

func (m *MsgUpdateGasProviderConfig) GetGasProviderId() uint64 {
	if m != nil {
		return m.GasProviderId
	}
	return 0
}

func (m *MsgUpdateGasProviderConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgUpdateGasProviderConfig) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *MsgUpdateGasProviderConfig) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *MsgUpdateGasProviderConfig) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

type MsgUpdateGasProviderConfigResponse struct {
}

func (m *MsgUpdateGasProviderConfigResponse) Reset()         { *m = MsgUpdateGasProviderConfigResponse{} }
func (m *MsgUpdateGasProviderConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasProviderConfigResponse) ProtoMessage()    {}
func (*MsgUpdateGasProviderConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{7}
}
func (m *MsgUpdateGasProviderConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasProviderConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasProviderConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasProviderConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasProviderConfigResponse.Merge(m, src)
}
func (m *MsgUpdateGasProviderConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasProviderConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasProviderConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasProviderConfigResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateGasProvider)(nil), "comdex.gasless.v1beta1.MsgCreateGasProvider")
	proto.RegisterType((*MsgCreateGasProviderResponse)(nil), "comdex.gasless.v1beta1.MsgCreateGasProviderResponse")
	proto.RegisterType((*MsgAuthorizeActors)(nil), "comdex.gasless.v1beta1.MsgAuthorizeActors")
	proto.RegisterType((*MsgAuthorizeActorsResponse)(nil), "comdex.gasless.v1beta1.MsgAuthorizeActorsResponse")
	proto.RegisterType((*MsgUpdateGasProviderStatus)(nil), "comdex.gasless.v1beta1.MsgUpdateGasProviderStatus")
	proto.RegisterType((*MsgUpdateGasProviderStatusResponse)(nil), "comdex.gasless.v1beta1.MsgUpdateGasProviderStatusResponse")
	proto.RegisterType((*MsgUpdateGasProviderConfig)(nil), "comdex.gasless.v1beta1.MsgUpdateGasProviderConfig")
	proto.RegisterType((*MsgUpdateGasProviderConfigResponse)(nil), "comdex.gasless.v1beta1.MsgUpdateGasProviderConfigResponse")
}

func init() { proto.RegisterFile("comdex/gasless/v1beta1/tx.proto", fileDescriptor_58c8d01c81a883a9) }

var fileDescriptor_58c8d01c81a883a9 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0xe3, 0x7f, 0xf2, 0xef, 0xc7, 0x54, 0xa8, 0xed, 0xa8, 0x04, 0x63, 0x8a, 0x13, 0x45,
	0x08, 0x45, 0x7c, 0xd8, 0x6a, 0x61, 0xd5, 0x15, 0x6d, 0x2a, 0x50, 0x85, 0x22, 0x55, 0xa6, 0x5d,
	0xc0, 0xc6, 0x4c, 0xec, 0x9b, 0xa9, 0x45, 0xec, 0x31, 0x33, 0x93, 0xd6, 0xf0, 0x06, 0x74, 0xc5,
	0x82, 0x37, 0x62, 0xd3, 0x65, 0x97, 0x88, 0x45, 0x85, 0xda, 0x17, 0x41, 0x63, 0xc7, 0x8e, 0xd2,
	0x26, 0x55, 0x23, 0x75, 0xc9, 0x2e, 0xd7, 0xf7, 0xdc, 0x33, 0xbf, 0xe4, 0xe4, 0x7a, 0x50, 0xcd,
	0x63, 0xa1, 0x0f, 0x89, 0x4d, 0x89, 0xe8, 0x81, 0x10, 0xf6, 0xe1, 0x5a, 0x07, 0x24, 0x59, 0xb3,
	0x65, 0x62, 0xc5, 0x9c, 0x49, 0x86, 0xab, 0x99, 0xc0, 0x1a, 0x08, 0xac, 0x81, 0xc0, 0x58, 0xa1,
	0x8c, 0xb2, 0x54, 0x62, 0xab, 0x4f, 0x99, 0xda, 0x30, 0x3d, 0x26, 0x42, 0x26, 0xec, 0x0e, 0x11,
	0x50, 0x78, 0x79, 0x2c, 0x88, 0xb2, 0x7e, 0xe3, 0x67, 0x19, 0xad, 0xb4, 0x05, 0x6d, 0x71, 0x20,
	0x12, 0xde, 0x10, 0xb1, 0xcb, 0xd9, 0x61, 0xe0, 0x03, 0xc7, 0x3a, 0x9a, 0xf5, 0xd4, 0x43, 0xc6,
	0x75, 0xad, 0xae, 0x35, 0xe7, 0x9d, 0xbc, 0xc4, 0x0f, 0xd0, 0x7c, 0x17, 0xc0, 0xf5, 0x21, 0x62,
	0xa1, 0xfe, 0x5f, 0xda, 0x9b, 0xeb, 0x02, 0x6c, 0xab, 0x1a, 0xb7, 0xd1, 0x4a, 0x48, 0x12, 0x57,
	0x09, 0xfa, 0x82, 0x50, 0x70, 0x63, 0xe0, 0xae, 0x4c, 0xf4, 0xb2, 0xd2, 0x6d, 0x3d, 0x3c, 0x39,
	0xab, 0x95, 0x7e, 0x9f, 0xd5, 0xee, 0x66, 0x54, 0xc2, 0xff, 0x64, 0x05, 0xcc, 0x0e, 0x89, 0x3c,
	0xb0, 0x76, 0x22, 0xe9, 0x2c, 0x85, 0x24, 0x79, 0x0d, 0xb0, 0xaf, 0x06, 0x77, 0x81, 0xef, 0x25,
	0x78, 0x03, 0x19, 0xca, 0x4e, 0x26, 0xc2, 0xf5, 0x58, 0x3f, 0x92, 0xa9, 0x9d, 0xc7, 0x22, 0xd1,
	0x0f, 0x81, 0xeb, 0x95, 0xba, 0xd6, 0xac, 0x38, 0xd5, 0x90, 0x24, 0x7b, 0x89, 0x68, 0xa9, 0xfe,
	0x2e, 0xf0, 0xd6, 0xa0, 0x8b, 0xdf, 0x67, 0xb3, 0xa3, 0x28, 0xc5, 0xec, 0xff, 0x37, 0x01, 0xaa,
	0x8e, 0x02, 0x15, 0xd6, 0x35, 0xb4, 0xa0, 0x90, 0x48, 0xaf, 0xc7, 0x8e, 0xc0, 0xd7, 0x67, 0xea,
	0xe5, 0xe6, 0xbc, 0x83, 0x64, 0x22, 0x36, 0xb3, 0x27, 0xf8, 0x29, 0x5a, 0xf6, 0x58, 0x24, 0x39,
	0xf1, 0xe4, 0x50, 0x36, 0x9b, 0xca, 0x96, 0x8a, 0x46, 0x2e, 0x7e, 0x85, 0x16, 0x28, 0x11, 0xae,
	0x0f, 0x31, 0x13, 0x81, 0xd4, 0xe7, 0xea, 0x5a, 0x73, 0x61, 0xfd, 0xbe, 0x95, 0x21, 0x59, 0x2a,
	0xb9, 0x3c, 0x64, 0xab, 0xc5, 0x82, 0x68, 0xab, 0xa2, 0xa0, 0x1d, 0x44, 0x89, 0xd8, 0xce, 0x46,
	0x1a, 0x26, 0x5a, 0x1d, 0x17, 0xa2, 0x03, 0x22, 0x66, 0x91, 0x80, 0x46, 0x8c, 0x70, 0x5b, 0xd0,
	0xcd, 0xbe, 0x3c, 0x60, 0x3c, 0xf8, 0x0a, 0x9b, 0x9e, 0x64, 0x5c, 0xe0, 0xc7, 0x68, 0x51, 0x9d,
	0x1b, 0x0f, 0xd4, 0x6e, 0xe0, 0xa7, 0x51, 0x57, 0x9c, 0x3b, 0x74, 0xe8, 0xb1, 0xe3, 0x63, 0x03,
	0xcd, 0xe5, 0x9a, 0x3c, 0xef, 0xbc, 0xc6, 0x55, 0x34, 0x43, 0x52, 0x37, 0xbd, 0x9c, 0x7e, 0xbb,
	0x41, 0xd5, 0x58, 0x45, 0xc6, 0xd5, 0x13, 0x0b, 0x9e, 0x8f, 0x69, 0x77, 0x3f, 0xf6, 0x47, 0x79,
	0xdf, 0x49, 0x22, 0xfb, 0xb7, 0xc2, 0xd5, 0x78, 0x84, 0x1a, 0x93, 0x4f, 0x28, 0x38, 0x7e, 0x94,
	0xc7, 0x83, 0xb4, 0x58, 0xd4, 0x0d, 0xe8, 0xad, 0xfc, 0x40, 0xff, 0x16, 0x62, 0xea, 0x85, 0x98,
	0x14, 0x5e, 0x96, 0x4a, 0x1e, 0xde, 0xfa, 0x71, 0x05, 0x95, 0xdb, 0x82, 0xe2, 0x23, 0xb4, 0x7c,
	0xf5, 0xf5, 0xf5, 0xcc, 0x1a, 0xff, 0x9a, 0xb4, 0xc6, 0xed, 0x89, 0xf1, 0x72, 0x1a, 0x75, 0x0e,
	0x80, 0x3f, 0xa3, 0xc5, 0xcb, 0x2b, 0xf5, 0xe4, 0x1a, 0xa3, 0x4b, 0x5a, 0x63, 0xfd, 0xe6, 0xda,
	0xe2, 0xc8, 0x6f, 0x1a, 0xba, 0x37, 0x69, 0x6d, 0xae, 0xf3, 0x9b, 0x30, 0x63, 0x6c, 0x4c, 0x3f,
	0x53, 0xb0, 0x1c, 0x6b, 0x48, 0x9f, 0x90, 0xd1, 0x94, 0x30, 0xd9, 0xd0, 0x74, 0x30, 0xa3, 0x7f,
	0x86, 0xad, 0xb7, 0x27, 0xe7, 0xa6, 0x76, 0x7a, 0x6e, 0x6a, 0x7f, 0xce, 0x4d, 0xed, 0xfb, 0x85,
	0x59, 0x3a, 0xbd, 0x30, 0x4b, 0xbf, 0x2e, 0xcc, 0xd2, 0x87, 0x35, 0x1a, 0xc8, 0x83, 0x7e, 0x47,
	0x79, 0xdb, 0x99, 0xff, 0x73, 0xd6, 0xed, 0x06, 0x5e, 0x40, 0x7a, 0x83, 0xda, 0x1e, 0xde, 0xb6,
	0xf2, 0x4b, 0x0c, 0xa2, 0x33, 0x93, 0xde, 0x8d, 0x2f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe1,
	0xd3, 0xd3, 0x4b, 0x8c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateGasProvider defines a method for creating a new gas provider
	CreateGasProvider(ctx context.Context, in *MsgCreateGasProvider, opts ...grpc.CallOption) (*MsgCreateGasProviderResponse, error)
	// AuthorizeActors defines a method for authorizing accounts to take actions on creator's behalf
	AuthorizeActors(ctx context.Context, in *MsgAuthorizeActors, opts ...grpc.CallOption) (*MsgAuthorizeActorsResponse, error)
	// UpdateGasProviderStatus defines a method for marking gas tank as active or inactive
	UpdateGasProviderStatus(ctx context.Context, in *MsgUpdateGasProviderStatus, opts ...grpc.CallOption) (*MsgUpdateGasProviderStatusResponse, error)
	// UpdateGasProviderConfigs defines a method for updating the configs of gas provider
	UpdateGasProviderConfigs(ctx context.Context, in *MsgUpdateGasProviderConfig, opts ...grpc.CallOption) (*MsgUpdateGasProviderConfigResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateGasProvider(ctx context.Context, in *MsgCreateGasProvider, opts ...grpc.CallOption) (*MsgCreateGasProviderResponse, error) {
	out := new(MsgCreateGasProviderResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/CreateGasProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AuthorizeActors(ctx context.Context, in *MsgAuthorizeActors, opts ...grpc.CallOption) (*MsgAuthorizeActorsResponse, error) {
	out := new(MsgAuthorizeActorsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/AuthorizeActors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGasProviderStatus(ctx context.Context, in *MsgUpdateGasProviderStatus, opts ...grpc.CallOption) (*MsgUpdateGasProviderStatusResponse, error) {
	out := new(MsgUpdateGasProviderStatusResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UpdateGasProviderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGasProviderConfigs(ctx context.Context, in *MsgUpdateGasProviderConfig, opts ...grpc.CallOption) (*MsgUpdateGasProviderConfigResponse, error) {
	out := new(MsgUpdateGasProviderConfigResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UpdateGasProviderConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateGasProvider defines a method for creating a new gas provider
	CreateGasProvider(context.Context, *MsgCreateGasProvider) (*MsgCreateGasProviderResponse, error)
	// AuthorizeActors defines a method for authorizing accounts to take actions on creator's behalf
	AuthorizeActors(context.Context, *MsgAuthorizeActors) (*MsgAuthorizeActorsResponse, error)
	// UpdateGasProviderStatus defines a method for marking gas tank as active or inactive
	UpdateGasProviderStatus(context.Context, *MsgUpdateGasProviderStatus) (*MsgUpdateGasProviderStatusResponse, error)
	// UpdateGasProviderConfigs defines a method for updating the configs of gas provider
	UpdateGasProviderConfigs(context.Context, *MsgUpdateGasProviderConfig) (*MsgUpdateGasProviderConfigResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateGasProvider(ctx context.Context, req *MsgCreateGasProvider) (*MsgCreateGasProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasProvider not implemented")
}
func (*UnimplementedMsgServer) AuthorizeActors(ctx context.Context, req *MsgAuthorizeActors) (*MsgAuthorizeActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeActors not implemented")
}
func (*UnimplementedMsgServer) UpdateGasProviderStatus(ctx context.Context, req *MsgUpdateGasProviderStatus) (*MsgUpdateGasProviderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasProviderStatus not implemented")
}
func (*UnimplementedMsgServer) UpdateGasProviderConfigs(ctx context.Context, req *MsgUpdateGasProviderConfig) (*MsgUpdateGasProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasProviderConfigs not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateGasProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGasProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGasProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/CreateGasProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGasProvider(ctx, req.(*MsgCreateGasProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AuthorizeActors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizeActors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AuthorizeActors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/AuthorizeActors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AuthorizeActors(ctx, req.(*MsgAuthorizeActors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGasProviderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGasProviderStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGasProviderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UpdateGasProviderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGasProviderStatus(ctx, req.(*MsgUpdateGasProviderStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGasProviderConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGasProviderConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGasProviderConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UpdateGasProviderConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGasProviderConfigs(ctx, req.(*MsgUpdateGasProviderConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.gasless.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGasProvider",
			Handler:    _Msg_CreateGasProvider_Handler,
		},
		{
			MethodName: "AuthorizeActors",
			Handler:    _Msg_AuthorizeActors_Handler,
		},
		{
			MethodName: "UpdateGasProviderStatus",
			Handler:    _Msg_UpdateGasProviderStatus_Handler,
		},
		{
			MethodName: "UpdateGasProviderConfigs",
			Handler:    _Msg_UpdateGasProviderConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/gasless/v1beta1/tx.proto",
}

func (m *MsgCreateGasProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGasProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGasProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGasProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGasProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGasProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeActors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeActors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeActors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actors) > 0 {
		for iNdEx := len(m.Actors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actors[iNdEx])
			copy(dAtA[i:], m.Actors[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Actors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasProviderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeActorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeActorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeActorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasProviderStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasProviderStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasProviderStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasProviderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasProviderStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasProviderStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasProviderStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasProviderConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasProviderConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasProviderConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasProviderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasProviderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasProviderConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasProviderConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasProviderConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateGasProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovTx(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.GasDeposit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateGasProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAuthorizeActors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasProviderId != 0 {
		n += 1 + sovTx(uint64(m.GasProviderId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Actors) > 0 {
		for _, s := range m.Actors {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAuthorizeActorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGasProviderStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasProviderId != 0 {
		n += 1 + sovTx(uint64(m.GasProviderId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGasProviderStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGasProviderConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasProviderId != 0 {
		n += 1 + sovTx(uint64(m.GasProviderId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovTx(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateGasProviderConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateGasProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGasProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGasProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGasProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGasProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGasProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeActors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeActors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeActors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProviderId", wireType)
			}
			m.GasProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasProviderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actors = append(m.Actors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeActorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeActorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeActorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasProviderStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasProviderStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasProviderStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProviderId", wireType)
			}
			m.GasProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasProviderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasProviderStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasProviderStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasProviderStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasProviderConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasProviderConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasProviderConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProviderId", wireType)
			}
			m.GasProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasProviderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasProviderConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasProviderConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasProviderConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
