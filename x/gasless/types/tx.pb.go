// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/gasless/v1beta1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateGasTank defines an SDK message for creating a new GasTank.
type MsgCreateGasTank struct {
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// fee_denom specifies the denom of the gas deposit coin
	FeeDenom string `protobuf:"bytes,2,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
	// max_fee_usage_per_tx specifies the maximum fee allowed for each tx
	MaxFeeUsagePerTx cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	// max_txs_count_per_consumer specifies the number of txs allowed for each consumer
	MaxTxsCountPerConsumer uint64 `protobuf:"varint,4,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	// max_fee_usage_per_consumer specifies the maximum fee consumption allowed for each consumer
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	// txs_allowed specifies txs paths allowed to consume gas from the gas tank
	TxsAllowed []string `protobuf:"bytes,6,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	// contracts_allowed specifies wasm contracts allowed to consume gas from the gas tank
	ContractsAllowed []string `protobuf:"bytes,7,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
	// gas_deposit specifies the initial desposit in the gas tank
	GasDeposit types.Coin `protobuf:"bytes,8,opt,name=gas_deposit,json=gasDeposit,proto3" json:"gas_deposit"`
}

func (m *MsgCreateGasTank) Reset()         { *m = MsgCreateGasTank{} }
func (m *MsgCreateGasTank) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGasTank) ProtoMessage()    {}
func (*MsgCreateGasTank) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{0}
}
func (m *MsgCreateGasTank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGasTank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGasTank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGasTank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGasTank.Merge(m, src)
}
func (m *MsgCreateGasTank) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGasTank) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGasTank.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGasTank proto.InternalMessageInfo

func (m *MsgCreateGasTank) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgCreateGasTank) GetFeeDenom() string {
	if m != nil {
		return m.FeeDenom
	}
	return ""
}

func (m *MsgCreateGasTank) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *MsgCreateGasTank) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *MsgCreateGasTank) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

func (m *MsgCreateGasTank) GetGasDeposit() types.Coin {
	if m != nil {
		return m.GasDeposit
	}
	return types.Coin{}
}

type MsgCreateGasTankResponse struct {
}

func (m *MsgCreateGasTankResponse) Reset()         { *m = MsgCreateGasTankResponse{} }
func (m *MsgCreateGasTankResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGasTankResponse) ProtoMessage()    {}
func (*MsgCreateGasTankResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{1}
}
func (m *MsgCreateGasTankResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGasTankResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGasTankResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGasTankResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGasTankResponse.Merge(m, src)
}
func (m *MsgCreateGasTankResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGasTankResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGasTankResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGasTankResponse proto.InternalMessageInfo

// MsgAuthorizeActors defines the SDK message for authorizing accounts to take actions on provider's behalf
type MsgAuthorizeActors struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// actors specifies the list of bech32-encoded address allowed to take actions
	Actors []string `protobuf:"bytes,3,rep,name=actors,proto3" json:"actors,omitempty"`
}

func (m *MsgAuthorizeActors) Reset()         { *m = MsgAuthorizeActors{} }
func (m *MsgAuthorizeActors) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeActors) ProtoMessage()    {}
func (*MsgAuthorizeActors) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{2}
}
func (m *MsgAuthorizeActors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeActors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeActors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeActors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeActors.Merge(m, src)
}
func (m *MsgAuthorizeActors) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeActors) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeActors.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeActors proto.InternalMessageInfo

func (m *MsgAuthorizeActors) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgAuthorizeActors) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgAuthorizeActors) GetActors() []string {
	if m != nil {
		return m.Actors
	}
	return nil
}

type MsgAuthorizeActorsResponse struct {
}

func (m *MsgAuthorizeActorsResponse) Reset()         { *m = MsgAuthorizeActorsResponse{} }
func (m *MsgAuthorizeActorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeActorsResponse) ProtoMessage()    {}
func (*MsgAuthorizeActorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{3}
}
func (m *MsgAuthorizeActorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeActorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeActorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeActorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeActorsResponse.Merge(m, src)
}
func (m *MsgAuthorizeActorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeActorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeActorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeActorsResponse proto.InternalMessageInfo

// MsgUpdateGasTankStatus defines an SDK message for updating the status of gas tank.
type MsgUpdateGasTankStatus struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *MsgUpdateGasTankStatus) Reset()         { *m = MsgUpdateGasTankStatus{} }
func (m *MsgUpdateGasTankStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasTankStatus) ProtoMessage()    {}
func (*MsgUpdateGasTankStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{4}
}
func (m *MsgUpdateGasTankStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasTankStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasTankStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasTankStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasTankStatus.Merge(m, src)
}
func (m *MsgUpdateGasTankStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasTankStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasTankStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasTankStatus proto.InternalMessageInfo

func (m *MsgUpdateGasTankStatus) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgUpdateGasTankStatus) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type MsgUpdateGasTankStatusResponse struct {
}

func (m *MsgUpdateGasTankStatusResponse) Reset()         { *m = MsgUpdateGasTankStatusResponse{} }
func (m *MsgUpdateGasTankStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasTankStatusResponse) ProtoMessage()    {}
func (*MsgUpdateGasTankStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{5}
}
func (m *MsgUpdateGasTankStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasTankStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasTankStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasTankStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasTankStatusResponse.Merge(m, src)
}
func (m *MsgUpdateGasTankStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasTankStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasTankStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasTankStatusResponse proto.InternalMessageInfo

// MsgUpdateGasTankConfig defines an SDK message for updating the configs of gas tank.
type MsgUpdateGasTankConfig struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// max_fee_usage_per_tx specifies the maximum fee allowed for each tx
	MaxFeeUsagePerTx cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_fee_usage_per_tx,json=maxFeeUsagePerTx,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_tx"`
	// max_txs_count_per_consumer specifies the number of txs allowed for each consumer
	MaxTxsCountPerConsumer uint64 `protobuf:"varint,4,opt,name=max_txs_count_per_consumer,json=maxTxsCountPerConsumer,proto3" json:"max_txs_count_per_consumer,omitempty"`
	// max_fee_usage_per_consumer specifies the maximum fee consumption allowed for each consumer
	MaxFeeUsagePerConsumer cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=max_fee_usage_per_consumer,json=maxFeeUsagePerConsumer,proto3,customtype=cosmossdk.io/math.Int" json:"max_fee_usage_per_consumer"`
	// txs_allowed specifies txs paths allowed to consume gas from the gas tank
	TxsAllowed []string `protobuf:"bytes,6,rep,name=txs_allowed,json=txsAllowed,proto3" json:"txs_allowed,omitempty"`
	// contracts_allowed specifies wasm contracts allowed to consume gas from the gas tank
	ContractsAllowed []string `protobuf:"bytes,7,rep,name=contracts_allowed,json=contractsAllowed,proto3" json:"contracts_allowed,omitempty"`
}

func (m *MsgUpdateGasTankConfig) Reset()         { *m = MsgUpdateGasTankConfig{} }
func (m *MsgUpdateGasTankConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasTankConfig) ProtoMessage()    {}
func (*MsgUpdateGasTankConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{6}
}
func (m *MsgUpdateGasTankConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasTankConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasTankConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasTankConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasTankConfig.Merge(m, src)
}
func (m *MsgUpdateGasTankConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasTankConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasTankConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasTankConfig proto.InternalMessageInfo

func (m *MsgUpdateGasTankConfig) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgUpdateGasTankConfig) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgUpdateGasTankConfig) GetMaxTxsCountPerConsumer() uint64 {
	if m != nil {
		return m.MaxTxsCountPerConsumer
	}
	return 0
}

func (m *MsgUpdateGasTankConfig) GetTxsAllowed() []string {
	if m != nil {
		return m.TxsAllowed
	}
	return nil
}

func (m *MsgUpdateGasTankConfig) GetContractsAllowed() []string {
	if m != nil {
		return m.ContractsAllowed
	}
	return nil
}

type MsgUpdateGasTankConfigResponse struct {
}

func (m *MsgUpdateGasTankConfigResponse) Reset()         { *m = MsgUpdateGasTankConfigResponse{} }
func (m *MsgUpdateGasTankConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasTankConfigResponse) ProtoMessage()    {}
func (*MsgUpdateGasTankConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{7}
}
func (m *MsgUpdateGasTankConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasTankConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasTankConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasTankConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasTankConfigResponse.Merge(m, src)
}
func (m *MsgUpdateGasTankConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasTankConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasTankConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasTankConfigResponse proto.InternalMessageInfo

// MsgBlockConsumer defines an SDK message for blocking the  suspected malicious consumer.
type MsgBlockConsumer struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// actor specifies the bech32-encoded address that is the gas provider or authorized actor.
	Actor string `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// consumer specifies the bech32-encoded address of a consumer.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (m *MsgBlockConsumer) Reset()         { *m = MsgBlockConsumer{} }
func (m *MsgBlockConsumer) String() string { return proto.CompactTextString(m) }
func (*MsgBlockConsumer) ProtoMessage()    {}
func (*MsgBlockConsumer) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{8}
}
func (m *MsgBlockConsumer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockConsumer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockConsumer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockConsumer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockConsumer.Merge(m, src)
}
func (m *MsgBlockConsumer) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockConsumer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockConsumer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockConsumer proto.InternalMessageInfo

func (m *MsgBlockConsumer) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgBlockConsumer) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *MsgBlockConsumer) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

type MsgBlockConsumerResponse struct {
}

func (m *MsgBlockConsumerResponse) Reset()         { *m = MsgBlockConsumerResponse{} }
func (m *MsgBlockConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBlockConsumerResponse) ProtoMessage()    {}
func (*MsgBlockConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{9}
}
func (m *MsgBlockConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockConsumerResponse.Merge(m, src)
}
func (m *MsgBlockConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockConsumerResponse proto.InternalMessageInfo

// MsgUnblockConsumer defines an SDK message for unblocking consumer.
type MsgUnblockConsumer struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// actor specifies the bech32-encoded address that is the gas provider or authorized actor.
	Actor string `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// consumer specifies the bech32-encoded address of a consumer.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (m *MsgUnblockConsumer) Reset()         { *m = MsgUnblockConsumer{} }
func (m *MsgUnblockConsumer) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockConsumer) ProtoMessage()    {}
func (*MsgUnblockConsumer) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{10}
}
func (m *MsgUnblockConsumer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockConsumer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockConsumer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockConsumer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockConsumer.Merge(m, src)
}
func (m *MsgUnblockConsumer) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockConsumer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockConsumer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockConsumer proto.InternalMessageInfo

func (m *MsgUnblockConsumer) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgUnblockConsumer) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *MsgUnblockConsumer) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

type MsgUnblockConsumerResponse struct {
}

func (m *MsgUnblockConsumerResponse) Reset()         { *m = MsgUnblockConsumerResponse{} }
func (m *MsgUnblockConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockConsumerResponse) ProtoMessage()    {}
func (*MsgUnblockConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{11}
}
func (m *MsgUnblockConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockConsumerResponse.Merge(m, src)
}
func (m *MsgUnblockConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockConsumerResponse proto.InternalMessageInfo

// MsgUpdateGasConsumerLimit defines an SDK message for updating the consumption limits of gas consumer.
type MsgUpdateGasConsumerLimit struct {
	// gas_tank_id specifies the id of the gas tank
	GasTankId uint64 `protobuf:"varint,1,opt,name=gas_tank_id,json=gasTankId,proto3" json:"gas_tank_id,omitempty"`
	// provider specifies the bech32-encoded address that is the gas provider.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// consumer specifies the bech32-encoded address of a consumer.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// total_txs_allowed specifies the number of txs allowed for each consumer
	TotalTxsAllowed uint64 `protobuf:"varint,4,opt,name=total_txs_allowed,json=totalTxsAllowed,proto3" json:"total_txs_allowed,omitempty"`
	// total_fee_consumption_allowed specifies the maximum fee consumption allowed for each consumer
	TotalFeeConsumptionAllowed cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=total_fee_consumption_allowed,json=totalFeeConsumptionAllowed,proto3,customtype=cosmossdk.io/math.Int" json:"total_fee_consumption_allowed"`
}

func (m *MsgUpdateGasConsumerLimit) Reset()         { *m = MsgUpdateGasConsumerLimit{} }
func (m *MsgUpdateGasConsumerLimit) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasConsumerLimit) ProtoMessage()    {}
func (*MsgUpdateGasConsumerLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{12}
}
func (m *MsgUpdateGasConsumerLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasConsumerLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasConsumerLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasConsumerLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasConsumerLimit.Merge(m, src)
}
func (m *MsgUpdateGasConsumerLimit) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasConsumerLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasConsumerLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasConsumerLimit proto.InternalMessageInfo

func (m *MsgUpdateGasConsumerLimit) GetGasTankId() uint64 {
	if m != nil {
		return m.GasTankId
	}
	return 0
}

func (m *MsgUpdateGasConsumerLimit) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgUpdateGasConsumerLimit) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *MsgUpdateGasConsumerLimit) GetTotalTxsAllowed() uint64 {
	if m != nil {
		return m.TotalTxsAllowed
	}
	return 0
}

type MsgUpdateGasConsumerLimitResponse struct {
}

func (m *MsgUpdateGasConsumerLimitResponse) Reset()         { *m = MsgUpdateGasConsumerLimitResponse{} }
func (m *MsgUpdateGasConsumerLimitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGasConsumerLimitResponse) ProtoMessage()    {}
func (*MsgUpdateGasConsumerLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c8d01c81a883a9, []int{13}
}
func (m *MsgUpdateGasConsumerLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGasConsumerLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGasConsumerLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGasConsumerLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGasConsumerLimitResponse.Merge(m, src)
}
func (m *MsgUpdateGasConsumerLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGasConsumerLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGasConsumerLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGasConsumerLimitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateGasTank)(nil), "comdex.gasless.v1beta1.MsgCreateGasTank")
	proto.RegisterType((*MsgCreateGasTankResponse)(nil), "comdex.gasless.v1beta1.MsgCreateGasTankResponse")
	proto.RegisterType((*MsgAuthorizeActors)(nil), "comdex.gasless.v1beta1.MsgAuthorizeActors")
	proto.RegisterType((*MsgAuthorizeActorsResponse)(nil), "comdex.gasless.v1beta1.MsgAuthorizeActorsResponse")
	proto.RegisterType((*MsgUpdateGasTankStatus)(nil), "comdex.gasless.v1beta1.MsgUpdateGasTankStatus")
	proto.RegisterType((*MsgUpdateGasTankStatusResponse)(nil), "comdex.gasless.v1beta1.MsgUpdateGasTankStatusResponse")
	proto.RegisterType((*MsgUpdateGasTankConfig)(nil), "comdex.gasless.v1beta1.MsgUpdateGasTankConfig")
	proto.RegisterType((*MsgUpdateGasTankConfigResponse)(nil), "comdex.gasless.v1beta1.MsgUpdateGasTankConfigResponse")
	proto.RegisterType((*MsgBlockConsumer)(nil), "comdex.gasless.v1beta1.MsgBlockConsumer")
	proto.RegisterType((*MsgBlockConsumerResponse)(nil), "comdex.gasless.v1beta1.MsgBlockConsumerResponse")
	proto.RegisterType((*MsgUnblockConsumer)(nil), "comdex.gasless.v1beta1.MsgUnblockConsumer")
	proto.RegisterType((*MsgUnblockConsumerResponse)(nil), "comdex.gasless.v1beta1.MsgUnblockConsumerResponse")
	proto.RegisterType((*MsgUpdateGasConsumerLimit)(nil), "comdex.gasless.v1beta1.MsgUpdateGasConsumerLimit")
	proto.RegisterType((*MsgUpdateGasConsumerLimitResponse)(nil), "comdex.gasless.v1beta1.MsgUpdateGasConsumerLimitResponse")
}

func init() { proto.RegisterFile("comdex/gasless/v1beta1/tx.proto", fileDescriptor_58c8d01c81a883a9) }

var fileDescriptor_58c8d01c81a883a9 = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x41, 0x6f, 0xd3, 0x48,
	0x14, 0x8e, 0x9b, 0x34, 0xdb, 0x4c, 0xb5, 0x6a, 0xeb, 0xcd, 0x46, 0xae, 0x77, 0xeb, 0x64, 0xb3,
	0x97, 0xa8, 0x08, 0x9b, 0x14, 0x09, 0x09, 0x4e, 0x34, 0xa9, 0x8a, 0x2a, 0x88, 0x54, 0x85, 0xf4,
	0x00, 0x17, 0x33, 0xb1, 0x27, 0x8e, 0x95, 0xd8, 0x63, 0x3c, 0x93, 0x62, 0x90, 0x40, 0xe2, 0x82,
	0x38, 0xf2, 0x97, 0xb8, 0xf5, 0x82, 0xd4, 0x23, 0xe2, 0x50, 0xa1, 0xf6, 0x8f, 0x20, 0x7b, 0xe2,
	0x49, 0xed, 0xa6, 0x21, 0x51, 0xc5, 0x8d, 0x5b, 0x26, 0xf3, 0xbd, 0xef, 0x7d, 0x7e, 0xdf, 0x7b,
	0xcf, 0x06, 0x65, 0x03, 0x3b, 0x26, 0x0a, 0x34, 0x0b, 0x92, 0x21, 0x22, 0x44, 0x3b, 0xae, 0x77,
	0x11, 0x85, 0x75, 0x8d, 0x06, 0xaa, 0xe7, 0x63, 0x8a, 0xc5, 0x12, 0x03, 0xa8, 0x63, 0x80, 0x3a,
	0x06, 0xc8, 0x45, 0x0b, 0x5b, 0x38, 0x82, 0x68, 0xe1, 0x2f, 0x86, 0x96, 0x15, 0x03, 0x13, 0x07,
	0x13, 0xad, 0x0b, 0x09, 0xe2, 0x5c, 0x06, 0xb6, 0x5d, 0x76, 0x5f, 0xfd, 0x9c, 0x05, 0xeb, 0x2d,
	0x62, 0x35, 0x7d, 0x04, 0x29, 0x7a, 0x04, 0x49, 0x07, 0xba, 0x03, 0x51, 0x06, 0x2b, 0x9e, 0x8f,
	0x8f, 0x6d, 0x13, 0xf9, 0x92, 0x50, 0x11, 0x6a, 0x85, 0x36, 0x3f, 0x8b, 0xff, 0x80, 0x42, 0x0f,
	0x21, 0xdd, 0x44, 0x2e, 0x76, 0xa4, 0x25, 0x76, 0xd9, 0x43, 0x68, 0x2f, 0x3c, 0x8b, 0x2d, 0x50,
	0x74, 0x60, 0xa0, 0x87, 0x80, 0x11, 0x81, 0x16, 0xd2, 0x3d, 0xe4, 0xeb, 0x34, 0x90, 0xb2, 0x21,
	0xae, 0xb1, 0x75, 0x72, 0x56, 0xce, 0x7c, 0x3b, 0x2b, 0xff, 0xcd, 0x34, 0x11, 0x73, 0xa0, 0xda,
	0x58, 0x73, 0x20, 0xed, 0xab, 0x07, 0x2e, 0x6d, 0xaf, 0x3b, 0x30, 0xd8, 0x47, 0xe8, 0x28, 0x0c,
	0x3c, 0x44, 0x7e, 0x27, 0x10, 0x1f, 0x00, 0x39, 0xa4, 0xa3, 0x01, 0xd1, 0x0d, 0x3c, 0x72, 0x69,
	0x44, 0x67, 0x60, 0x97, 0x8c, 0x1c, 0xe4, 0x4b, 0xb9, 0x8a, 0x50, 0xcb, 0xb5, 0x4b, 0x0e, 0x0c,
	0x3a, 0x01, 0x69, 0x86, 0xf7, 0x87, 0xc8, 0x6f, 0x8e, 0x6f, 0xc5, 0x67, 0x2c, 0x36, 0x29, 0x85,
	0xc7, 0x2e, 0xcf, 0x23, 0xa8, 0x94, 0x14, 0xc4, 0xa9, 0xcb, 0x60, 0x35, 0x94, 0x04, 0x87, 0x43,
	0xfc, 0x0a, 0x99, 0x52, 0xbe, 0x92, 0xad, 0x15, 0xda, 0x80, 0x06, 0x64, 0x97, 0xfd, 0x23, 0xde,
	0x02, 0x1b, 0x06, 0x76, 0xa9, 0x0f, 0x0d, 0x3a, 0x81, 0xfd, 0x11, 0xc1, 0xd6, 0xf9, 0x45, 0x0c,
	0x7e, 0x08, 0x56, 0x2d, 0x48, 0x74, 0x13, 0x79, 0x98, 0xd8, 0x54, 0x5a, 0xa9, 0x08, 0xb5, 0xd5,
	0x9d, 0x4d, 0x95, 0x49, 0x52, 0x43, 0xdf, 0x62, 0x8b, 0xd5, 0x26, 0xb6, 0xdd, 0x46, 0x2e, 0x14,
	0xdd, 0x06, 0x16, 0x24, 0x7b, 0x2c, 0xa4, 0x2a, 0x03, 0x29, 0x6d, 0x61, 0x1b, 0x11, 0x0f, 0xbb,
	0x04, 0x55, 0xfb, 0x40, 0x6c, 0x11, 0x6b, 0x77, 0x44, 0xfb, 0xd8, 0xb7, 0xdf, 0xa0, 0x5d, 0x83,
	0x62, 0x9f, 0x88, 0x0a, 0xcb, 0x49, 0xa1, 0x3b, 0xd0, 0x6d, 0x33, 0xf2, 0x38, 0xd7, 0x2e, 0x58,
	0x2c, 0xf6, 0xc0, 0x4c, 0x34, 0xc0, 0x52, 0xaa, 0x01, 0x4a, 0x20, 0x0f, 0x23, 0x16, 0x29, 0x1b,
	0x3d, 0xd1, 0xf8, 0x54, 0xfd, 0x17, 0xc8, 0x57, 0x33, 0x71, 0x1d, 0x1d, 0x50, 0x6a, 0x11, 0xeb,
	0xc8, 0x33, 0x27, 0x1a, 0x9f, 0x52, 0x48, 0x47, 0x37, 0xd2, 0x52, 0xad, 0x00, 0x65, 0x3a, 0x2b,
	0xcf, 0xfb, 0x31, 0x7b, 0x35, 0x71, 0x13, 0xbb, 0x3d, 0xdb, 0xba, 0x51, 0x11, 0x7e, 0x37, 0xfa,
	0xc2, 0x8d, 0x3e, 0xcd, 0x2c, 0xe6, 0x04, 0x37, 0xcb, 0x8c, 0x76, 0x51, 0x63, 0x88, 0x8d, 0x01,
	0xd7, 0xf0, 0x33, 0x97, 0x8a, 0x60, 0x39, 0x6a, 0xc0, 0xb1, 0x45, 0xec, 0x10, 0x7a, 0xc7, 0x4b,
	0x90, 0x65, 0xde, 0xc5, 0xe7, 0xf1, 0xb8, 0x24, 0xb2, 0x70, 0x05, 0xbd, 0x68, 0x5c, 0x8e, 0xdc,
	0xee, 0x2f, 0xd6, 0xc0, 0x86, 0x25, 0x95, 0x87, 0xab, 0x78, 0xbf, 0x04, 0x36, 0x2f, 0x97, 0x2a,
	0x06, 0x3c, 0xb1, 0x1d, 0x9b, 0xde, 0xa8, 0x6f, 0x67, 0x68, 0x12, 0xb7, 0xc1, 0x06, 0xc5, 0x14,
	0x0e, 0xf5, 0xcb, 0x9e, 0xb3, 0xde, 0x5b, 0x8b, 0x2e, 0x3a, 0x13, 0xe3, 0x5f, 0x80, 0x2d, 0x86,
	0x0d, 0xdb, 0x8e, 0x31, 0x78, 0xd4, 0xc6, 0x2e, 0x8f, 0x9b, 0xab, 0xef, 0xe4, 0x88, 0x63, 0x1f,
	0xa1, 0xe6, 0x84, 0x21, 0xee, 0x96, 0xff, 0xc1, 0x7f, 0xd7, 0x96, 0x20, 0x2e, 0xd4, 0xce, 0x97,
	0x3c, 0xc8, 0xb6, 0x88, 0x25, 0x0e, 0xc0, 0x9f, 0xc9, 0x37, 0x58, 0x4d, 0x9d, 0xfe, 0x96, 0x54,
	0xd3, 0x8b, 0x52, 0xbe, 0x33, 0x2f, 0x32, 0x4e, 0x2a, 0xbe, 0x04, 0x6b, 0xe9, 0x7d, 0xba, 0x3d,
	0x83, 0x24, 0x85, 0x95, 0x77, 0xe6, 0xc7, 0xf2, 0x94, 0x6f, 0xc1, 0x5f, 0xd3, 0x56, 0xa7, 0x3a,
	0x83, 0x6a, 0x0a, 0x5e, 0xbe, 0xb7, 0x18, 0x9e, 0xa7, 0x7f, 0x07, 0x8a, 0x53, 0xc6, 0x76, 0x81,
	0xfc, 0x2c, 0x60, 0xfe, 0xfc, 0xc9, 0xbd, 0x10, 0xda, 0x9b, 0x5c, 0x0a, 0xb3, 0xec, 0x4d, 0x20,
	0x67, 0xda, 0x3b, 0x75, 0x05, 0x84, 0xf6, 0xa6, 0xe7, 0x7f, 0x96, 0xbd, 0x29, 0xec, 0x4c, 0x7b,
	0xaf, 0x99, 0x77, 0xf1, 0x83, 0x00, 0x4a, 0xd7, 0x0c, 0x7b, 0x7d, 0x9e, 0x92, 0x25, 0x42, 0xe4,
	0xfb, 0x0b, 0x87, 0xc4, 0x42, 0x1a, 0x8f, 0x4f, 0xce, 0x15, 0xe1, 0xf4, 0x5c, 0x11, 0xbe, 0x9f,
	0x2b, 0xc2, 0xa7, 0x0b, 0x25, 0x73, 0x7a, 0xa1, 0x64, 0xbe, 0x5e, 0x28, 0x99, 0xe7, 0x75, 0xcb,
	0xa6, 0xfd, 0x51, 0x37, 0xa4, 0xd6, 0x18, 0xfd, 0x6d, 0xdc, 0xeb, 0xd9, 0x86, 0x0d, 0x87, 0xe3,
	0xb3, 0x36, 0xf9, 0x66, 0xa5, 0xaf, 0x3d, 0x44, 0xba, 0xf9, 0xe8, 0x0b, 0xf3, 0xee, 0x8f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x5c, 0xa0, 0x4c, 0xd2, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateGasTank defines a method for creating a new gas tank
	CreateGasTank(ctx context.Context, in *MsgCreateGasTank, opts ...grpc.CallOption) (*MsgCreateGasTankResponse, error)
	// AuthorizeActors defines a method for authorizing accounts to take actions on provider's behalf
	AuthorizeActors(ctx context.Context, in *MsgAuthorizeActors, opts ...grpc.CallOption) (*MsgAuthorizeActorsResponse, error)
	// UpdateGasTankStatus defines a method for marking gas tank as active or inactive
	UpdateGasTankStatus(ctx context.Context, in *MsgUpdateGasTankStatus, opts ...grpc.CallOption) (*MsgUpdateGasTankStatusResponse, error)
	// UpdateGasTankConfigs defines a method for updating the configs of gas tank
	UpdateGasTankConfigs(ctx context.Context, in *MsgUpdateGasTankConfig, opts ...grpc.CallOption) (*MsgUpdateGasTankConfigResponse, error)
	// BlockConsumer defines a method for blocking a suspected malicious consumer
	BlockConsumer(ctx context.Context, in *MsgBlockConsumer, opts ...grpc.CallOption) (*MsgBlockConsumerResponse, error)
	// UnblockConsumer defines a method for unblocking consumer
	UnblockConsumer(ctx context.Context, in *MsgUnblockConsumer, opts ...grpc.CallOption) (*MsgUnblockConsumerResponse, error)
	// UpdateGasConsumerLimit defines a method for updating consumption limit of gas consumer
	UpdateGasConsumerLimit(ctx context.Context, in *MsgUpdateGasConsumerLimit, opts ...grpc.CallOption) (*MsgUpdateGasConsumerLimitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateGasTank(ctx context.Context, in *MsgCreateGasTank, opts ...grpc.CallOption) (*MsgCreateGasTankResponse, error) {
	out := new(MsgCreateGasTankResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/CreateGasTank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AuthorizeActors(ctx context.Context, in *MsgAuthorizeActors, opts ...grpc.CallOption) (*MsgAuthorizeActorsResponse, error) {
	out := new(MsgAuthorizeActorsResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/AuthorizeActors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGasTankStatus(ctx context.Context, in *MsgUpdateGasTankStatus, opts ...grpc.CallOption) (*MsgUpdateGasTankStatusResponse, error) {
	out := new(MsgUpdateGasTankStatusResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UpdateGasTankStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGasTankConfigs(ctx context.Context, in *MsgUpdateGasTankConfig, opts ...grpc.CallOption) (*MsgUpdateGasTankConfigResponse, error) {
	out := new(MsgUpdateGasTankConfigResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UpdateGasTankConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockConsumer(ctx context.Context, in *MsgBlockConsumer, opts ...grpc.CallOption) (*MsgBlockConsumerResponse, error) {
	out := new(MsgBlockConsumerResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/BlockConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockConsumer(ctx context.Context, in *MsgUnblockConsumer, opts ...grpc.CallOption) (*MsgUnblockConsumerResponse, error) {
	out := new(MsgUnblockConsumerResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UnblockConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGasConsumerLimit(ctx context.Context, in *MsgUpdateGasConsumerLimit, opts ...grpc.CallOption) (*MsgUpdateGasConsumerLimitResponse, error) {
	out := new(MsgUpdateGasConsumerLimitResponse)
	err := c.cc.Invoke(ctx, "/comdex.gasless.v1beta1.Msg/UpdateGasConsumerLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateGasTank defines a method for creating a new gas tank
	CreateGasTank(context.Context, *MsgCreateGasTank) (*MsgCreateGasTankResponse, error)
	// AuthorizeActors defines a method for authorizing accounts to take actions on provider's behalf
	AuthorizeActors(context.Context, *MsgAuthorizeActors) (*MsgAuthorizeActorsResponse, error)
	// UpdateGasTankStatus defines a method for marking gas tank as active or inactive
	UpdateGasTankStatus(context.Context, *MsgUpdateGasTankStatus) (*MsgUpdateGasTankStatusResponse, error)
	// UpdateGasTankConfigs defines a method for updating the configs of gas tank
	UpdateGasTankConfigs(context.Context, *MsgUpdateGasTankConfig) (*MsgUpdateGasTankConfigResponse, error)
	// BlockConsumer defines a method for blocking a suspected malicious consumer
	BlockConsumer(context.Context, *MsgBlockConsumer) (*MsgBlockConsumerResponse, error)
	// UnblockConsumer defines a method for unblocking consumer
	UnblockConsumer(context.Context, *MsgUnblockConsumer) (*MsgUnblockConsumerResponse, error)
	// UpdateGasConsumerLimit defines a method for updating consumption limit of gas consumer
	UpdateGasConsumerLimit(context.Context, *MsgUpdateGasConsumerLimit) (*MsgUpdateGasConsumerLimitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateGasTank(ctx context.Context, req *MsgCreateGasTank) (*MsgCreateGasTankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasTank not implemented")
}
func (*UnimplementedMsgServer) AuthorizeActors(ctx context.Context, req *MsgAuthorizeActors) (*MsgAuthorizeActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeActors not implemented")
}
func (*UnimplementedMsgServer) UpdateGasTankStatus(ctx context.Context, req *MsgUpdateGasTankStatus) (*MsgUpdateGasTankStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasTankStatus not implemented")
}
func (*UnimplementedMsgServer) UpdateGasTankConfigs(ctx context.Context, req *MsgUpdateGasTankConfig) (*MsgUpdateGasTankConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasTankConfigs not implemented")
}
func (*UnimplementedMsgServer) BlockConsumer(ctx context.Context, req *MsgBlockConsumer) (*MsgBlockConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockConsumer not implemented")
}
func (*UnimplementedMsgServer) UnblockConsumer(ctx context.Context, req *MsgUnblockConsumer) (*MsgUnblockConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockConsumer not implemented")
}
func (*UnimplementedMsgServer) UpdateGasConsumerLimit(ctx context.Context, req *MsgUpdateGasConsumerLimit) (*MsgUpdateGasConsumerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGasConsumerLimit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateGasTank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGasTank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGasTank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/CreateGasTank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGasTank(ctx, req.(*MsgCreateGasTank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AuthorizeActors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizeActors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AuthorizeActors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/AuthorizeActors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AuthorizeActors(ctx, req.(*MsgAuthorizeActors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGasTankStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGasTankStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGasTankStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UpdateGasTankStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGasTankStatus(ctx, req.(*MsgUpdateGasTankStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGasTankConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGasTankConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGasTankConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UpdateGasTankConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGasTankConfigs(ctx, req.(*MsgUpdateGasTankConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockConsumer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/BlockConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockConsumer(ctx, req.(*MsgBlockConsumer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockConsumer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UnblockConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockConsumer(ctx, req.(*MsgUnblockConsumer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGasConsumerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGasConsumerLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGasConsumerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.gasless.v1beta1.Msg/UpdateGasConsumerLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGasConsumerLimit(ctx, req.(*MsgUpdateGasConsumerLimit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.gasless.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGasTank",
			Handler:    _Msg_CreateGasTank_Handler,
		},
		{
			MethodName: "AuthorizeActors",
			Handler:    _Msg_AuthorizeActors_Handler,
		},
		{
			MethodName: "UpdateGasTankStatus",
			Handler:    _Msg_UpdateGasTankStatus_Handler,
		},
		{
			MethodName: "UpdateGasTankConfigs",
			Handler:    _Msg_UpdateGasTankConfigs_Handler,
		},
		{
			MethodName: "BlockConsumer",
			Handler:    _Msg_BlockConsumer_Handler,
		},
		{
			MethodName: "UnblockConsumer",
			Handler:    _Msg_UnblockConsumer_Handler,
		},
		{
			MethodName: "UpdateGasConsumerLimit",
			Handler:    _Msg_UpdateGasConsumerLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/gasless/v1beta1/tx.proto",
}

func (m *MsgCreateGasTank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGasTank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGasTank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateGasTankResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGasTankResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGasTankResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeActors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeActors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeActors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actors) > 0 {
		for iNdEx := len(m.Actors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actors[iNdEx])
			copy(dAtA[i:], m.Actors[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Actors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeActorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeActorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeActorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasTankStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasTankStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasTankStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasTankStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasTankStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasTankStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasTankConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasTankConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasTankConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractsAllowed) > 0 {
		for iNdEx := len(m.ContractsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractsAllowed[iNdEx])
			copy(dAtA[i:], m.ContractsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ContractsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TxsAllowed) > 0 {
		for iNdEx := len(m.TxsAllowed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxsAllowed[iNdEx])
			copy(dAtA[i:], m.TxsAllowed[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxsAllowed[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.MaxFeeUsagePerConsumer.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerConsumer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTxsCountPerConsumer != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxTxsCountPerConsumer))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MaxFeeUsagePerTx.Size()
		i -= size
		if _, err := m.MaxFeeUsagePerTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasTankConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasTankConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasTankConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockConsumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockConsumer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockConsumer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlockConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnblockConsumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockConsumer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockConsumer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Actor) > 0 {
		i -= len(m.Actor)
		copy(dAtA[i:], m.Actor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Actor)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnblockConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasConsumerLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasConsumerLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasConsumerLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalFeeConsumptionAllowed.Size()
		i -= size
		if _, err := m.TotalFeeConsumptionAllowed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.TotalTxsAllowed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalTxsAllowed))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Consumer) > 0 {
		i -= len(m.Consumer)
		copy(dAtA[i:], m.Consumer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Consumer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.GasTankId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasTankId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGasConsumerLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGasConsumerLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGasConsumerLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateGasTank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovTx(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.GasDeposit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateGasTankResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAuthorizeActors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Actors) > 0 {
		for _, s := range m.Actors {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAuthorizeActorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGasTankStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGasTankStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGasTankConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxFeeUsagePerTx.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MaxTxsCountPerConsumer != 0 {
		n += 1 + sovTx(uint64(m.MaxTxsCountPerConsumer))
	}
	l = m.MaxFeeUsagePerConsumer.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TxsAllowed) > 0 {
		for _, s := range m.TxsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ContractsAllowed) > 0 {
		for _, s := range m.ContractsAllowed {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateGasTankConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockConsumer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBlockConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnblockConsumer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnblockConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGasConsumerLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasTankId != 0 {
		n += 1 + sovTx(uint64(m.GasTankId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalTxsAllowed != 0 {
		n += 1 + sovTx(uint64(m.TotalTxsAllowed))
	}
	l = m.TotalFeeConsumptionAllowed.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateGasConsumerLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateGasTank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGasTank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGasTank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateGasTankResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGasTankResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGasTankResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeActors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeActors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeActors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actors = append(m.Actors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeActorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeActorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeActorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasTankStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasTankStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasTankStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasTankStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasTankStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasTankStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasTankConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasTankConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasTankConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxsCountPerConsumer", wireType)
			}
			m.MaxTxsCountPerConsumer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxsCountPerConsumer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeeUsagePerConsumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFeeUsagePerConsumer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsAllowed = append(m.TxsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractsAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractsAllowed = append(m.ContractsAllowed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasTankConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasTankConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasTankConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockConsumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockConsumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockConsumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockConsumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockConsumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockConsumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasConsumerLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasConsumerLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasConsumerLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasTankId", wireType)
			}
			m.GasTankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasTankId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTxsAllowed", wireType)
			}
			m.TotalTxsAllowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTxsAllowed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFeeConsumptionAllowed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFeeConsumptionAllowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGasConsumerLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGasConsumerLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGasConsumerLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
