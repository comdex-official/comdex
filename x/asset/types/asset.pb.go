// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/asset/v1beta1/asset.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Asset struct {
	Id                    uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Denom                 string                `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Decimals              cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=decimals,proto3,customtype=cosmossdk.io/math.Int" json:"decimals" yaml:"decimals"`
	IsOnChain             bool                  `protobuf:"varint,5,opt,name=is_on_chain,json=isOnChain,proto3" json:"is_on_chain,omitempty" yaml:"is_on_chain"`
	IsOraclePriceRequired bool                  `protobuf:"varint,6,opt,name=is_oracle_price_required,json=isOraclePriceRequired,proto3" json:"is_oracle_price_required,omitempty" yaml:"is_oracle_price_required"`
	IsCdpMintable         bool                  `protobuf:"varint,7,opt,name=is_cdp_mintable,json=isCdpMintable,proto3" json:"is_cdp_mintable,omitempty" yaml:"is_cdp_mintable"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_67277aee9bd3eed4, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Asset)(nil), "comdex.asset.v1beta1.Asset")
}

func init() { proto.RegisterFile("comdex/asset/v1beta1/asset.proto", fileDescriptor_67277aee9bd3eed4) }

var fileDescriptor_67277aee9bd3eed4 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x93, 0xae, 0x1d, 0x9b, 0x07, 0x14, 0x59, 0xdb, 0x14, 0xed, 0x10, 0x57, 0x99, 0x84,
	0x7a, 0x21, 0x61, 0x42, 0xe2, 0xc0, 0x8d, 0xee, 0x84, 0x04, 0x1a, 0xe4, 0x88, 0x90, 0x22, 0xd7,
	0xf6, 0xda, 0x4f, 0xc4, 0x71, 0x88, 0x3d, 0xc4, 0xde, 0x81, 0x03, 0x8f, 0xc1, 0xa3, 0xf4, 0xb8,
	0x23, 0xe2, 0x60, 0x41, 0xfb, 0x06, 0x79, 0x02, 0x14, 0x3b, 0x1b, 0x3d, 0xec, 0xe6, 0xef, 0xff,
	0xff, 0x7d, 0xbf, 0xcb, 0x67, 0x34, 0x61, 0x4a, 0x72, 0xf1, 0x2d, 0xa3, 0x5a, 0x0b, 0x93, 0x7d,
	0x3d, 0x9b, 0x0b, 0x43, 0xcf, 0xfc, 0x94, 0xd6, 0x8d, 0x32, 0x0a, 0x1f, 0x7a, 0x22, 0xf5, 0x59,
	0x4f, 0x9c, 0x1c, 0x2e, 0xd4, 0x42, 0x39, 0x20, 0xeb, 0x5e, 0x9e, 0x4d, 0xbe, 0xef, 0xa0, 0xd1,
	0xeb, 0x8e, 0xc3, 0x8f, 0xd1, 0x00, 0x78, 0x14, 0x4e, 0xc2, 0xe9, 0x30, 0x1f, 0x00, 0xc7, 0xa7,
	0x68, 0x58, 0x51, 0x29, 0xa2, 0xc1, 0x24, 0x9c, 0xee, 0xcf, 0xc6, 0xad, 0x25, 0x07, 0xd7, 0x54,
	0x96, 0xaf, 0x92, 0x2e, 0x4d, 0x72, 0x57, 0xe2, 0xa7, 0x68, 0xc4, 0x45, 0xa5, 0x64, 0xb4, 0xe3,
	0xa8, 0x27, 0xad, 0x25, 0x0f, 0x3d, 0xe5, 0xe2, 0x24, 0xf7, 0x35, 0x7e, 0x8b, 0xf6, 0xb8, 0x60,
	0x20, 0x69, 0xa9, 0xa3, 0xa1, 0x43, 0x9f, 0xaf, 0x2c, 0x09, 0x7e, 0x5b, 0x72, 0xc4, 0x94, 0x96,
	0x4a, 0x6b, 0xfe, 0x39, 0x05, 0x95, 0x49, 0x6a, 0x96, 0xe9, 0x9b, 0xca, 0xb4, 0x96, 0x8c, 0x6f,
	0x3d, 0x7e, 0x2d, 0xc9, 0xef, 0x0c, 0xf8, 0x25, 0x3a, 0x00, 0x5d, 0xa8, 0xaa, 0x60, 0x4b, 0x0a,
	0x55, 0x34, 0x9a, 0x84, 0xd3, 0xbd, 0xd9, 0x71, 0x6b, 0x09, 0xf6, 0x3b, 0x5b, 0x65, 0x92, 0xef,
	0x83, 0xbe, 0xa8, 0xce, 0xbb, 0x37, 0xfe, 0x84, 0xa2, 0xae, 0x6a, 0x28, 0x2b, 0x45, 0x51, 0x37,
	0xc0, 0x44, 0xd1, 0x88, 0x2f, 0x57, 0xd0, 0x08, 0x1e, 0xed, 0x3a, 0xc9, 0x69, 0x6b, 0x09, 0xf9,
	0x2f, 0xb9, 0x8f, 0x4c, 0xf2, 0x23, 0xd0, 0x17, 0xae, 0x79, 0xdf, 0x15, 0x79, 0x9f, 0xe3, 0x19,
	0x1a, 0x83, 0x2e, 0x18, 0xaf, 0x0b, 0x09, 0x95, 0xa1, 0xf3, 0x52, 0x44, 0x0f, 0x9c, 0xf4, 0xa4,
	0xb5, 0xe4, 0xf8, 0x4e, 0xba, 0x0d, 0x24, 0xf9, 0x23, 0xd0, 0xe7, 0xbc, 0x7e, 0xd7, 0xcf, 0xb3,
	0x0f, 0xab, 0xbf, 0x71, 0xf0, 0x73, 0x1d, 0x07, 0xab, 0x75, 0x1c, 0xde, 0xac, 0xe3, 0xf0, 0xcf,
	0x3a, 0x0e, 0x7f, 0x6c, 0xe2, 0xe0, 0x66, 0x13, 0x07, 0xbf, 0x36, 0x71, 0xf0, 0x31, 0x5b, 0x80,
	0x59, 0x5e, 0xcd, 0x53, 0xa6, 0x64, 0xe6, 0xef, 0xfc, 0x4c, 0x5d, 0x5e, 0x02, 0x03, 0x5a, 0xf6,
	0x73, 0x76, 0xfb, 0x37, 0xcc, 0x75, 0x2d, 0xf4, 0x7c, 0xd7, 0x1d, 0xfa, 0xc5, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x85, 0x74, 0x21, 0x5f, 0x38, 0x02, 0x00, 0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCdpMintable {
		i--
		if m.IsCdpMintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsOraclePriceRequired {
		i--
		if m.IsOraclePriceRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsOnChain {
		i--
		if m.IsOnChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Decimals.Size()
		i -= size
		if _, err := m.Decimals.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAsset(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = m.Decimals.Size()
	n += 1 + l + sovAsset(uint64(l))
	if m.IsOnChain {
		n += 2
	}
	if m.IsOraclePriceRequired {
		n += 2
	}
	if m.IsCdpMintable {
		n += 2
	}
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Decimals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnChain = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOraclePriceRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOraclePriceRequired = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCdpMintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCdpMintable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)
