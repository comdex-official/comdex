// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/asset/v1beta1/msg.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/ibc-go/modules/core/02-client/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddAssetRequest struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Denom    string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Decimals int64  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
}

func (m *MsgAddAssetRequest) Reset()         { *m = MsgAddAssetRequest{} }
func (m *MsgAddAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetRequest) ProtoMessage()    {}
func (*MsgAddAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{0}
}
func (m *MsgAddAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetRequest.Merge(m, src)
}
func (m *MsgAddAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetRequest proto.InternalMessageInfo

type MsgAddAssetResponse struct {
}

func (m *MsgAddAssetResponse) Reset()         { *m = MsgAddAssetResponse{} }
func (m *MsgAddAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetResponse) ProtoMessage()    {}
func (*MsgAddAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{1}
}
func (m *MsgAddAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetResponse.Merge(m, src)
}
func (m *MsgAddAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetResponse proto.InternalMessageInfo

type MsgUpdateAssetRequest struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Id       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Denom    string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Decimals int64  `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
}

func (m *MsgUpdateAssetRequest) Reset()         { *m = MsgUpdateAssetRequest{} }
func (m *MsgUpdateAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAssetRequest) ProtoMessage()    {}
func (*MsgUpdateAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{2}
}
func (m *MsgUpdateAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAssetRequest.Merge(m, src)
}
func (m *MsgUpdateAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAssetRequest proto.InternalMessageInfo

type MsgUpdateAssetResponse struct {
}

func (m *MsgUpdateAssetResponse) Reset()         { *m = MsgUpdateAssetResponse{} }
func (m *MsgUpdateAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAssetResponse) ProtoMessage()    {}
func (*MsgUpdateAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{3}
}
func (m *MsgUpdateAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAssetResponse.Merge(m, src)
}
func (m *MsgUpdateAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAssetResponse proto.InternalMessageInfo

type MsgAddMarketForAssetRequest struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
}

func (m *MsgAddMarketForAssetRequest) Reset()         { *m = MsgAddMarketForAssetRequest{} }
func (m *MsgAddMarketForAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarketForAssetRequest) ProtoMessage()    {}
func (*MsgAddMarketForAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{4}
}
func (m *MsgAddMarketForAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarketForAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarketForAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarketForAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarketForAssetRequest.Merge(m, src)
}
func (m *MsgAddMarketForAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarketForAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarketForAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarketForAssetRequest proto.InternalMessageInfo

type MsgAddMarketForAssetResponse struct {
}

func (m *MsgAddMarketForAssetResponse) Reset()         { *m = MsgAddMarketForAssetResponse{} }
func (m *MsgAddMarketForAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMarketForAssetResponse) ProtoMessage()    {}
func (*MsgAddMarketForAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{5}
}
func (m *MsgAddMarketForAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddMarketForAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMarketForAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddMarketForAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMarketForAssetResponse.Merge(m, src)
}
func (m *MsgAddMarketForAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddMarketForAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMarketForAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMarketForAssetResponse proto.InternalMessageInfo

type MsgRemoveMarketForAssetRequest struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
}

func (m *MsgRemoveMarketForAssetRequest) Reset()         { *m = MsgRemoveMarketForAssetRequest{} }
func (m *MsgRemoveMarketForAssetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarketForAssetRequest) ProtoMessage()    {}
func (*MsgRemoveMarketForAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{6}
}
func (m *MsgRemoveMarketForAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarketForAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarketForAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarketForAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarketForAssetRequest.Merge(m, src)
}
func (m *MsgRemoveMarketForAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarketForAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarketForAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarketForAssetRequest proto.InternalMessageInfo

type MsgRemoveMarketForAssetResponse struct {
}

func (m *MsgRemoveMarketForAssetResponse) Reset()         { *m = MsgRemoveMarketForAssetResponse{} }
func (m *MsgRemoveMarketForAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarketForAssetResponse) ProtoMessage()    {}
func (*MsgRemoveMarketForAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{7}
}
func (m *MsgRemoveMarketForAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarketForAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarketForAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarketForAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarketForAssetResponse.Merge(m, src)
}
func (m *MsgRemoveMarketForAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarketForAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarketForAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarketForAssetResponse proto.InternalMessageInfo

type MsgAddPairRequest struct {
	From             string                                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	AssetIn          uint64                                 `protobuf:"varint,2,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty" yaml:"asset_in"`
	AssetOut         uint64                                 `protobuf:"varint,3,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty" yaml:"asset_out"`
	LiquidationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=liquidation_ratio,json=liquidationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_ratio" yaml:"liquidation_ratio"`
}

func (m *MsgAddPairRequest) Reset()         { *m = MsgAddPairRequest{} }
func (m *MsgAddPairRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddPairRequest) ProtoMessage()    {}
func (*MsgAddPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{8}
}
func (m *MsgAddPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPairRequest.Merge(m, src)
}
func (m *MsgAddPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPairRequest proto.InternalMessageInfo

type MsgAddPairResponse struct {
}

func (m *MsgAddPairResponse) Reset()         { *m = MsgAddPairResponse{} }
func (m *MsgAddPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddPairResponse) ProtoMessage()    {}
func (*MsgAddPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{9}
}
func (m *MsgAddPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPairResponse.Merge(m, src)
}
func (m *MsgAddPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPairResponse proto.InternalMessageInfo

type MsgUpdatePairRequest struct {
	From             string                                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	Id               uint64                                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LiquidationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=liquidation_ratio,json=liquidationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_ratio" yaml:"liquidation_ratio"`
}

func (m *MsgUpdatePairRequest) Reset()         { *m = MsgUpdatePairRequest{} }
func (m *MsgUpdatePairRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePairRequest) ProtoMessage()    {}
func (*MsgUpdatePairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{10}
}
func (m *MsgUpdatePairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePairRequest.Merge(m, src)
}
func (m *MsgUpdatePairRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePairRequest proto.InternalMessageInfo

type MsgUpdatePairResponse struct {
}

func (m *MsgUpdatePairResponse) Reset()         { *m = MsgUpdatePairResponse{} }
func (m *MsgUpdatePairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePairResponse) ProtoMessage()    {}
func (*MsgUpdatePairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{11}
}
func (m *MsgUpdatePairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePairResponse.Merge(m, src)
}
func (m *MsgUpdatePairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePairResponse proto.InternalMessageInfo

type MsgFetchPriceRequest struct {
	From             string                                   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	SourcePort       string                                   `protobuf:"bytes,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	SourceChannel    string                                   `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	TimeoutHeight    types.Height                             `protobuf:"bytes,4,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	TimeoutTimestamp uint64                                   `protobuf:"varint,5,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
	Symbols          []string                                 `protobuf:"bytes,6,rep,name=symbols,proto3" json:"symbols,omitempty" yaml:"symbols"`
	ScriptID         uint64                                   `protobuf:"varint,7,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty" yaml:"script_id"`
	FeeLimit         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit" yaml:"fee_limit"`
	PrepareGas       uint64                                   `protobuf:"varint,9,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty" yaml:"prepare_gas"`
	ExecuteGas       uint64                                   `protobuf:"varint,10,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty" yaml:"execute_gas"`
}

func (m *MsgFetchPriceRequest) Reset()         { *m = MsgFetchPriceRequest{} }
func (m *MsgFetchPriceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFetchPriceRequest) ProtoMessage()    {}
func (*MsgFetchPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{12}
}
func (m *MsgFetchPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchPriceRequest.Merge(m, src)
}
func (m *MsgFetchPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchPriceRequest proto.InternalMessageInfo

type MsgFetchPriceResponse struct {
}

func (m *MsgFetchPriceResponse) Reset()         { *m = MsgFetchPriceResponse{} }
func (m *MsgFetchPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFetchPriceResponse) ProtoMessage()    {}
func (*MsgFetchPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_71dc8806a9f74763, []int{13}
}
func (m *MsgFetchPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchPriceResponse.Merge(m, src)
}
func (m *MsgFetchPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchPriceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddAssetRequest)(nil), "comdex.asset.v1beta1.MsgAddAssetRequest")
	proto.RegisterType((*MsgAddAssetResponse)(nil), "comdex.asset.v1beta1.MsgAddAssetResponse")
	proto.RegisterType((*MsgUpdateAssetRequest)(nil), "comdex.asset.v1beta1.MsgUpdateAssetRequest")
	proto.RegisterType((*MsgUpdateAssetResponse)(nil), "comdex.asset.v1beta1.MsgUpdateAssetResponse")
	proto.RegisterType((*MsgAddMarketForAssetRequest)(nil), "comdex.asset.v1beta1.MsgAddMarketForAssetRequest")
	proto.RegisterType((*MsgAddMarketForAssetResponse)(nil), "comdex.asset.v1beta1.MsgAddMarketForAssetResponse")
	proto.RegisterType((*MsgRemoveMarketForAssetRequest)(nil), "comdex.asset.v1beta1.MsgRemoveMarketForAssetRequest")
	proto.RegisterType((*MsgRemoveMarketForAssetResponse)(nil), "comdex.asset.v1beta1.MsgRemoveMarketForAssetResponse")
	proto.RegisterType((*MsgAddPairRequest)(nil), "comdex.asset.v1beta1.MsgAddPairRequest")
	proto.RegisterType((*MsgAddPairResponse)(nil), "comdex.asset.v1beta1.MsgAddPairResponse")
	proto.RegisterType((*MsgUpdatePairRequest)(nil), "comdex.asset.v1beta1.MsgUpdatePairRequest")
	proto.RegisterType((*MsgUpdatePairResponse)(nil), "comdex.asset.v1beta1.MsgUpdatePairResponse")
	proto.RegisterType((*MsgFetchPriceRequest)(nil), "comdex.asset.v1beta1.MsgFetchPriceRequest")
	proto.RegisterType((*MsgFetchPriceResponse)(nil), "comdex.asset.v1beta1.MsgFetchPriceResponse")
}

func init() { proto.RegisterFile("comdex/asset/v1beta1/msg.proto", fileDescriptor_71dc8806a9f74763) }

var fileDescriptor_71dc8806a9f74763 = []byte{
	// 1051 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0x4e, 0x62, 0x4f, 0x48, 0x9a, 0x4c, 0x93, 0x76, 0x6b, 0xca, 0x6e, 0x18, 0xa4,
	0xe2, 0xd2, 0x76, 0x57, 0x09, 0x20, 0x24, 0x24, 0x24, 0xea, 0x46, 0x2d, 0x41, 0x44, 0x84, 0x29,
	0x5c, 0xb8, 0x98, 0xf5, 0xee, 0x64, 0x3d, 0x8a, 0x77, 0xc7, 0xdd, 0x19, 0x87, 0x46, 0xa2, 0x12,
	0x27, 0xce, 0x1c, 0x38, 0xf1, 0x09, 0x10, 0x5f, 0x80, 0x2b, 0x07, 0x0e, 0x11, 0xa7, 0x1e, 0x11,
	0x87, 0x05, 0x92, 0x6f, 0xe0, 0x4f, 0x80, 0x76, 0x66, 0x6c, 0xaf, 0xe3, 0xc4, 0xb5, 0x85, 0x44,
	0x4f, 0x3b, 0xf3, 0xde, 0xef, 0xcd, 0x7b, 0xbf, 0xd9, 0xf7, 0x67, 0x80, 0xe5, 0xb3, 0x28, 0x20,
	0x4f, 0x5d, 0x8f, 0x73, 0x22, 0xdc, 0xa3, 0xad, 0x26, 0x11, 0xde, 0x96, 0x1b, 0xf1, 0xd0, 0xe9,
	0x24, 0x4c, 0x30, 0xb8, 0xae, 0xf4, 0x8e, 0xd4, 0x3b, 0x5a, 0x5f, 0xb5, 0x7c, 0xc6, 0x23, 0xc6,
	0xdd, 0xa6, 0xc7, 0xc9, 0xc0, 0xc8, 0x67, 0x34, 0x56, 0x56, 0xd5, 0xf5, 0x90, 0x85, 0x4c, 0x2e,
	0xdd, 0x6c, 0xa5, 0xa5, 0x36, 0x6d, 0xfa, 0xae, 0xcf, 0x12, 0xe2, 0xfa, 0x6d, 0x4a, 0xe2, 0xcc,
	0x9d, 0x5e, 0x29, 0x00, 0xfa, 0xc5, 0x00, 0x70, 0x8f, 0x87, 0xf7, 0x83, 0xe0, 0x7e, 0xe6, 0x0e,
	0x93, 0x27, 0x5d, 0xc2, 0x05, 0x7c, 0x03, 0x94, 0x0e, 0x12, 0x16, 0x99, 0xc6, 0xa6, 0x51, 0xab,
	0xd4, 0xaf, 0xf4, 0x52, 0x7b, 0xe9, 0xd8, 0x8b, 0xda, 0xef, 0xa3, 0x4c, 0x8a, 0xb0, 0x54, 0x66,
	0xa0, 0xd8, 0x8b, 0x88, 0x39, 0x77, 0x1e, 0x94, 0x49, 0x11, 0x96, 0x4a, 0x78, 0x0b, 0xcc, 0x07,
	0x24, 0x66, 0x91, 0x59, 0x94, 0xa8, 0xd5, 0x5e, 0x6a, 0xbf, 0xa2, 0x50, 0x52, 0x8c, 0xb0, 0x52,
	0x43, 0x17, 0x94, 0x03, 0xe2, 0xd3, 0xc8, 0x6b, 0x73, 0xb3, 0xb4, 0x69, 0xd4, 0x8a, 0xf5, 0xab,
	0xbd, 0xd4, 0xbe, 0xd2, 0x87, 0x2a, 0x0d, 0xc2, 0x03, 0x10, 0xda, 0x00, 0x57, 0x47, 0x02, 0xe7,
	0x1d, 0x16, 0x73, 0x82, 0x7e, 0x37, 0xc0, 0xc6, 0x1e, 0x0f, 0xbf, 0xe8, 0x04, 0x9e, 0x20, 0xb3,
	0x73, 0x5a, 0x01, 0x73, 0x34, 0x90, 0x8c, 0x4a, 0x78, 0x8e, 0x06, 0x03, 0x8e, 0xc5, 0xa9, 0x38,
	0x96, 0xa6, 0xe7, 0x38, 0x3f, 0x0d, 0x47, 0x13, 0x5c, 0x3b, 0xcf, 0x45, 0xd3, 0x7c, 0x06, 0x5e,
	0x55, 0xec, 0xf7, 0xbc, 0xe4, 0x90, 0x88, 0x87, 0x2c, 0xf9, 0xef, 0x5c, 0x6f, 0x83, 0x05, 0x7e,
	0x1c, 0x35, 0x59, 0x5b, 0xb3, 0x5d, 0xeb, 0xa5, 0xf6, 0xb2, 0x32, 0x53, 0x72, 0x84, 0x35, 0x00,
	0x59, 0xe0, 0xe6, 0xc5, 0xee, 0x75, 0x78, 0xdf, 0x1a, 0xc0, 0xda, 0xe3, 0x21, 0x26, 0x11, 0x3b,
	0x22, 0x2f, 0x27, 0xc4, 0xd7, 0x81, 0x7d, 0x69, 0x04, 0x3a, 0xca, 0x1f, 0xe6, 0xc0, 0x9a, 0xa2,
	0xb1, 0xef, 0xd1, 0x64, 0xa6, 0xc0, 0x1c, 0x50, 0x96, 0xf5, 0xd9, 0xa0, 0xb1, 0x0a, 0x2f, 0xff,
	0x2b, 0xfb, 0x1a, 0x84, 0x17, 0xe5, 0x72, 0x37, 0x86, 0x5b, 0xa0, 0xa2, 0xa4, 0xac, 0x2b, 0x64,
	0xec, 0xa5, 0xfa, 0x7a, 0x2f, 0xb5, 0x57, 0xf3, 0x06, 0xac, 0x2b, 0x10, 0x56, 0xc7, 0x7e, 0xda,
	0x15, 0xf0, 0x6b, 0xb0, 0xd6, 0xa6, 0x4f, 0xba, 0x34, 0xf0, 0x04, 0x65, 0x71, 0x23, 0xc9, 0x3e,
	0x3a, 0xc3, 0x3e, 0x3e, 0x49, 0xed, 0xc2, 0x9f, 0xa9, 0x7d, 0x2b, 0xa4, 0xa2, 0xd5, 0x6d, 0x3a,
	0x3e, 0x8b, 0x5c, 0xdd, 0x1f, 0xd4, 0xe7, 0x1e, 0x0f, 0x0e, 0x5d, 0x71, 0xdc, 0x21, 0xdc, 0xd9,
	0x21, 0x7e, 0x2f, 0xb5, 0x4d, 0xe5, 0x68, 0xec, 0x40, 0x84, 0x57, 0x73, 0x32, 0x2c, 0x45, 0xeb,
	0xfd, 0x96, 0xa0, 0x6e, 0x45, 0x5f, 0xd6, 0x6f, 0x06, 0x58, 0x1f, 0x24, 0xe3, 0xcc, 0xf7, 0x75,
	0xfe, 0x47, 0x5e, 0x48, 0xae, 0xf8, 0x3f, 0x90, 0xbb, 0x9e, 0x6b, 0x0f, 0x23, 0xfc, 0x7e, 0x9d,
	0x97, 0xfc, 0x1e, 0x12, 0xe1, 0xb7, 0xf6, 0x13, 0xea, 0x93, 0x99, 0xf8, 0xbd, 0x07, 0x96, 0x38,
	0xeb, 0x26, 0x3e, 0x69, 0x74, 0x58, 0x22, 0x74, 0x4b, 0xbc, 0xd6, 0x4b, 0x6d, 0xa8, 0xb3, 0x73,
	0xa8, 0x44, 0x18, 0xa8, 0xdd, 0x3e, 0x4b, 0x04, 0xfc, 0x10, 0xac, 0x68, 0x9d, 0xdf, 0xf2, 0xe2,
	0x98, 0xf4, 0x33, 0xfb, 0x46, 0x2f, 0xb5, 0x37, 0x46, 0x6c, 0xb5, 0x1e, 0xe1, 0x65, 0x25, 0x78,
	0xa0, 0xf6, 0xf0, 0x2b, 0xb0, 0x22, 0x68, 0x44, 0x58, 0x57, 0x34, 0x5a, 0x84, 0x86, 0x2d, 0x21,
	0x93, 0x64, 0x69, 0xbb, 0xea, 0xd0, 0xa6, 0xef, 0x64, 0xcd, 0xdf, 0xd1, 0x2d, 0xff, 0x68, 0xcb,
	0xf9, 0x48, 0x22, 0xea, 0xaf, 0x65, 0x77, 0x3c, 0xf4, 0x30, 0x6a, 0x8f, 0xf0, 0xb2, 0x16, 0x28,
	0x34, 0xdc, 0x05, 0x6b, 0x7d, 0x44, 0xf6, 0xe5, 0xc2, 0x8b, 0x3a, 0xb2, 0x81, 0x95, 0xea, 0x37,
	0x87, 0xd7, 0x3f, 0x06, 0x41, 0x78, 0x55, 0xcb, 0x3e, 0xef, 0x8b, 0xe0, 0x5d, 0xb0, 0xa8, 0xea,
	0x93, 0x9b, 0x0b, 0x9b, 0xc5, 0x5a, 0xa5, 0x0e, 0x7b, 0xa9, 0xbd, 0x92, 0xaf, 0x60, 0x8e, 0x70,
	0x1f, 0x02, 0x3f, 0x00, 0x15, 0xee, 0x27, 0xb4, 0x23, 0x1a, 0x34, 0x30, 0x17, 0xa5, 0xc3, 0xcd,
	0xd3, 0xd4, 0x2e, 0x3f, 0x96, 0xc2, 0xdd, 0x9d, 0x61, 0x05, 0x0d, 0x60, 0x08, 0x97, 0xd5, 0x7a,
	0x37, 0x80, 0xdf, 0x80, 0xca, 0x01, 0x21, 0x8d, 0x36, 0x8d, 0xa8, 0x30, 0xcb, 0x9b, 0xc5, 0xda,
	0xd2, 0xf6, 0x0d, 0x47, 0xe5, 0x90, 0x93, 0xcd, 0xd1, 0xfe, 0x70, 0x75, 0x1e, 0x30, 0x1a, 0xd7,
	0x77, 0xf4, 0x9d, 0xe8, 0x13, 0x07, 0x96, 0xe8, 0xe7, 0xbf, 0xec, 0xda, 0x14, 0xb9, 0x98, 0x1d,
	0xc2, 0x71, 0xf9, 0x80, 0x90, 0x4f, 0x32, 0xb3, 0x2c, 0x25, 0x3a, 0x09, 0xe9, 0x78, 0x09, 0x69,
	0x84, 0x1e, 0x37, 0x2b, 0x32, 0xfc, 0x5c, 0x4a, 0xe4, 0x94, 0x08, 0x03, 0xbd, 0x7b, 0xe4, 0xf1,
	0xcc, 0x90, 0x3c, 0x25, 0x7e, 0x57, 0x28, 0x43, 0x70, 0xde, 0x30, 0xa7, 0x44, 0x18, 0xe8, 0xdd,
	0x23, 0x8f, 0xeb, 0xdc, 0xce, 0x67, 0xb0, 0xca, 0xed, 0xed, 0x1f, 0x17, 0x00, 0xd8, 0xe3, 0xe1,
	0x63, 0x92, 0x1c, 0x51, 0x9f, 0xc0, 0x26, 0x58, 0xca, 0x8d, 0x4e, 0x58, 0x73, 0x2e, 0x7a, 0x71,
	0x38, 0xe3, 0xcf, 0x82, 0xea, 0xed, 0x29, 0x90, 0xca, 0x25, 0x3c, 0x04, 0x2b, 0xa3, 0xa3, 0x0b,
	0xde, 0xb9, 0xd4, 0x78, 0x7c, 0x58, 0x57, 0xef, 0x4e, 0x07, 0xd6, 0xce, 0x9e, 0xc9, 0xd2, 0x1d,
	0x1b, 0x47, 0x70, 0x6b, 0x52, 0xbc, 0x17, 0x8e, 0xa5, 0xea, 0xf6, 0x2c, 0x26, 0xda, 0xfd, 0x77,
	0x06, 0xb8, 0x7e, 0xc9, 0xac, 0x81, 0xef, 0x5c, 0x7a, 0xde, 0x84, 0xe1, 0x58, 0x7d, 0x77, 0x46,
	0x2b, 0x1d, 0x48, 0x43, 0xfe, 0x66, 0xdd, 0xb9, 0xe1, 0x9b, 0x93, 0xa8, 0xe4, 0x3a, 0x78, 0xb5,
	0xf6, 0x62, 0xa0, 0x76, 0xd0, 0x02, 0xcb, 0x23, 0xdd, 0x13, 0xbe, 0xf5, 0x82, 0xff, 0x94, 0x77,
	0x73, 0x67, 0x2a, 0xec, 0x88, 0xa7, 0x61, 0x2e, 0x4f, 0xf0, 0x34, 0xd6, 0xb2, 0x27, 0x78, 0x1a,
	0x2f, 0x8e, 0xfa, 0x67, 0x27, 0xff, 0x58, 0x85, 0x9f, 0x4e, 0xad, 0xc2, 0xc9, 0xa9, 0x65, 0x3c,
	0x3f, 0xb5, 0x8c, 0xbf, 0x4f, 0x2d, 0xe3, 0xfb, 0x33, 0xab, 0xf0, 0xfc, 0xcc, 0x2a, 0xfc, 0x71,
	0x66, 0x15, 0xbe, 0x74, 0x47, 0xaa, 0x3f, 0x3b, 0xf8, 0x1e, 0x3b, 0x38, 0xa0, 0x3e, 0xf5, 0xda,
	0x7a, 0xef, 0xf6, 0x9f, 0xf3, 0xb2, 0x15, 0x34, 0x17, 0xe4, 0xe3, 0xfa, 0xed, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x50, 0x41, 0x60, 0x5b, 0xeb, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	MsgAddAsset(ctx context.Context, in *MsgAddAssetRequest, opts ...grpc.CallOption) (*MsgAddAssetResponse, error)
	MsgUpdateAsset(ctx context.Context, in *MsgUpdateAssetRequest, opts ...grpc.CallOption) (*MsgUpdateAssetResponse, error)
	MsgAddMarketForAsset(ctx context.Context, in *MsgAddMarketForAssetRequest, opts ...grpc.CallOption) (*MsgAddMarketForAssetResponse, error)
	MsgRemoveMarketForAsset(ctx context.Context, in *MsgRemoveMarketForAssetRequest, opts ...grpc.CallOption) (*MsgRemoveMarketForAssetResponse, error)
	MsgAddPair(ctx context.Context, in *MsgAddPairRequest, opts ...grpc.CallOption) (*MsgAddPairResponse, error)
	MsgUpdatePair(ctx context.Context, in *MsgUpdatePairRequest, opts ...grpc.CallOption) (*MsgUpdatePairResponse, error)
	MsgFetchPrice(ctx context.Context, in *MsgFetchPriceRequest, opts ...grpc.CallOption) (*MsgFetchPriceResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) MsgAddAsset(ctx context.Context, in *MsgAddAssetRequest, opts ...grpc.CallOption) (*MsgAddAssetResponse, error) {
	out := new(MsgAddAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgAddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgUpdateAsset(ctx context.Context, in *MsgUpdateAssetRequest, opts ...grpc.CallOption) (*MsgUpdateAssetResponse, error) {
	out := new(MsgUpdateAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgUpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgAddMarketForAsset(ctx context.Context, in *MsgAddMarketForAssetRequest, opts ...grpc.CallOption) (*MsgAddMarketForAssetResponse, error) {
	out := new(MsgAddMarketForAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgAddMarketForAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgRemoveMarketForAsset(ctx context.Context, in *MsgRemoveMarketForAssetRequest, opts ...grpc.CallOption) (*MsgRemoveMarketForAssetResponse, error) {
	out := new(MsgRemoveMarketForAssetResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgRemoveMarketForAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgAddPair(ctx context.Context, in *MsgAddPairRequest, opts ...grpc.CallOption) (*MsgAddPairResponse, error) {
	out := new(MsgAddPairResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgAddPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgUpdatePair(ctx context.Context, in *MsgUpdatePairRequest, opts ...grpc.CallOption) (*MsgUpdatePairResponse, error) {
	out := new(MsgUpdatePairResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgUpdatePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) MsgFetchPrice(ctx context.Context, in *MsgFetchPriceRequest, opts ...grpc.CallOption) (*MsgFetchPriceResponse, error) {
	out := new(MsgFetchPriceResponse)
	err := c.cc.Invoke(ctx, "/comdex.asset.v1beta1.MsgService/MsgFetchPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	MsgAddAsset(context.Context, *MsgAddAssetRequest) (*MsgAddAssetResponse, error)
	MsgUpdateAsset(context.Context, *MsgUpdateAssetRequest) (*MsgUpdateAssetResponse, error)
	MsgAddMarketForAsset(context.Context, *MsgAddMarketForAssetRequest) (*MsgAddMarketForAssetResponse, error)
	MsgRemoveMarketForAsset(context.Context, *MsgRemoveMarketForAssetRequest) (*MsgRemoveMarketForAssetResponse, error)
	MsgAddPair(context.Context, *MsgAddPairRequest) (*MsgAddPairResponse, error)
	MsgUpdatePair(context.Context, *MsgUpdatePairRequest) (*MsgUpdatePairResponse, error)
	MsgFetchPrice(context.Context, *MsgFetchPriceRequest) (*MsgFetchPriceResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) MsgAddAsset(ctx context.Context, req *MsgAddAssetRequest) (*MsgAddAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAddAsset not implemented")
}
func (*UnimplementedMsgServiceServer) MsgUpdateAsset(ctx context.Context, req *MsgUpdateAssetRequest) (*MsgUpdateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdateAsset not implemented")
}
func (*UnimplementedMsgServiceServer) MsgAddMarketForAsset(ctx context.Context, req *MsgAddMarketForAssetRequest) (*MsgAddMarketForAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAddMarketForAsset not implemented")
}
func (*UnimplementedMsgServiceServer) MsgRemoveMarketForAsset(ctx context.Context, req *MsgRemoveMarketForAssetRequest) (*MsgRemoveMarketForAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgRemoveMarketForAsset not implemented")
}
func (*UnimplementedMsgServiceServer) MsgAddPair(ctx context.Context, req *MsgAddPairRequest) (*MsgAddPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgAddPair not implemented")
}
func (*UnimplementedMsgServiceServer) MsgUpdatePair(ctx context.Context, req *MsgUpdatePairRequest) (*MsgUpdatePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUpdatePair not implemented")
}
func (*UnimplementedMsgServiceServer) MsgFetchPrice(ctx context.Context, req *MsgFetchPriceRequest) (*MsgFetchPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgFetchPrice not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_MsgAddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgAddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgAddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgAddAsset(ctx, req.(*MsgAddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgUpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgUpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgUpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgUpdateAsset(ctx, req.(*MsgUpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgAddMarketForAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMarketForAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgAddMarketForAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgAddMarketForAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgAddMarketForAsset(ctx, req.(*MsgAddMarketForAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgRemoveMarketForAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMarketForAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgRemoveMarketForAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgRemoveMarketForAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgRemoveMarketForAsset(ctx, req.(*MsgRemoveMarketForAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgAddPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgAddPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgAddPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgAddPair(ctx, req.(*MsgAddPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgUpdatePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgUpdatePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgUpdatePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgUpdatePair(ctx, req.(*MsgUpdatePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_MsgFetchPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFetchPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).MsgFetchPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.asset.v1beta1.MsgService/MsgFetchPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).MsgFetchPrice(ctx, req.(*MsgFetchPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.asset.v1beta1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgAddAsset",
			Handler:    _MsgService_MsgAddAsset_Handler,
		},
		{
			MethodName: "MsgUpdateAsset",
			Handler:    _MsgService_MsgUpdateAsset_Handler,
		},
		{
			MethodName: "MsgAddMarketForAsset",
			Handler:    _MsgService_MsgAddMarketForAsset_Handler,
		},
		{
			MethodName: "MsgRemoveMarketForAsset",
			Handler:    _MsgService_MsgRemoveMarketForAsset_Handler,
		},
		{
			MethodName: "MsgAddPair",
			Handler:    _MsgService_MsgAddPair_Handler,
		},
		{
			MethodName: "MsgUpdatePair",
			Handler:    _MsgService_MsgUpdatePair_Handler,
		},
		{
			MethodName: "MsgFetchPrice",
			Handler:    _MsgService_MsgFetchPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/asset/v1beta1/msg.proto",
}

func (m *MsgAddAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddMarketForAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarketForAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarketForAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMarketForAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMarketForAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMarketForAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarketForAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarketForAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarketForAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarketForAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarketForAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarketForAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationRatio.Size()
		i -= size
		if _, err := m.LiquidationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.AssetOut != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AssetOut))
		i--
		dAtA[i] = 0x18
	}
	if m.AssetIn != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.AssetIn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationRatio.Size()
		i -= size
		if _, err := m.LiquidationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFetchPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteGas != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x50
	}
	if m.PrepareGas != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ScriptID != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ScriptID))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFetchPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovMsg(uint64(m.Decimals))
	}
	return n
}

func (m *MsgAddAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovMsg(uint64(m.Decimals))
	}
	return n
}

func (m *MsgUpdateAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddMarketForAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgAddMarketForAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMarketForAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgRemoveMarketForAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.AssetIn != 0 {
		n += 1 + sovMsg(uint64(m.AssetIn))
	}
	if m.AssetOut != 0 {
		n += 1 + sovMsg(uint64(m.AssetOut))
	}
	l = m.LiquidationRatio.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgAddPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	l = m.LiquidationRatio.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgUpdatePairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFetchPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovMsg(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovMsg(uint64(m.TimeoutTimestamp))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.ScriptID != 0 {
		n += 1 + sovMsg(uint64(m.ScriptID))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovMsg(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovMsg(uint64(m.ExecuteGas))
	}
	return n
}

func (m *MsgFetchPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarketForAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarketForAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarketForAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddMarketForAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMarketForAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMarketForAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarketForAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarketForAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarketForAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarketForAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarketForAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarketForAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIn", wireType)
			}
			m.AssetIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			m.AssetOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFetchPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptID", wireType)
			}
			m.ScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types1.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFetchPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
