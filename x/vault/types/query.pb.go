// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: petri/vault/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VaultInfo struct {
	Id                     uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExtendedPairID         uint64                                 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Owner                  string                                 `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Collateral             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=collateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral" yaml:"collateral"`
	Debt                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=debt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"debt" yaml:"debt"`
	CollateralizationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=collateralization_ratio,json=collateralizationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"collateralization_ratio" yaml:"collateralization_ratio"`
	ExtendedPairName       string                                 `protobuf:"bytes,7,opt,name=extended_pair_name,json=extendedPairName,proto3" json:"extended_pair_name,omitempty" yaml:"extended_pair_name"`
	InterestRate           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=interest_rate,json=interestRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_rate" yaml:"interest_rate"`
	AssetInDenom           string                                 `protobuf:"bytes,9,opt,name=asset_in_denom,json=assetInDenom,proto3" json:"asset_in_denom,omitempty" yaml:"asset_in_denom"`
	AssetOutDenom          string                                 `protobuf:"bytes,10,opt,name=asset_out_denom,json=assetOutDenom,proto3" json:"asset_out_denom,omitempty" yaml:"asset_out_denom"`
	MinCr                  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=min_cr,json=minCr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_cr" yaml:"min_cr"`
}

func (m *VaultInfo) Reset()         { *m = VaultInfo{} }
func (m *VaultInfo) String() string { return proto.CompactTextString(m) }
func (*VaultInfo) ProtoMessage()    {}
func (*VaultInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{0}
}
func (m *VaultInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultInfo.Merge(m, src)
}
func (m *VaultInfo) XXX_Size() int {
	return m.Size()
}
func (m *VaultInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VaultInfo proto.InternalMessageInfo

type QueryVaultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryVaultRequest) Reset()         { *m = QueryVaultRequest{} }
func (m *QueryVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultRequest) ProtoMessage()    {}
func (*QueryVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{1}
}
func (m *QueryVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultRequest.Merge(m, src)
}
func (m *QueryVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultRequest proto.InternalMessageInfo

type QueryVaultResponse struct {
	Vault Vault `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault" yaml:"vault"`
}

func (m *QueryVaultResponse) Reset()         { *m = QueryVaultResponse{} }
func (m *QueryVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultResponse) ProtoMessage()    {}
func (*QueryVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{2}
}
func (m *QueryVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultResponse.Merge(m, src)
}
func (m *QueryVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultResponse proto.InternalMessageInfo

type QueryVaultInfoByVaultIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
}

func (m *QueryVaultInfoByVaultIDRequest) Reset()         { *m = QueryVaultInfoByVaultIDRequest{} }
func (m *QueryVaultInfoByVaultIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoByVaultIDRequest) ProtoMessage()    {}
func (*QueryVaultInfoByVaultIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{3}
}
func (m *QueryVaultInfoByVaultIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoByVaultIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoByVaultIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoByVaultIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoByVaultIDRequest.Merge(m, src)
}
func (m *QueryVaultInfoByVaultIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoByVaultIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoByVaultIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoByVaultIDRequest proto.InternalMessageInfo

type QueryVaultInfoByVaultIDResponse struct {
	VaultsInfo VaultInfo `protobuf:"bytes,1,opt,name=vaultsInfo,proto3" json:"vaultsInfo" yaml:"vaultsInfo"`
}

func (m *QueryVaultInfoByVaultIDResponse) Reset()         { *m = QueryVaultInfoByVaultIDResponse{} }
func (m *QueryVaultInfoByVaultIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoByVaultIDResponse) ProtoMessage()    {}
func (*QueryVaultInfoByVaultIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{4}
}
func (m *QueryVaultInfoByVaultIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoByVaultIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoByVaultIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoByVaultIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoByVaultIDResponse.Merge(m, src)
}
func (m *QueryVaultInfoByVaultIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoByVaultIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoByVaultIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoByVaultIDResponse proto.InternalMessageInfo

type QueryVaultInfoOfOwnerByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner      string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultInfoOfOwnerByAppRequest) Reset()         { *m = QueryVaultInfoOfOwnerByAppRequest{} }
func (m *QueryVaultInfoOfOwnerByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoOfOwnerByAppRequest) ProtoMessage()    {}
func (*QueryVaultInfoOfOwnerByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{5}
}
func (m *QueryVaultInfoOfOwnerByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoOfOwnerByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoOfOwnerByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoOfOwnerByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoOfOwnerByAppRequest.Merge(m, src)
}
func (m *QueryVaultInfoOfOwnerByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoOfOwnerByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoOfOwnerByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoOfOwnerByAppRequest proto.InternalMessageInfo

type QueryVaultInfoOfOwnerByAppResponse struct {
	VaultsInfo []VaultInfo         `protobuf:"bytes,1,rep,name=vaultsInfo,proto3" json:"vaultsInfo" yaml:"vaultsInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultInfoOfOwnerByAppResponse) Reset()         { *m = QueryVaultInfoOfOwnerByAppResponse{} }
func (m *QueryVaultInfoOfOwnerByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoOfOwnerByAppResponse) ProtoMessage()    {}
func (*QueryVaultInfoOfOwnerByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{6}
}
func (m *QueryVaultInfoOfOwnerByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoOfOwnerByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoOfOwnerByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoOfOwnerByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoOfOwnerByAppResponse.Merge(m, src)
}
func (m *QueryVaultInfoOfOwnerByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoOfOwnerByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoOfOwnerByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoOfOwnerByAppResponse proto.InternalMessageInfo

type QueryAllVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsRequest) Reset()         { *m = QueryAllVaultsRequest{} }
func (m *QueryAllVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsRequest) ProtoMessage()    {}
func (*QueryAllVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{7}
}
func (m *QueryAllVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsRequest.Merge(m, src)
}
func (m *QueryAllVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsRequest proto.InternalMessageInfo

type QueryAllVaultsResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsResponse) Reset()         { *m = QueryAllVaultsResponse{} }
func (m *QueryAllVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsResponse) ProtoMessage()    {}
func (*QueryAllVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{8}
}
func (m *QueryAllVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsResponse.Merge(m, src)
}
func (m *QueryAllVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsResponse proto.InternalMessageInfo

type QueryAllVaultsByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppRequest) Reset()         { *m = QueryAllVaultsByAppRequest{} }
func (m *QueryAllVaultsByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsByAppRequest) ProtoMessage()    {}
func (*QueryAllVaultsByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{9}
}
func (m *QueryAllVaultsByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppRequest.Merge(m, src)
}
func (m *QueryAllVaultsByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppRequest proto.InternalMessageInfo

type QueryAllVaultsByAppResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppResponse) Reset()         { *m = QueryAllVaultsByAppResponse{} }
func (m *QueryAllVaultsByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsByAppResponse) ProtoMessage()    {}
func (*QueryAllVaultsByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{10}
}
func (m *QueryAllVaultsByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppResponse.Merge(m, src)
}
func (m *QueryAllVaultsByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppResponse proto.InternalMessageInfo

type QueryAllVaultsByAppAndExtendedPairRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Reset() {
	*m = QueryAllVaultsByAppAndExtendedPairRequest{}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVaultsByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryAllVaultsByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{11}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryAllVaultsByAppAndExtendedPairResponse struct {
	Vault      []Vault             `protobuf:"bytes,1,rep,name=vault,proto3" json:"vault" yaml:"vault"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Reset() {
	*m = QueryAllVaultsByAppAndExtendedPairResponse{}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVaultsByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryAllVaultsByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{12}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryVaultIDOfOwnerByExtendedPairAndAppRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner          string             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ExtendedPairId uint64             `protobuf:"varint,3,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) Reset() {
	*m = QueryVaultIDOfOwnerByExtendedPairAndAppRequest{}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultIDOfOwnerByExtendedPairAndAppRequest) ProtoMessage() {}
func (*QueryVaultIDOfOwnerByExtendedPairAndAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{13}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppRequest.Merge(m, src)
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppRequest proto.InternalMessageInfo

type QueryVaultIDOfOwnerByExtendedPairAndAppResponse struct {
	Vault_Id uint64 `protobuf:"varint,1,opt,name=vault_Id,json=vaultId,proto3" json:"vault_Id,omitempty" yaml:"vault_Id"`
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) Reset() {
	*m = QueryVaultIDOfOwnerByExtendedPairAndAppResponse{}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse) ProtoMessage() {}
func (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{14}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppResponse.Merge(m, src)
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultIDOfOwnerByExtendedPairAndAppResponse proto.InternalMessageInfo

type QueryVaultIdsByAppInAllExtendedPairsRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) Reset() {
	*m = QueryVaultIdsByAppInAllExtendedPairsRequest{}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultIdsByAppInAllExtendedPairsRequest) ProtoMessage() {}
func (*QueryVaultIdsByAppInAllExtendedPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{15}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsRequest.Merge(m, src)
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsRequest proto.InternalMessageInfo

type QueryVaultIdsByAppInAllExtendedPairsResponse struct {
	VaultIds   []uint64            `protobuf:"varint,1,rep,packed,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) Reset() {
	*m = QueryVaultIdsByAppInAllExtendedPairsResponse{}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultIdsByAppInAllExtendedPairsResponse) ProtoMessage() {}
func (*QueryVaultIdsByAppInAllExtendedPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{16}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsResponse.Merge(m, src)
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultIdsByAppInAllExtendedPairsResponse proto.InternalMessageInfo

type QueryAllVaultIdsByAnOwnerRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultIdsByAnOwnerRequest) Reset()         { *m = QueryAllVaultIdsByAnOwnerRequest{} }
func (m *QueryAllVaultIdsByAnOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultIdsByAnOwnerRequest) ProtoMessage()    {}
func (*QueryAllVaultIdsByAnOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{17}
}
func (m *QueryAllVaultIdsByAnOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultIdsByAnOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultIdsByAnOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultIdsByAnOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultIdsByAnOwnerRequest.Merge(m, src)
}
func (m *QueryAllVaultIdsByAnOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultIdsByAnOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultIdsByAnOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultIdsByAnOwnerRequest proto.InternalMessageInfo

type QueryAllVaultIdsByAnOwnerResponse struct {
	VaultIds   []uint64            `protobuf:"varint,1,rep,packed,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllVaultIdsByAnOwnerResponse) Reset()         { *m = QueryAllVaultIdsByAnOwnerResponse{} }
func (m *QueryAllVaultIdsByAnOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultIdsByAnOwnerResponse) ProtoMessage()    {}
func (*QueryAllVaultIdsByAnOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{18}
}
func (m *QueryAllVaultIdsByAnOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultIdsByAnOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultIdsByAnOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultIdsByAnOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultIdsByAnOwnerResponse.Merge(m, src)
}
func (m *QueryAllVaultIdsByAnOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultIdsByAnOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultIdsByAnOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultIdsByAnOwnerResponse proto.InternalMessageInfo

type QueryTokenMintedByAppAndExtendedPairRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedByAppAndExtendedPairRequest) Reset() {
	*m = QueryTokenMintedByAppAndExtendedPairRequest{}
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryTokenMintedByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{19}
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryTokenMintedByAppAndExtendedPairResponse struct {
	TokenMinted github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=token_minted,json=tokenMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_minted" yaml:"token_minted"`
}

func (m *QueryTokenMintedByAppAndExtendedPairResponse) Reset() {
	*m = QueryTokenMintedByAppAndExtendedPairResponse{}
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenMintedByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryTokenMintedByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{20}
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryTokenMintedAssetWiseByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedAssetWiseByAppRequest) Reset()         { *m = QueryTokenMintedAssetWiseByAppRequest{} }
func (m *QueryTokenMintedAssetWiseByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAssetWiseByAppRequest) ProtoMessage()    {}
func (*QueryTokenMintedAssetWiseByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{21}
}
func (m *QueryTokenMintedAssetWiseByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAssetWiseByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAssetWiseByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAssetWiseByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAssetWiseByAppRequest.Merge(m, src)
}
func (m *QueryTokenMintedAssetWiseByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAssetWiseByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAssetWiseByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAssetWiseByAppRequest proto.InternalMessageInfo

type QueryTokenMintedAssetWiseByAppResponse struct {
	MintedData []MintedDataMap     `protobuf:"bytes,1,rep,name=minted_data,json=mintedData,proto3" json:"minted_data" yaml:"minted_data"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTokenMintedAssetWiseByAppResponse) Reset() {
	*m = QueryTokenMintedAssetWiseByAppResponse{}
}
func (m *QueryTokenMintedAssetWiseByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenMintedAssetWiseByAppResponse) ProtoMessage()    {}
func (*QueryTokenMintedAssetWiseByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{22}
}
func (m *QueryTokenMintedAssetWiseByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenMintedAssetWiseByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenMintedAssetWiseByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenMintedAssetWiseByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenMintedAssetWiseByAppResponse.Merge(m, src)
}
func (m *QueryTokenMintedAssetWiseByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenMintedAssetWiseByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenMintedAssetWiseByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenMintedAssetWiseByAppResponse proto.InternalMessageInfo

type QueryVaultCountByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryVaultCountByAppRequest) Reset()         { *m = QueryVaultCountByAppRequest{} }
func (m *QueryVaultCountByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByAppRequest) ProtoMessage()    {}
func (*QueryVaultCountByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{23}
}
func (m *QueryVaultCountByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByAppRequest.Merge(m, src)
}
func (m *QueryVaultCountByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByAppRequest proto.InternalMessageInfo

type QueryVaultCountByAppResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByAppResponse) Reset()         { *m = QueryVaultCountByAppResponse{} }
func (m *QueryVaultCountByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultCountByAppResponse) ProtoMessage()    {}
func (*QueryVaultCountByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{24}
}
func (m *QueryVaultCountByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByAppResponse.Merge(m, src)
}
func (m *QueryVaultCountByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByAppResponse proto.InternalMessageInfo

type QueryVaultCountByAppAndExtendedPairRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryVaultCountByAppAndExtendedPairRequest) Reset() {
	*m = QueryVaultCountByAppAndExtendedPairRequest{}
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultCountByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryVaultCountByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{25}
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryVaultCountByAppAndExtendedPairResponse struct {
	VaultCount uint64 `protobuf:"varint,1,opt,name=vault_count,json=vaultCount,proto3" json:"vault_count,omitempty" yaml:"vault_count"`
}

func (m *QueryVaultCountByAppAndExtendedPairResponse) Reset() {
	*m = QueryVaultCountByAppAndExtendedPairResponse{}
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVaultCountByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryVaultCountByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{26}
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultCountByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultCountByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultCountByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultCountByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryTotalValueLockedByAppAndExtendedPairRequest struct {
	AppId          uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64             `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
	Pagination     *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) Reset() {
	*m = QueryTotalValueLockedByAppAndExtendedPairRequest{}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryTotalValueLockedByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{27}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryTotalValueLockedByAppAndExtendedPairResponse struct {
	ValueLocked *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=value_locked,json=valueLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"value_locked,omitempty"`
}

func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) Reset() {
	*m = QueryTotalValueLockedByAppAndExtendedPairResponse{}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalValueLockedByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryTotalValueLockedByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{28}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalValueLockedByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairIDsByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairIDsByAppRequest) Reset()         { *m = QueryExtendedPairIDsByAppRequest{} }
func (m *QueryExtendedPairIDsByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDsByAppRequest) ProtoMessage()    {}
func (*QueryExtendedPairIDsByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{29}
}
func (m *QueryExtendedPairIDsByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDsByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDsByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDsByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDsByAppRequest.Merge(m, src)
}
func (m *QueryExtendedPairIDsByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDsByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDsByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDsByAppRequest proto.InternalMessageInfo

type QueryExtendedPairIDsByAppResponse struct {
	ExtendedPairIds []uint64            `protobuf:"varint,1,rep,packed,name=extended_pair_ids,json=extendedPairIds,proto3" json:"extended_pair_ids,omitempty" yaml:"extended_pair_ids"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairIDsByAppResponse) Reset()         { *m = QueryExtendedPairIDsByAppResponse{} }
func (m *QueryExtendedPairIDsByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExtendedPairIDsByAppResponse) ProtoMessage()    {}
func (*QueryExtendedPairIDsByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{30}
}
func (m *QueryExtendedPairIDsByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairIDsByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairIDsByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairIDsByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairIDsByAppResponse.Merge(m, src)
}
func (m *QueryExtendedPairIDsByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairIDsByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairIDsByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairIDsByAppResponse proto.InternalMessageInfo

type QueryStableVaultByVaultIDRequest struct {
	StableVaultId uint64 `protobuf:"varint,1,opt,name=stable_vault_id,json=stableVaultId,proto3" json:"stable_vault_id,omitempty" yaml:"stable_vault_id"`
}

func (m *QueryStableVaultByVaultIDRequest) Reset()         { *m = QueryStableVaultByVaultIDRequest{} }
func (m *QueryStableVaultByVaultIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultByVaultIDRequest) ProtoMessage()    {}
func (*QueryStableVaultByVaultIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{31}
}
func (m *QueryStableVaultByVaultIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByVaultIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByVaultIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByVaultIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByVaultIDRequest.Merge(m, src)
}
func (m *QueryStableVaultByVaultIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByVaultIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByVaultIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByVaultIDRequest proto.InternalMessageInfo

type QueryStableVaultByVaultIDResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultByVaultIDResponse) Reset()         { *m = QueryStableVaultByVaultIDResponse{} }
func (m *QueryStableVaultByVaultIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultByVaultIDResponse) ProtoMessage()    {}
func (*QueryStableVaultByVaultIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{32}
}
func (m *QueryStableVaultByVaultIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByVaultIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByVaultIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByVaultIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByVaultIDResponse.Merge(m, src)
}
func (m *QueryStableVaultByVaultIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByVaultIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByVaultIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByVaultIDResponse proto.InternalMessageInfo

type QueryStableVaultByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryStableVaultByAppRequest) Reset()         { *m = QueryStableVaultByAppRequest{} }
func (m *QueryStableVaultByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultByAppRequest) ProtoMessage()    {}
func (*QueryStableVaultByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{33}
}
func (m *QueryStableVaultByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByAppRequest.Merge(m, src)
}
func (m *QueryStableVaultByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByAppRequest proto.InternalMessageInfo

type QueryStableVaultByAppResponse struct {
	StableMintVault []StableMintVault   `protobuf:"bytes,1,rep,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault" yaml:"stable_mint_vault"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryStableVaultByAppResponse) Reset()         { *m = QueryStableVaultByAppResponse{} }
func (m *QueryStableVaultByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStableVaultByAppResponse) ProtoMessage()    {}
func (*QueryStableVaultByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{34}
}
func (m *QueryStableVaultByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByAppResponse.Merge(m, src)
}
func (m *QueryStableVaultByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByAppResponse proto.InternalMessageInfo

type QueryStableVaultByAppAndExtendedPairRequest struct {
	AppId          uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
}

func (m *QueryStableVaultByAppAndExtendedPairRequest) Reset() {
	*m = QueryStableVaultByAppAndExtendedPairRequest{}
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryStableVaultByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{35}
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryStableVaultByAppAndExtendedPairResponse struct {
	StableMintVault *StableMintVault `protobuf:"bytes,1,opt,name=stable_mint_vault,json=stableMintVault,proto3" json:"stable_mint_vault,omitempty" yaml:"stable_mint_vault"`
}

func (m *QueryStableVaultByAppAndExtendedPairResponse) Reset() {
	*m = QueryStableVaultByAppAndExtendedPairResponse{}
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStableVaultByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryStableVaultByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{36}
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableVaultByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableVaultByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableVaultByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableVaultByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppAndExtendedPairRequest struct {
	AppId          uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	ExtendedPairId uint64 `protobuf:"varint,2,opt,name=extended_pair_id,json=extendedPairId,proto3" json:"extended_pair_id,omitempty" yaml:"extended_pair_id"`
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByAppAndExtendedPairRequest{}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{37}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppAndExtendedPairResponse struct {
	ExtendedPairVaultMapping *AppExtendedPairVaultMappingData `protobuf:"bytes,1,opt,name=extendedPairVaultMapping,proto3" json:"extendedPairVaultMapping,omitempty" yaml:"extendedPairVaultMapping"`
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByAppAndExtendedPairResponse{}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{38}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppAndExtendedPairResponse proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Reset() {
	*m = QueryExtendedPairVaultMappingByAppRequest{}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppRequest) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{39}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppRequest proto.InternalMessageInfo

type QueryExtendedPairVaultMappingByAppResponse struct {
	ExtendedPairVaultMapping []AppExtendedPairVaultMappingData `protobuf:"bytes,1,rep,name=extendedPairVaultMapping,proto3" json:"extendedPairVaultMapping" yaml:"extendedPairVaultMapping"`
	Pagination               *query.PageResponse               `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Reset() {
	*m = QueryExtendedPairVaultMappingByAppResponse{}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryExtendedPairVaultMappingByAppResponse) ProtoMessage() {}
func (*QueryExtendedPairVaultMappingByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{40}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.Merge(m, src)
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExtendedPairVaultMappingByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExtendedPairVaultMappingByAppResponse proto.InternalMessageInfo

type QueryTVLByAppOfAllExtendedPairsRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTVLByAppOfAllExtendedPairsRequest) Reset() {
	*m = QueryTVLByAppOfAllExtendedPairsRequest{}
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTVLByAppOfAllExtendedPairsRequest) ProtoMessage()    {}
func (*QueryTVLByAppOfAllExtendedPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{41}
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsRequest.Merge(m, src)
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsRequest proto.InternalMessageInfo

type QueryTVLByAppOfAllExtendedPairsResponse struct {
	Tvldata    []TvlLockedDataMap  `protobuf:"bytes,1,rep,name=tvldata,proto3" json:"tvldata" yaml:"tvldata"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryTVLByAppOfAllExtendedPairsResponse) Reset() {
	*m = QueryTVLByAppOfAllExtendedPairsResponse{}
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTVLByAppOfAllExtendedPairsResponse) ProtoMessage()    {}
func (*QueryTVLByAppOfAllExtendedPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{42}
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsResponse.Merge(m, src)
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLByAppOfAllExtendedPairsResponse proto.InternalMessageInfo

type QueryTVLByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
}

func (m *QueryTVLByAppRequest) Reset()         { *m = QueryTVLByAppRequest{} }
func (m *QueryTVLByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTVLByAppRequest) ProtoMessage()    {}
func (*QueryTVLByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{43}
}
func (m *QueryTVLByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLByAppRequest.Merge(m, src)
}
func (m *QueryTVLByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLByAppRequest proto.InternalMessageInfo

type QueryTVLByAppResponse struct {
	CollateralLocked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=collateral_locked,json=collateralLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked" yaml:"collateral_locked"`
}

func (m *QueryTVLByAppResponse) Reset()         { *m = QueryTVLByAppResponse{} }
func (m *QueryTVLByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTVLByAppResponse) ProtoMessage()    {}
func (*QueryTVLByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{44}
}
func (m *QueryTVLByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTVLByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTVLByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTVLByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTVLByAppResponse.Merge(m, src)
}
func (m *QueryTVLByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTVLByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTVLByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTVLByAppResponse proto.InternalMessageInfo

type QueryUserMyPositionByAppRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryUserMyPositionByAppRequest) Reset()         { *m = QueryUserMyPositionByAppRequest{} }
func (m *QueryUserMyPositionByAppRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserMyPositionByAppRequest) ProtoMessage()    {}
func (*QueryUserMyPositionByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{45}
}
func (m *QueryUserMyPositionByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserMyPositionByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserMyPositionByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserMyPositionByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMyPositionByAppRequest.Merge(m, src)
}
func (m *QueryUserMyPositionByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserMyPositionByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMyPositionByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMyPositionByAppRequest proto.InternalMessageInfo

type QueryUserMyPositionByAppResponse struct {
	CollateralLocked  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=collateral_locked,json=collateralLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collateral_locked" yaml:"collateral_locked"`
	TotalDue          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_due,json=totalDue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_due" yaml:"total_due"`
	AvailableToBorrow github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=available_to_borrow,json=availableToBorrow,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"available_to_borrow" yaml:"available_to_borrow"`
	AverageCrRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=average_cr_ratio,json=averageCrRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"average_cr_ratio" yaml:"average_cr_ratio"`
}

func (m *QueryUserMyPositionByAppResponse) Reset()         { *m = QueryUserMyPositionByAppResponse{} }
func (m *QueryUserMyPositionByAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserMyPositionByAppResponse) ProtoMessage()    {}
func (*QueryUserMyPositionByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{46}
}
func (m *QueryUserMyPositionByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserMyPositionByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserMyPositionByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserMyPositionByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserMyPositionByAppResponse.Merge(m, src)
}
func (m *QueryUserMyPositionByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserMyPositionByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserMyPositionByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserMyPositionByAppResponse proto.InternalMessageInfo

type QueryUserExtendedPairTotalDataRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *QueryUserExtendedPairTotalDataRequest) Reset()         { *m = QueryUserExtendedPairTotalDataRequest{} }
func (m *QueryUserExtendedPairTotalDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserExtendedPairTotalDataRequest) ProtoMessage()    {}
func (*QueryUserExtendedPairTotalDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{47}
}
func (m *QueryUserExtendedPairTotalDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExtendedPairTotalDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExtendedPairTotalDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExtendedPairTotalDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExtendedPairTotalDataRequest.Merge(m, src)
}
func (m *QueryUserExtendedPairTotalDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExtendedPairTotalDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExtendedPairTotalDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExtendedPairTotalDataRequest proto.InternalMessageInfo

type QueryUserExtendedPairTotalDataResponse struct {
	UserTotalData []OwnerAppExtendedPairVaultMappingData `protobuf:"bytes,1,rep,name=userTotalData,proto3" json:"userTotalData" yaml:"user_total_data"`
}

func (m *QueryUserExtendedPairTotalDataResponse) Reset() {
	*m = QueryUserExtendedPairTotalDataResponse{}
}
func (m *QueryUserExtendedPairTotalDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserExtendedPairTotalDataResponse) ProtoMessage()    {}
func (*QueryUserExtendedPairTotalDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{48}
}
func (m *QueryUserExtendedPairTotalDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExtendedPairTotalDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExtendedPairTotalDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExtendedPairTotalDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExtendedPairTotalDataResponse.Merge(m, src)
}
func (m *QueryUserExtendedPairTotalDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExtendedPairTotalDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExtendedPairTotalDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExtendedPairTotalDataResponse proto.InternalMessageInfo

type QueryPairsLockedAndMintedStatisticByAppRequest struct {
	AppId      uint64             `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsLockedAndMintedStatisticByAppRequest) Reset() {
	*m = QueryPairsLockedAndMintedStatisticByAppRequest{}
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPairsLockedAndMintedStatisticByAppRequest) ProtoMessage() {}
func (*QueryPairsLockedAndMintedStatisticByAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{49}
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppRequest.Merge(m, src)
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppRequest proto.InternalMessageInfo

type QueryPairsLockedAndMintedStatisticByAppResponse struct {
	PairStatisticData []PairStatisticData `protobuf:"bytes,1,rep,name=pairStatisticData,proto3" json:"pairStatisticData" yaml:"pairStatisticData"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryPairsLockedAndMintedStatisticByAppResponse) Reset() {
	*m = QueryPairsLockedAndMintedStatisticByAppResponse{}
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPairsLockedAndMintedStatisticByAppResponse) ProtoMessage() {}
func (*QueryPairsLockedAndMintedStatisticByAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d35126a97363346, []int{50}
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppResponse.Merge(m, src)
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPairsLockedAndMintedStatisticByAppResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VaultInfo)(nil), "petri.vault.v1beta1.VaultInfo")
	proto.RegisterType((*QueryVaultRequest)(nil), "petri.vault.v1beta1.QueryVaultRequest")
	proto.RegisterType((*QueryVaultResponse)(nil), "petri.vault.v1beta1.QueryVaultResponse")
	proto.RegisterType((*QueryVaultInfoByVaultIDRequest)(nil), "petri.vault.v1beta1.QueryVaultInfoByVaultIDRequest")
	proto.RegisterType((*QueryVaultInfoByVaultIDResponse)(nil), "petri.vault.v1beta1.QueryVaultInfoByVaultIDResponse")
	proto.RegisterType((*QueryVaultInfoOfOwnerByAppRequest)(nil), "petri.vault.v1beta1.QueryVaultInfoOfOwnerByAppRequest")
	proto.RegisterType((*QueryVaultInfoOfOwnerByAppResponse)(nil), "petri.vault.v1beta1.QueryVaultInfoOfOwnerByAppResponse")
	proto.RegisterType((*QueryAllVaultsRequest)(nil), "petri.vault.v1beta1.QueryAllVaultsRequest")
	proto.RegisterType((*QueryAllVaultsResponse)(nil), "petri.vault.v1beta1.QueryAllVaultsResponse")
	proto.RegisterType((*QueryAllVaultsByAppRequest)(nil), "petri.vault.v1beta1.QueryAllVaultsByAppRequest")
	proto.RegisterType((*QueryAllVaultsByAppResponse)(nil), "petri.vault.v1beta1.QueryAllVaultsByAppResponse")
	proto.RegisterType((*QueryAllVaultsByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryAllVaultsByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryAllVaultsByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryAllVaultsByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryVaultIDOfOwnerByExtendedPairAndAppRequest)(nil), "petri.vault.v1beta1.QueryVaultIDOfOwnerByExtendedPairAndAppRequest")
	proto.RegisterType((*QueryVaultIDOfOwnerByExtendedPairAndAppResponse)(nil), "petri.vault.v1beta1.QueryVaultIDOfOwnerByExtendedPairAndAppResponse")
	proto.RegisterType((*QueryVaultIdsByAppInAllExtendedPairsRequest)(nil), "petri.vault.v1beta1.QueryVaultIdsByAppInAllExtendedPairsRequest")
	proto.RegisterType((*QueryVaultIdsByAppInAllExtendedPairsResponse)(nil), "petri.vault.v1beta1.QueryVaultIdsByAppInAllExtendedPairsResponse")
	proto.RegisterType((*QueryAllVaultIdsByAnOwnerRequest)(nil), "petri.vault.v1beta1.QueryAllVaultIdsByAnOwnerRequest")
	proto.RegisterType((*QueryAllVaultIdsByAnOwnerResponse)(nil), "petri.vault.v1beta1.QueryAllVaultIdsByAnOwnerResponse")
	proto.RegisterType((*QueryTokenMintedByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryTokenMintedByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryTokenMintedByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryTokenMintedByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryTokenMintedAssetWiseByAppRequest)(nil), "petri.vault.v1beta1.QueryTokenMintedAssetWiseByAppRequest")
	proto.RegisterType((*QueryTokenMintedAssetWiseByAppResponse)(nil), "petri.vault.v1beta1.QueryTokenMintedAssetWiseByAppResponse")
	proto.RegisterType((*QueryVaultCountByAppRequest)(nil), "petri.vault.v1beta1.QueryVaultCountByAppRequest")
	proto.RegisterType((*QueryVaultCountByAppResponse)(nil), "petri.vault.v1beta1.QueryVaultCountByAppResponse")
	proto.RegisterType((*QueryVaultCountByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryVaultCountByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryVaultCountByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryVaultCountByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryTotalValueLockedByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryTotalValueLockedByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryTotalValueLockedByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryTotalValueLockedByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairIDsByAppRequest)(nil), "petri.vault.v1beta1.QueryExtendedPairIDsByAppRequest")
	proto.RegisterType((*QueryExtendedPairIDsByAppResponse)(nil), "petri.vault.v1beta1.QueryExtendedPairIDsByAppResponse")
	proto.RegisterType((*QueryStableVaultByVaultIDRequest)(nil), "petri.vault.v1beta1.QueryStableVaultByVaultIDRequest")
	proto.RegisterType((*QueryStableVaultByVaultIDResponse)(nil), "petri.vault.v1beta1.QueryStableVaultByVaultIDResponse")
	proto.RegisterType((*QueryStableVaultByAppRequest)(nil), "petri.vault.v1beta1.QueryStableVaultByAppRequest")
	proto.RegisterType((*QueryStableVaultByAppResponse)(nil), "petri.vault.v1beta1.QueryStableVaultByAppResponse")
	proto.RegisterType((*QueryStableVaultByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryStableVaultByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryStableVaultByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryStableVaultByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppAndExtendedPairRequest)(nil), "petri.vault.v1beta1.QueryExtendedPairVaultMappingByAppAndExtendedPairRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse)(nil), "petri.vault.v1beta1.QueryExtendedPairVaultMappingByAppAndExtendedPairResponse")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppRequest)(nil), "petri.vault.v1beta1.QueryExtendedPairVaultMappingByAppRequest")
	proto.RegisterType((*QueryExtendedPairVaultMappingByAppResponse)(nil), "petri.vault.v1beta1.QueryExtendedPairVaultMappingByAppResponse")
	proto.RegisterType((*QueryTVLByAppOfAllExtendedPairsRequest)(nil), "petri.vault.v1beta1.QueryTVLByAppOfAllExtendedPairsRequest")
	proto.RegisterType((*QueryTVLByAppOfAllExtendedPairsResponse)(nil), "petri.vault.v1beta1.QueryTVLByAppOfAllExtendedPairsResponse")
	proto.RegisterType((*QueryTVLByAppRequest)(nil), "petri.vault.v1beta1.QueryTVLByAppRequest")
	proto.RegisterType((*QueryTVLByAppResponse)(nil), "petri.vault.v1beta1.QueryTVLByAppResponse")
	proto.RegisterType((*QueryUserMyPositionByAppRequest)(nil), "petri.vault.v1beta1.QueryUserMyPositionByAppRequest")
	proto.RegisterType((*QueryUserMyPositionByAppResponse)(nil), "petri.vault.v1beta1.QueryUserMyPositionByAppResponse")
	proto.RegisterType((*QueryUserExtendedPairTotalDataRequest)(nil), "petri.vault.v1beta1.QueryUserExtendedPairTotalDataRequest")
	proto.RegisterType((*QueryUserExtendedPairTotalDataResponse)(nil), "petri.vault.v1beta1.QueryUserExtendedPairTotalDataResponse")
	proto.RegisterType((*QueryPairsLockedAndMintedStatisticByAppRequest)(nil), "petri.vault.v1beta1.QueryPairsLockedAndMintedStatisticByAppRequest")
	proto.RegisterType((*QueryPairsLockedAndMintedStatisticByAppResponse)(nil), "petri.vault.v1beta1.QueryPairsLockedAndMintedStatisticByAppResponse")
}

func init() { proto.RegisterFile("petri/vault/v1beta1/query.proto", fileDescriptor_8d35126a97363346) }

var fileDescriptor_8d35126a97363346 = []byte{
	// 2880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5b, 0x5d, 0x6c, 0x1c, 0x57,
	0xf5, 0xf7, 0xac, 0xe3, 0x34, 0xbe, 0x8e, 0x1d, 0xfb, 0xc6, 0x4d, 0x36, 0x9b, 0x64, 0x37, 0xbd,
	0x49, 0x9d, 0xcf, 0xdd, 0xad, 0x9d, 0xcf, 0xe6, 0xcb, 0xd9, 0xb5, 0x9d, 0xfc, 0xf7, 0xdf, 0xa4,
	0x76, 0x26, 0xc1, 0x69, 0x40, 0xe9, 0x32, 0xde, 0x19, 0xbb, 0xa3, 0xcc, 0xce, 0x6c, 0x77, 0x66,
	0x9d, 0x9a, 0x10, 0x09, 0xe5, 0x05, 0x51, 0x04, 0x2a, 0x02, 0x21, 0x04, 0x02, 0x5e, 0x40, 0xb4,
	0xea, 0x4b, 0x91, 0x50, 0x25, 0x04, 0x2f, 0x11, 0x12, 0x0a, 0x12, 0x48, 0x41, 0x14, 0x09, 0xf5,
	0x61, 0x55, 0x9c, 0x3e, 0xf1, 0x00, 0x68, 0x85, 0x84, 0xc4, 0x87, 0x84, 0xe6, 0xde, 0x33, 0x3b,
	0x33, 0xeb, 0xd9, 0xf9, 0xb0, 0xb3, 0xaa, 0xab, 0xbc, 0xd8, 0xbb, 0x33, 0xf7, 0x9e, 0x7b, 0x7e,
	0xbf, 0x73, 0xcf, 0xb9, 0xe7, 0xde, 0x73, 0x17, 0xed, 0x29, 0x69, 0x65, 0x51, 0x7a, 0x23, 0xbb,
	0x28, 0xd4, 0x14, 0x23, 0xbb, 0x38, 0x3a, 0x27, 0x19, 0xc2, 0x68, 0xf6, 0xf5, 0x9a, 0x54, 0x5d,
	0xca, 0x54, 0xaa, 0x9a, 0xa1, 0xe1, 0x61, 0xd6, 0x22, 0x43, 0x5b, 0x64, 0xa0, 0x45, 0xe2, 0x50,
	0x49, 0xd3, 0xcb, 0x9a, 0x9e, 0x9d, 0x13, 0x74, 0x89, 0x35, 0x6f, 0x76, 0xae, 0x08, 0x0b, 0xb2,
	0x2a, 0x18, 0xb2, 0xa6, 0x32, 0x09, 0x89, 0xe1, 0x05, 0x6d, 0x41, 0xa3, 0x1f, 0xb3, 0xe6, 0x27,
	0x78, 0xba, 0x6b, 0x41, 0xd3, 0x16, 0x14, 0x29, 0x2b, 0x54, 0xe4, 0xac, 0xa0, 0xaa, 0x9a, 0x41,
	0xbb, 0xe8, 0xf0, 0xd6, 0x5b, 0x2f, 0xa6, 0x03, 0x6d, 0x41, 0xfe, 0xb9, 0x11, 0xf5, 0xce, 0x9a,
	0xdf, 0x0b, 0xea, 0xbc, 0x86, 0x07, 0x50, 0x4c, 0x16, 0xe3, 0xdc, 0x1e, 0xee, 0xc0, 0x06, 0x3e,
	0x26, 0x8b, 0xf8, 0x06, 0x1a, 0x94, 0xde, 0x30, 0x24, 0x55, 0x94, 0xc4, 0x62, 0x45, 0x90, 0xab,
	0x45, 0x59, 0x8c, 0xc7, 0xcc, 0xb7, 0xf9, 0xf4, 0x72, 0x3d, 0x35, 0x30, 0x05, 0xef, 0x66, 0x04,
	0xb9, 0x5a, 0x98, 0x6c, 0xd4, 0x53, 0xdb, 0x97, 0x84, 0xb2, 0x72, 0x9a, 0xb4, 0xf6, 0x21, 0xfc,
	0x80, 0xe4, 0x6c, 0x2a, 0xe2, 0x11, 0xd4, 0xa3, 0xdd, 0x51, 0xa5, 0x6a, 0xbc, 0x7b, 0x0f, 0x77,
	0xa0, 0x37, 0x3f, 0xd8, 0xa8, 0xa7, 0x36, 0xb3, 0xbe, 0xf4, 0x31, 0xe1, 0xd9, 0x6b, 0x5c, 0x42,
	0xa8, 0xa4, 0x29, 0x8a, 0x60, 0x48, 0x55, 0x41, 0x89, 0x6f, 0xa0, 0x8d, 0x27, 0x1e, 0xd6, 0x53,
	0x5d, 0x1f, 0xd6, 0x53, 0x23, 0x0b, 0xb2, 0xf1, 0x5a, 0x6d, 0x2e, 0x53, 0xd2, 0xca, 0x59, 0xe0,
	0x91, 0xfd, 0x4b, 0xeb, 0xe2, 0xed, 0xac, 0xb1, 0x54, 0x91, 0xf4, 0x4c, 0x41, 0x35, 0x1a, 0xf5,
	0xd4, 0x10, 0x13, 0x6d, 0x4b, 0x22, 0xbc, 0x43, 0x2c, 0xbe, 0x8a, 0x36, 0x88, 0xd2, 0x9c, 0x11,
	0xef, 0xa1, 0xe2, 0xcf, 0x45, 0x16, 0xdf, 0xc7, 0xc4, 0x9b, 0x32, 0x08, 0x4f, 0x45, 0xe1, 0xaf,
	0x70, 0x68, 0xbb, 0x3d, 0x82, 0xfc, 0x05, 0x6a, 0x95, 0x62, 0xd5, 0xfc, 0x17, 0xdf, 0x48, 0x87,
	0x99, 0x89, 0x30, 0xcc, 0xa4, 0x54, 0x6a, 0xd4, 0x53, 0xc9, 0x56, 0x14, 0x2e, 0xb1, 0x84, 0xdf,
	0xb6, 0xe2, 0x0d, 0x6f, 0xfe, 0xc5, 0x2f, 0x21, 0xec, 0x36, 0x88, 0x2a, 0x94, 0xa5, 0xf8, 0x33,
	0x54, 0x8b, 0xdd, 0x8d, 0x7a, 0x6a, 0x87, 0x97, 0xd1, 0xcc, 0x36, 0x84, 0x1f, 0x74, 0x9a, 0xed,
	0x65, 0xa1, 0x2c, 0xe1, 0xdb, 0xa8, 0x5f, 0x56, 0x0d, 0xa9, 0x2a, 0xe9, 0x86, 0x39, 0xae, 0x14,
	0xdf, 0x44, 0xe5, 0x5c, 0x8c, 0x8c, 0x66, 0x98, 0x8d, 0xea, 0x12, 0x46, 0xf8, 0xcd, 0xd6, 0x77,
	0x5e, 0x30, 0x24, 0x3c, 0x8e, 0x06, 0x04, 0x5d, 0x97, 0x8c, 0xa2, 0xac, 0x16, 0x45, 0x49, 0xd5,
	0xca, 0xf1, 0x5e, 0x3a, 0xda, 0x8e, 0x46, 0x3d, 0xf5, 0x2c, 0xeb, 0xef, 0x7e, 0x4f, 0xf8, 0xcd,
	0xf4, 0x41, 0x41, 0x9d, 0x34, 0xbf, 0xe2, 0x3c, 0xda, 0xc2, 0x1a, 0x68, 0x35, 0x03, 0x24, 0x20,
	0x2a, 0x21, 0xd1, 0xa8, 0xa7, 0xb6, 0x39, 0x25, 0x34, 0x1b, 0x10, 0xbe, 0x9f, 0x3e, 0x99, 0xae,
	0x19, 0x4c, 0xc6, 0x2c, 0xda, 0x58, 0x96, 0xd5, 0x62, 0xa9, 0x1a, 0xef, 0xa3, 0x5d, 0xc7, 0x23,
	0x43, 0xed, 0x67, 0x03, 0x31, 0x29, 0x84, 0xef, 0x29, 0xcb, 0xea, 0x44, 0x95, 0x8c, 0xa1, 0xa1,
	0xab, 0xa6, 0xc7, 0x53, 0xef, 0xe3, 0xa5, 0xd7, 0x6b, 0x92, 0x6e, 0xe0, 0xdd, 0xb6, 0x03, 0xe6,
	0xfb, 0x1b, 0xf5, 0x54, 0x2f, 0xb0, 0x24, 0x12, 0xd3, 0x1f, 0xc9, 0x2d, 0x84, 0x9d, 0x7d, 0xf4,
	0x8a, 0xa6, 0xea, 0x12, 0xbe, 0x84, 0x7a, 0xa8, 0x4b, 0xd3, 0x7e, 0x7d, 0x63, 0x3b, 0x33, 0x5e,
	0xb1, 0x26, 0x43, 0xfb, 0xe4, 0x87, 0x4d, 0xed, 0x6d, 0x6f, 0xa3, 0x4d, 0x08, 0xcf, 0xfa, 0x93,
	0x71, 0x94, 0xb4, 0xc5, 0x9b, 0x01, 0x21, 0x0f, 0x1f, 0x27, 0x43, 0xea, 0xf7, 0x55, 0x0e, 0xa5,
	0xda, 0x4a, 0x00, 0x6d, 0x5f, 0x43, 0x88, 0x8e, 0xa6, 0x9b, 0xaf, 0x41, 0xe5, 0x94, 0x8f, 0xca,
	0x54, 0xca, 0x7e, 0x53, 0xed, 0xe5, 0x7a, 0x0a, 0xcd, 0x36, 0xbb, 0xda, 0x7e, 0x6d, 0x8b, 0x23,
	0xbc, 0x43, 0x36, 0xf9, 0x80, 0x43, 0xcf, 0xb9, 0xb5, 0x99, 0x9e, 0x9f, 0x36, 0xc3, 0x4a, 0x7e,
	0x29, 0x57, 0xa9, 0x58, 0x90, 0x0e, 0xa0, 0x8d, 0x42, 0xa5, 0x52, 0x6c, 0xc2, 0x1a, 0xb2, 0x2d,
	0xc6, 0x9e, 0x13, 0xbe, 0x47, 0xa8, 0x54, 0x9c, 0x41, 0x2b, 0xe6, 0x1f, 0xb4, 0x6e, 0x21, 0x64,
	0x47, 0x6f, 0x1a, 0xe1, 0xfa, 0xc6, 0x46, 0x32, 0x6c, 0x72, 0x64, 0xcc, 0x50, 0x9f, 0x61, 0x2b,
	0x83, 0x05, 0x73, 0x46, 0x58, 0x90, 0x40, 0x9b, 0xfc, 0xb3, 0x36, 0x2c, 0x5b, 0x06, 0xe1, 0x1d,
	0x02, 0xc9, 0x5f, 0x39, 0x44, 0xfc, 0x60, 0xb5, 0xe1, 0xb9, 0xbb, 0x53, 0x3c, 0xe3, 0x57, 0x5d,
	0x78, 0x63, 0x14, 0xef, 0xfe, 0x40, 0xbc, 0x4c, 0xcd, 0x30, 0x80, 0x17, 0xd1, 0xb3, 0x14, 0x6f,
	0x4e, 0x51, 0x98, 0x5a, 0x96, 0xe9, 0xdc, 0x44, 0x73, 0x4f, 0x9a, 0xe8, 0x07, 0x1c, 0xda, 0xd6,
	0x3a, 0xf0, 0x4a, 0x97, 0xeb, 0x5e, 0x8b, 0xcb, 0x75, 0x9c, 0xbb, 0x1f, 0x73, 0x28, 0xe1, 0xc6,
	0xb0, 0xca, 0xc9, 0x7f, 0xcb, 0x43, 0xd1, 0x27, 0xc8, 0xf5, 0xaf, 0x39, 0xb4, 0xd3, 0x53, 0xcf,
	0x4f, 0x1b, 0xe1, 0xff, 0xe6, 0xd0, 0x41, 0x0f, 0x20, 0x39, 0x55, 0x74, 0x66, 0x4b, 0xd1, 0xf9,
	0x9f, 0x6a, 0x9b, 0x8a, 0xed, 0x8c, 0x92, 0x78, 0x75, 0x38, 0x36, 0xfd, 0x91, 0x43, 0x87, 0xc2,
	0xa0, 0xff, 0xb4, 0x59, 0xf5, 0xed, 0x18, 0xca, 0x38, 0x62, 0xee, 0x64, 0x33, 0xe2, 0x3a, 0x61,
	0xe5, 0x54, 0xb1, 0xa3, 0xeb, 0x8a, 0xd7, 0x14, 0xe8, 0x5e, 0xeb, 0x14, 0xd8, 0xf0, 0xa4, 0xa7,
	0x80, 0x80, 0xb2, 0xa1, 0x99, 0x82, 0x69, 0x90, 0x41, 0x9b, 0xa8, 0x19, 0x8b, 0x05, 0x8b, 0xac,
	0xad, 0x8d, 0x7a, 0x6a, 0x8b, 0xc3, 0xd0, 0xc5, 0x82, 0x48, 0xf8, 0x67, 0xe8, 0xc7, 0x82, 0x48,
	0xde, 0xe7, 0xd0, 0x61, 0xc7, 0x18, 0x22, 0x9b, 0x64, 0x05, 0x35, 0xa7, 0x28, 0xce, 0x51, 0xf4,
	0x75, 0x17, 0xe5, 0x1e, 0x70, 0xe8, 0x48, 0x38, 0xc5, 0x81, 0x99, 0x51, 0xd4, 0xcb, 0xf0, 0xcb,
	0xa2, 0x4e, 0x9d, 0x64, 0x43, 0x7e, 0xb8, 0x51, 0x4f, 0x0d, 0x3a, 0xa9, 0x91, 0x45, 0x9d, 0xf0,
	0x9b, 0x80, 0x1b, 0xbd, 0xe3, 0xae, 0xf0, 0x0e, 0x87, 0xf6, 0xb8, 0x5c, 0x9c, 0xc1, 0x50, 0xa9,
	0x99, 0x2d, 0xc6, 0x9b, 0x53, 0x9a, 0x8b, 0x92, 0x2a, 0x3d, 0x71, 0xbe, 0xdf, 0xb7, 0x32, 0x40,
	0x6f, 0x5d, 0xd7, 0x2f, 0xc9, 0xff, 0xb5, 0x66, 0xf8, 0x75, 0xed, 0xb6, 0xa4, 0x5e, 0x31, 0x77,
	0x45, 0xe2, 0xd3, 0xb4, 0x8e, 0x7c, 0xc7, 0x72, 0x94, 0x40, 0xfc, 0xcd, 0x6c, 0x77, 0xb3, 0x61,
	0x36, 0x2d, 0x96, 0x69, 0x5b, 0x98, 0x77, 0x53, 0x91, 0xf7, 0xf2, 0x5b, 0x99, 0x5e, 0x4e, 0x59,
	0x84, 0xef, 0x33, 0x6c, 0x2d, 0xc8, 0x7b, 0x1c, 0x7a, 0xbe, 0x55, 0xb5, 0x9c, 0xb9, 0x63, 0xbc,
	0x21, 0xeb, 0xd2, 0xfa, 0x4c, 0xae, 0xfe, 0xc2, 0xa1, 0x91, 0x20, 0x95, 0x81, 0xc7, 0xcf, 0xa3,
	0x3e, 0x86, 0xba, 0x28, 0x0a, 0x86, 0x00, 0xeb, 0xf2, 0x5e, 0xef, 0x75, 0x99, 0x09, 0x9a, 0x14,
	0x0c, 0xe1, 0x8a, 0x50, 0xc9, 0x27, 0x60, 0x7d, 0xc6, 0xcd, 0xdd, 0xae, 0x25, 0x85, 0xf0, 0xa8,
	0xdc, 0x6c, 0xda, 0x71, 0xd7, 0xb9, 0x04, 0x89, 0x24, 0xf5, 0xf7, 0x09, 0xad, 0xa6, 0x1a, 0xab,
	0x33, 0x0a, 0xb9, 0x81, 0x76, 0x79, 0x0b, 0x02, 0xaa, 0x4e, 0xa2, 0x3e, 0x16, 0x1b, 0x4a, 0xe6,
	0x3b, 0x10, 0xb7, 0xcd, 0x66, 0xc0, 0xf1, 0xd2, 0xda, 0x2f, 0x51, 0x29, 0xe4, 0x3f, 0x56, 0x92,
	0xd4, 0x22, 0xf9, 0x29, 0xf1, 0xed, 0x79, 0xe7, 0xe2, 0xed, 0x83, 0x7e, 0xad, 0x34, 0xdf, 0x8f,
	0xa1, 0x17, 0x60, 0xd6, 0x1b, 0x82, 0x32, 0x2b, 0x28, 0x35, 0xe9, 0xb2, 0x56, 0xba, 0xfd, 0x74,
	0x05, 0xd2, 0xfb, 0x1c, 0x1a, 0x8d, 0x40, 0x02, 0x70, 0x7e, 0x05, 0x6d, 0x5e, 0x34, 0x9b, 0x16,
	0x15, 0xda, 0x16, 0xa2, 0xe9, 0xa1, 0xf0, 0x91, 0x94, 0xef, 0x5b, 0xb4, 0x87, 0x22, 0xef, 0x5a,
	0x29, 0x83, 0xfb, 0xc0, 0x78, 0x9d, 0x6e, 0x45, 0x7f, 0x67, 0x25, 0x0d, 0xde, 0xda, 0x02, 0x45,
	0xff, 0x87, 0x86, 0x5a, 0x8d, 0x6b, 0x25, 0x0f, 0xbb, 0x1a, 0xf5, 0x54, 0xdc, 0xdb, 0xfe, 0x3a,
	0xe1, 0xb7, 0xb8, 0x27, 0x40, 0xe7, 0x73, 0x89, 0x79, 0x20, 0xff, 0x9a, 0x21, 0xcc, 0x29, 0x12,
	0xdb, 0x4c, 0xb5, 0x9e, 0xeb, 0xe5, 0xd1, 0x16, 0x9d, 0xbe, 0x2e, 0x5a, 0xe9, 0x0e, 0x58, 0xc1,
	0x71, 0x50, 0xda, 0xd2, 0x80, 0xf0, 0xfd, 0xba, 0x2d, 0xb1, 0x20, 0x92, 0x6f, 0x59, 0xbc, 0x79,
	0x0f, 0x04, 0xbc, 0x69, 0x68, 0x08, 0x04, 0x99, 0x6b, 0x42, 0xd1, 0x79, 0x70, 0xf9, 0xbc, 0xf7,
	0x32, 0xc3, 0xc4, 0x99, 0x8b, 0x0d, 0x13, 0xe9, 0xa0, 0x77, 0x85, 0x24, 0xc2, 0x03, 0x8e, 0x66,
	0x73, 0xf2, 0x13, 0x0e, 0xe2, 0xb8, 0x4b, 0xad, 0xf5, 0x38, 0xf1, 0xfe, 0xc1, 0xa1, 0xdd, 0x6d,
	0x34, 0x05, 0xf2, 0x74, 0x6f, 0xf2, 0xba, 0xc3, 0x93, 0xb7, 0x07, 0x56, 0xe9, 0xf0, 0x04, 0x76,
	0x7c, 0x7e, 0xfe, 0xc0, 0xca, 0x75, 0x5b, 0x61, 0xaf, 0x93, 0x10, 0x4d, 0x7e, 0x68, 0x25, 0xa3,
	0x81, 0x0a, 0x7e, 0x52, 0x73, 0xfc, 0x5d, 0x0e, 0x9d, 0x5a, 0x11, 0xb2, 0xe8, 0xab, 0x2b, 0x42,
	0xa5, 0x22, 0xab, 0x0b, 0xeb, 0x8a, 0xcf, 0x0f, 0x38, 0xf4, 0xe2, 0x2a, 0xb4, 0x05, 0x72, 0xbf,
	0xcd, 0xa1, 0xb8, 0xd4, 0xa6, 0x23, 0x90, 0x7c, 0xdc, 0x9b, 0xe4, 0x5c, 0xa5, 0xd2, 0x6e, 0x44,
	0x33, 0x33, 0xcd, 0xef, 0x6d, 0xd4, 0x53, 0x29, 0x37, 0x88, 0xd6, 0x76, 0x84, 0x6f, 0x3b, 0x36,
	0xf9, 0x99, 0x75, 0xf2, 0xe7, 0x0b, 0x6b, 0xdd, 0x45, 0x9d, 0x77, 0x62, 0x90, 0x8d, 0x06, 0xa8,
	0x0d, 0xf4, 0x7f, 0xd7, 0x9f, 0xfe, 0xee, 0xd5, 0xd3, 0xbf, 0x1f, 0x42, 0xd3, 0xea, 0x4d, 0xd0,
	0xf1, 0x50, 0xf5, 0xd3, 0xe6, 0x46, 0x6a, 0xf6, 0x32, 0xa5, 0x65, 0x7a, 0x7e, 0xdd, 0x9f, 0x39,
	0x3d, 0xe6, 0xd0, 0xfe, 0x40, 0x9d, 0xc1, 0xb8, 0xaf, 0xa0, 0x67, 0x8c, 0x45, 0xc5, 0xb1, 0xf3,
	0x1b, 0xf1, 0x36, 0xe5, 0xf5, 0x45, 0x85, 0xa5, 0x76, 0xd6, 0xe6, 0x6f, 0x1b, 0xd8, 0x6e, 0x00,
	0xb6, 0xcf, 0x4c, 0x08, 0xe1, 0x2d, 0x71, 0x1d, 0xb7, 0xcc, 0x05, 0x34, 0xec, 0x02, 0x19, 0x7d,
	0xbb, 0xf7, 0x16, 0x07, 0x65, 0x26, 0x5b, 0x04, 0xb0, 0x72, 0x07, 0x0d, 0xd9, 0xa5, 0x75, 0x77,
	0x4a, 0xfc, 0xff, 0x91, 0x0f, 0x18, 0xe2, 0xad, 0x55, 0x7c, 0x10, 0x48, 0xf8, 0x41, 0xfb, 0x19,
	0xe4, 0xcd, 0x3a, 0x54, 0x53, 0x3f, 0xa3, 0x4b, 0xd5, 0x2b, 0x4b, 0x33, 0x9a, 0x2e, 0x9b, 0x58,
	0x3b, 0x5b, 0xbd, 0x24, 0x7f, 0xeb, 0x86, 0x7c, 0xd1, 0x73, 0xd4, 0x4f, 0x98, 0x12, 0x5c, 0x44,
	0xbd, 0x86, 0xb9, 0x93, 0x29, 0x8a, 0x35, 0x09, 0x90, 0xe4, 0x23, 0x0f, 0x38, 0x68, 0x1d, 0xf2,
	0x80, 0x20, 0xc2, 0x6f, 0xa2, 0x9f, 0x27, 0x6b, 0x12, 0xfe, 0x22, 0xda, 0x2a, 0x2c, 0x0a, 0xb2,
	0x42, 0x17, 0x5d, 0x43, 0x2b, 0xce, 0x69, 0xd5, 0xaa, 0x76, 0x07, 0xee, 0xa9, 0x5c, 0x8e, 0x3c,
	0x54, 0x02, 0x6c, 0xb1, 0x52, 0x24, 0xe1, 0x87, 0x9a, 0x4f, 0xaf, 0x6b, 0x79, 0xfa, 0x0c, 0xeb,
	0x68, 0x50, 0x58, 0x94, 0xaa, 0xc2, 0x82, 0x54, 0x2c, 0x55, 0xe1, 0xbe, 0x08, 0xbb, 0xf5, 0x52,
	0x88, 0x7c, 0xed, 0x60, 0xbb, 0x35, 0xb4, 0x5b, 0x1e, 0xe1, 0x07, 0xe0, 0xd1, 0x44, 0x95, 0x5e,
	0x10, 0x21, 0xd3, 0x70, 0xa0, 0x65, 0x1a, 0xdc, 0x19, 0x17, 0xe8, 0x96, 0xd1, 0xf4, 0xf0, 0x88,
	0xa7, 0xba, 0x66, 0x3a, 0x32, 0x12, 0x24, 0x11, 0x26, 0xd2, 0x97, 0x38, 0xd4, 0x5f, 0xd3, 0x25,
	0xfb, 0x0d, 0x04, 0x9e, 0xd3, 0xde, 0x81, 0x87, 0x1e, 0xdc, 0x06, 0x2d, 0x24, 0x49, 0x08, 0x46,
	0xb0, 0x6f, 0x31, 0xc5, 0x17, 0xc1, 0xd6, 0x34, 0x28, 0xb9, 0x07, 0x24, 0x3f, 0xe7, 0xa0, 0xb6,
	0x43, 0x63, 0x21, 0x9b, 0x67, 0x39, 0x55, 0x64, 0xa7, 0x5b, 0xd7, 0x0c, 0xc1, 0x90, 0x75, 0x43,
	0x2e, 0xad, 0xcf, 0xc5, 0xfb, 0xcd, 0x18, 0x54, 0x5b, 0xc2, 0xe8, 0x6e, 0xfb, 0xae, 0x99, 0x9a,
	0x35, 0xdf, 0x3a, 0x58, 0xdf, 0xef, 0xcd, 0xfa, 0x4c, 0x6b, 0xf3, 0xd6, 0x6d, 0xc4, 0x0a, 0x79,
	0x84, 0x5f, 0x39, 0x46, 0xa7, 0xd7, 0x80, 0xb1, 0x5f, 0x1d, 0x41, 0x3d, 0x94, 0x0c, 0xfc, 0x26,
	0x87, 0x90, 0x7d, 0xc6, 0x84, 0xdb, 0xc0, 0x5a, 0x71, 0xfd, 0x26, 0x71, 0x20, 0xb8, 0x21, 0x53,
	0x87, 0x1c, 0xbc, 0xff, 0x87, 0x8f, 0xbf, 0x19, 0xdb, 0x8b, 0x9f, 0xcb, 0xb6, 0xbf, 0x62, 0xa7,
	0x67, 0xef, 0xca, 0xe2, 0x3d, 0xfc, 0x11, 0x07, 0xd7, 0x6a, 0xda, 0x7a, 0x03, 0x3e, 0xe3, 0x33,
	0x6e, 0x90, 0x57, 0x26, 0xce, 0xae, 0xae, 0x33, 0x00, 0x99, 0xa0, 0x40, 0xce, 0xe1, 0x33, 0xde,
	0x40, 0x4c, 0x57, 0x49, 0x5b, 0xf9, 0x56, 0xda, 0xb4, 0x69, 0x9a, 0xba, 0x52, 0xda, 0x74, 0xa5,
	0xec, 0x5d, 0xea, 0xef, 0xf7, 0xf0, 0x03, 0x0e, 0x6d, 0x6f, 0x73, 0xef, 0x07, 0x1f, 0x0b, 0xe2,
	0xd4, 0xeb, 0xa2, 0x51, 0xe2, 0x78, 0xc4, 0x5e, 0x80, 0xe6, 0x45, 0x8a, 0xe6, 0x28, 0x1e, 0xf5,
	0x33, 0x8b, 0xd9, 0x35, 0x3d, 0xb7, 0x94, 0xa6, 0xdf, 0xd2, 0xb2, 0xc8, 0xcc, 0xf4, 0xa1, 0x75,
	0x53, 0xc2, 0xf3, 0x5a, 0x0d, 0x3e, 0x19, 0x46, 0x21, 0x8f, 0xfb, 0x45, 0x89, 0x53, 0xd1, 0x3b,
	0x02, 0x98, 0x02, 0x05, 0x33, 0x81, 0x73, 0x81, 0x60, 0xb4, 0xf9, 0x34, 0xb5, 0x84, 0x89, 0x4a,
	0xa8, 0x54, 0xb2, 0x77, 0x59, 0x14, 0xba, 0xd7, 0x34, 0xd0, 0x37, 0x38, 0x34, 0xe0, 0xae, 0xcb,
	0xe3, 0xc3, 0x3e, 0x7a, 0xb5, 0xde, 0xb4, 0x49, 0x1c, 0x09, 0xd7, 0x18, 0x14, 0xdf, 0x47, 0x15,
	0x4f, 0xe2, 0x5d, 0x7e, 0x8a, 0xe3, 0xf7, 0x38, 0xb4, 0xd5, 0xe3, 0xae, 0x00, 0x7e, 0x21, 0xcc,
	0x58, 0x2e, 0x8a, 0x47, 0x23, 0xf4, 0x00, 0x15, 0x8f, 0x51, 0x15, 0x33, 0xf8, 0x88, 0x9f, 0x8a,
	0x26, 0x9d, 0x39, 0x07, 0x9d, 0xf8, 0x7e, 0x0c, 0xae, 0x5e, 0xf9, 0x5e, 0x6f, 0xc0, 0xe3, 0xa1,
	0xf5, 0xf1, 0xde, 0x92, 0x27, 0x2e, 0xac, 0x5e, 0x00, 0xe0, 0xbb, 0x49, 0xf1, 0x5d, 0xc3, 0x57,
	0x83, 0xf0, 0x09, 0x95, 0x4a, 0x5a, 0x50, 0x45, 0xb7, 0x8f, 0x3b, 0x26, 0x50, 0xeb, 0x76, 0xfe,
	0x1e, 0xfe, 0x51, 0x0c, 0x36, 0x14, 0xc1, 0x15, 0x7e, 0x3c, 0x19, 0x38, 0xf9, 0x43, 0x5c, 0xa5,
	0x48, 0x4c, 0xad, 0x51, 0x0a, 0x70, 0xa2, 0x50, 0x4e, 0xe6, 0xb1, 0xe8, 0xc3, 0x49, 0x5a, 0x16,
	0x5d, 0xde, 0xe4, 0x0e, 0x7d, 0x26, 0x51, 0x5e, 0xfe, 0xe5, 0x45, 0xd3, 0xbf, 0x38, 0xb4, 0x2f,
	0x4c, 0xad, 0x1f, 0xe7, 0x02, 0xd1, 0x05, 0x5d, 0x70, 0x48, 0xe4, 0xd7, 0x22, 0x02, 0xd8, 0x79,
	0x89, 0xb2, 0x33, 0x85, 0x27, 0x7c, 0xd8, 0x29, 0x88, 0xcd, 0x39, 0x23, 0xab, 0x69, 0x41, 0x51,
	0xd2, 0xce, 0xad, 0xb8, 0x6e, 0x3b, 0xca, 0x6f, 0x38, 0xb4, 0xa3, 0x6d, 0xe1, 0x1d, 0x9f, 0x08,
	0x31, 0xbd, 0x3d, 0x6e, 0x15, 0x24, 0x4e, 0x46, 0xee, 0x07, 0xd8, 0xce, 0x50, 0x6c, 0xc7, 0xf1,
	0x51, 0x7f, 0xcb, 0x33, 0x70, 0x2a, 0xb3, 0x7e, 0x33, 0x76, 0x7e, 0x3d, 0x06, 0x86, 0x0c, 0xa8,
	0x45, 0xfb, 0x1a, 0x32, 0x5c, 0x1d, 0xdf, 0xd7, 0x90, 0x21, 0x4b, 0xe1, 0xa4, 0x48, 0xc1, 0xde,
	0xc4, 0x37, 0xbc, 0xc1, 0xd2, 0x5a, 0x76, 0x9a, 0x15, 0x64, 0x21, 0xc0, 0x45, 0x0c, 0x00, 0xcb,
	0x56, 0x42, 0xd3, 0xb6, 0x9c, 0xec, 0x9b, 0xd0, 0x04, 0xd5, 0xcd, 0x7d, 0x13, 0x9a, 0xc0, 0x0a,
	0x36, 0x99, 0xa2, 0xf0, 0xc7, 0xf1, 0xb9, 0x10, 0xf0, 0xe9, 0x4d, 0xef, 0xf4, 0x1d, 0x59, 0x97,
	0x5a, 0x57, 0x4e, 0xfc, 0x0b, 0x0e, 0x4e, 0x14, 0x5a, 0xca, 0x94, 0x78, 0x34, 0xc8, 0xd7, 0x56,
	0xd4, 0x9c, 0x13, 0x63, 0x51, 0xba, 0x00, 0x8c, 0xb3, 0x14, 0xc6, 0x09, 0x7c, 0xcc, 0x6f, 0xca,
	0xd2, 0xaa, 0x27, 0x4c, 0x5a, 0xd7, 0x42, 0xf5, 0xb5, 0x18, 0xda, 0x1b, 0xa2, 0xc8, 0x8a, 0x2f,
	0x84, 0xd7, 0xac, 0xcd, 0x8c, 0xcd, 0xad, 0x41, 0x02, 0x40, 0x15, 0x28, 0xd4, 0xcf, 0xe1, 0x9b,
	0x11, 0xa0, 0x46, 0x9c, 0xb2, 0xdf, 0x8f, 0xc1, 0xd9, 0x6c, 0x98, 0x32, 0x28, 0xbe, 0xe8, 0x3b,
	0x01, 0x43, 0x17, 0x93, 0x13, 0x97, 0xd6, 0x2c, 0x27, 0x9c, 0x4b, 0xd3, 0x5a, 0x6b, 0x9a, 0x1d,
	0x9a, 0xac, 0xce, 0xa5, 0x7f, 0x6b, 0xc5, 0x6b, 0xaf, 0x9a, 0xa7, 0x6f, 0xbc, 0xf6, 0x29, 0xe9,
	0xfa, 0xc6, 0x6b, 0xbf, 0xe2, 0x2a, 0x39, 0x4f, 0xf1, 0x9e, 0xc2, 0x27, 0xbc, 0xf1, 0x9a, 0xfa,
	0x57, 0x55, 0x41, 0x61, 0x8b, 0xb2, 0x2c, 0xae, 0xc8, 0xd3, 0x1e, 0x59, 0x70, 0xbc, 0x4a, 0x91,
	0xbe, 0x70, 0x7c, 0x8a, 0xa4, 0xbe, 0x70, 0xfc, 0x6a, 0x9e, 0x24, 0x4f, 0xe1, 0x9c, 0xc5, 0xa7,
	0xbd, 0xe1, 0xb0, 0x6a, 0x0e, 0x6c, 0x47, 0xe6, 0x96, 0xe8, 0x8e, 0xa4, 0xa5, 0xd8, 0x7a, 0x0f,
	0xff, 0xd2, 0x3a, 0x9e, 0x6c, 0x2d, 0x42, 0xe1, 0xb1, 0xb0, 0x6a, 0x39, 0x2c, 0x73, 0x34, 0x52,
	0x1f, 0x80, 0x71, 0x9a, 0xc2, 0x38, 0x86, 0xc7, 0xc2, 0xc1, 0x68, 0x0d, 0x48, 0xfb, 0xc2, 0xd4,
	0xd0, 0x7c, 0x17, 0xd1, 0x70, 0x05, 0x42, 0xdf, 0x45, 0x34, 0x64, 0x09, 0x8f, 0xbc, 0x4a, 0xb1,
	0xbe, 0x82, 0x67, 0x43, 0x63, 0x75, 0x79, 0xdc, 0x4c, 0x90, 0xc3, 0x3d, 0x88, 0xc1, 0xbd, 0x8c,
	0x28, 0x35, 0x30, 0xfc, 0x72, 0x48, 0x87, 0x0a, 0x59, 0xfa, 0x4b, 0x4c, 0x3f, 0x31, 0x79, 0x40,
	0xdb, 0x6d, 0x4a, 0x9b, 0x84, 0x4b, 0xed, 0x1d, 0xd7, 0x25, 0x33, 0x5d, 0x66, 0x42, 0x9d, 0x1c,
	0x4e, 0x85, 0xe5, 0xf0, 0xef, 0xd6, 0x0f, 0x61, 0x7c, 0x55, 0xf5, 0xdd, 0x8d, 0x85, 0x29, 0xd5,
	0xf9, 0xee, 0xc6, 0x42, 0x15, 0xcd, 0xc8, 0x25, 0x4a, 0x4b, 0x0e, 0x8f, 0xaf, 0x8e, 0x16, 0xdb,
	0x8d, 0x3e, 0xb6, 0x7e, 0x60, 0xd5, 0xbe, 0x98, 0x83, 0x7d, 0xd3, 0xa7, 0xa0, 0xba, 0x55, 0xe2,
	0xdc, 0x2a, 0x7b, 0x03, 0xd2, 0x49, 0x8a, 0xf4, 0x3c, 0x3e, 0xdb, 0x26, 0xfb, 0x5a, 0x54, 0x9a,
	0x9b, 0x4e, 0xc7, 0xee, 0x81, 0x06, 0x72, 0xc7, 0xf6, 0xe1, 0x7b, 0x1c, 0xea, 0x77, 0x8d, 0x88,
	0x0f, 0x85, 0x50, 0xcb, 0x82, 0x70, 0x38, 0x54, 0x5b, 0x50, 0x78, 0x94, 0x2a, 0x7c, 0x18, 0x1f,
	0x0c, 0x52, 0xd8, 0xd6, 0xee, 0xf7, 0x1c, 0x8a, 0xb7, 0xab, 0x90, 0xe0, 0xe3, 0x01, 0xa7, 0x71,
	0xde, 0x75, 0x9c, 0xc4, 0x89, 0xa8, 0xdd, 0x40, 0xfd, 0x8b, 0x54, 0xfd, 0x0b, 0xf8, 0xbc, 0xcf,
	0xf1, 0x5d, 0x79, 0x29, 0x5d, 0x81, 0xce, 0x6d, 0x0f, 0x88, 0xbe, 0x6c, 0x6d, 0xea, 0x83, 0x0f,
	0x92, 0x7d, 0x37, 0xf5, 0xa1, 0xcf, 0xd0, 0x7d, 0x37, 0xf5, 0xe1, 0x4f, 0xb3, 0xc9, 0x34, 0x25,
	0xa0, 0x80, 0x2f, 0x79, 0x13, 0x40, 0x27, 0x96, 0x95, 0x1a, 0x99, 0xd1, 0x05, 0x32, 0x7f, 0xdd,
	0x92, 0xd6, 0xca, 0x48, 0xfe, 0xea, 0xc3, 0x3f, 0x27, 0xbb, 0xde, 0x5e, 0x4e, 0x76, 0x3d, 0x5c,
	0x4e, 0x72, 0x8f, 0x96, 0x93, 0xdc, 0x47, 0xcb, 0x49, 0xee, 0xad, 0xc7, 0xc9, 0xae, 0x47, 0x8f,
	0x93, 0x5d, 0x7f, 0x7a, 0x9c, 0xec, 0xfa, 0x6c, 0xd6, 0x55, 0x82, 0x31, 0x07, 0x4d, 0x6b, 0xf3,
	0xf3, 0x72, 0x49, 0x16, 0x14, 0x4b, 0x09, 0x4b, 0x0d, 0x5a, 0x8f, 0x99, 0xdb, 0x48, 0x7f, 0x6b,
	0x7d, 0xf4, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x47, 0xba, 0x35, 0x27, 0x3e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	QueryUserExtendedPairTotalData(ctx context.Context, in *QueryUserExtendedPairTotalDataRequest, opts ...grpc.CallOption) (*QueryUserExtendedPairTotalDataResponse, error)
	QueryVaultInfoByVaultID(ctx context.Context, in *QueryVaultInfoByVaultIDRequest, opts ...grpc.CallOption) (*QueryVaultInfoByVaultIDResponse, error)
	QueryVaultInfoOfOwnerByApp(ctx context.Context, in *QueryVaultInfoOfOwnerByAppRequest, opts ...grpc.CallOption) (*QueryVaultInfoOfOwnerByAppResponse, error)
	QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	QueryAllVaultsByApp(ctx context.Context, in *QueryAllVaultsByAppRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppResponse, error)
	QueryAllVaultsByAppAndExtendedPair(ctx context.Context, in *QueryAllVaultsByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppAndExtendedPairResponse, error)
	QueryVaultIDOfOwnerByExtendedPairAndApp(ctx context.Context, in *QueryVaultIDOfOwnerByExtendedPairAndAppRequest, opts ...grpc.CallOption) (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse, error)
	QueryVaultIdsByAppInAllExtendedPairs(ctx context.Context, in *QueryVaultIdsByAppInAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryVaultIdsByAppInAllExtendedPairsResponse, error)
	QueryAllVaultIdsByAnOwner(ctx context.Context, in *QueryAllVaultIdsByAnOwnerRequest, opts ...grpc.CallOption) (*QueryAllVaultIdsByAnOwnerResponse, error)
	QueryTokenMintedByAppAndExtendedPair(ctx context.Context, in *QueryTokenMintedByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedByAppAndExtendedPairResponse, error)
	QueryTokenMintedAssetWiseByApp(ctx context.Context, in *QueryTokenMintedAssetWiseByAppRequest, opts ...grpc.CallOption) (*QueryTokenMintedAssetWiseByAppResponse, error)
	QueryVaultCountByApp(ctx context.Context, in *QueryVaultCountByAppRequest, opts ...grpc.CallOption) (*QueryVaultCountByAppResponse, error)
	QueryVaultCountByAppAndExtendedPair(ctx context.Context, in *QueryVaultCountByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByAppAndExtendedPairResponse, error)
	QueryTotalValueLockedByAppAndExtendedPair(ctx context.Context, in *QueryTotalValueLockedByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByAppAndExtendedPairResponse, error)
	QueryExtendedPairIDsByApp(ctx context.Context, in *QueryExtendedPairIDsByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDsByAppResponse, error)
	QueryStableVaultByVaultID(ctx context.Context, in *QueryStableVaultByVaultIDRequest, opts ...grpc.CallOption) (*QueryStableVaultByVaultIDResponse, error)
	QueryStableVaultByApp(ctx context.Context, in *QueryStableVaultByAppRequest, opts ...grpc.CallOption) (*QueryStableVaultByAppResponse, error)
	QueryStableVaultByAppAndExtendedPair(ctx context.Context, in *QueryStableVaultByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByAppAndExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByAppAndExtendedPair(ctx context.Context, in *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByApp(ctx context.Context, in *QueryExtendedPairVaultMappingByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppResponse, error)
	QueryTVLByAppOfAllExtendedPairs(ctx context.Context, in *QueryTVLByAppOfAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryTVLByAppOfAllExtendedPairsResponse, error)
	QueryTVLByApp(ctx context.Context, in *QueryTVLByAppRequest, opts ...grpc.CallOption) (*QueryTVLByAppResponse, error)
	QueryUserMyPositionByApp(ctx context.Context, in *QueryUserMyPositionByAppRequest, opts ...grpc.CallOption) (*QueryUserMyPositionByAppResponse, error)
	QueryPairsLockedAndMintedStatisticByApp(ctx context.Context, in *QueryPairsLockedAndMintedStatisticByAppRequest, opts ...grpc.CallOption) (*QueryPairsLockedAndMintedStatisticByAppResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryVault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUserExtendedPairTotalData(ctx context.Context, in *QueryUserExtendedPairTotalDataRequest, opts ...grpc.CallOption) (*QueryUserExtendedPairTotalDataResponse, error) {
	out := new(QueryUserExtendedPairTotalDataResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryUserExtendedPairTotalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultInfoByVaultID(ctx context.Context, in *QueryVaultInfoByVaultIDRequest, opts ...grpc.CallOption) (*QueryVaultInfoByVaultIDResponse, error) {
	out := new(QueryVaultInfoByVaultIDResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultInfoByVaultID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultInfoOfOwnerByApp(ctx context.Context, in *QueryVaultInfoOfOwnerByAppRequest, opts ...grpc.CallOption) (*QueryVaultInfoOfOwnerByAppResponse, error) {
	out := new(QueryVaultInfoOfOwnerByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultInfoOfOwnerByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryAllVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultsByApp(ctx context.Context, in *QueryAllVaultsByAppRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppResponse, error) {
	out := new(QueryAllVaultsByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryAllVaultsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultsByAppAndExtendedPair(ctx context.Context, in *QueryAllVaultsByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryAllVaultsByAppAndExtendedPairResponse, error) {
	out := new(QueryAllVaultsByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultIDOfOwnerByExtendedPairAndApp(ctx context.Context, in *QueryVaultIDOfOwnerByExtendedPairAndAppRequest, opts ...grpc.CallOption) (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse, error) {
	out := new(QueryVaultIDOfOwnerByExtendedPairAndAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultIDOfOwnerByExtendedPairAndApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultIdsByAppInAllExtendedPairs(ctx context.Context, in *QueryVaultIdsByAppInAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryVaultIdsByAppInAllExtendedPairsResponse, error) {
	out := new(QueryVaultIdsByAppInAllExtendedPairsResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultIdsByAppInAllExtendedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllVaultIdsByAnOwner(ctx context.Context, in *QueryAllVaultIdsByAnOwnerRequest, opts ...grpc.CallOption) (*QueryAllVaultIdsByAnOwnerResponse, error) {
	out := new(QueryAllVaultIdsByAnOwnerResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryAllVaultIdsByAnOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenMintedByAppAndExtendedPair(ctx context.Context, in *QueryTokenMintedByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryTokenMintedByAppAndExtendedPairResponse, error) {
	out := new(QueryTokenMintedByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryTokenMintedByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTokenMintedAssetWiseByApp(ctx context.Context, in *QueryTokenMintedAssetWiseByAppRequest, opts ...grpc.CallOption) (*QueryTokenMintedAssetWiseByAppResponse, error) {
	out := new(QueryTokenMintedAssetWiseByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryTokenMintedAssetWiseByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultCountByApp(ctx context.Context, in *QueryVaultCountByAppRequest, opts ...grpc.CallOption) (*QueryVaultCountByAppResponse, error) {
	out := new(QueryVaultCountByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultCountByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVaultCountByAppAndExtendedPair(ctx context.Context, in *QueryVaultCountByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryVaultCountByAppAndExtendedPairResponse, error) {
	out := new(QueryVaultCountByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryVaultCountByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalValueLockedByAppAndExtendedPair(ctx context.Context, in *QueryTotalValueLockedByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryTotalValueLockedByAppAndExtendedPairResponse, error) {
	out := new(QueryTotalValueLockedByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryTotalValueLockedByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairIDsByApp(ctx context.Context, in *QueryExtendedPairIDsByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairIDsByAppResponse, error) {
	out := new(QueryExtendedPairIDsByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryExtendedPairIDsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStableVaultByVaultID(ctx context.Context, in *QueryStableVaultByVaultIDRequest, opts ...grpc.CallOption) (*QueryStableVaultByVaultIDResponse, error) {
	out := new(QueryStableVaultByVaultIDResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryStableVaultByVaultID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStableVaultByApp(ctx context.Context, in *QueryStableVaultByAppRequest, opts ...grpc.CallOption) (*QueryStableVaultByAppResponse, error) {
	out := new(QueryStableVaultByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryStableVaultByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStableVaultByAppAndExtendedPair(ctx context.Context, in *QueryStableVaultByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryStableVaultByAppAndExtendedPairResponse, error) {
	out := new(QueryStableVaultByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryStableVaultByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByAppAndExtendedPair(ctx context.Context, in *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse, error) {
	out := new(QueryExtendedPairVaultMappingByAppAndExtendedPairResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExtendedPairVaultMappingByApp(ctx context.Context, in *QueryExtendedPairVaultMappingByAppRequest, opts ...grpc.CallOption) (*QueryExtendedPairVaultMappingByAppResponse, error) {
	out := new(QueryExtendedPairVaultMappingByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTVLByAppOfAllExtendedPairs(ctx context.Context, in *QueryTVLByAppOfAllExtendedPairsRequest, opts ...grpc.CallOption) (*QueryTVLByAppOfAllExtendedPairsResponse, error) {
	out := new(QueryTVLByAppOfAllExtendedPairsResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryTVLByAppOfAllExtendedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTVLByApp(ctx context.Context, in *QueryTVLByAppRequest, opts ...grpc.CallOption) (*QueryTVLByAppResponse, error) {
	out := new(QueryTVLByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryTVLByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUserMyPositionByApp(ctx context.Context, in *QueryUserMyPositionByAppRequest, opts ...grpc.CallOption) (*QueryUserMyPositionByAppResponse, error) {
	out := new(QueryUserMyPositionByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryUserMyPositionByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPairsLockedAndMintedStatisticByApp(ctx context.Context, in *QueryPairsLockedAndMintedStatisticByAppRequest, opts ...grpc.CallOption) (*QueryPairsLockedAndMintedStatisticByAppResponse, error) {
	out := new(QueryPairsLockedAndMintedStatisticByAppResponse)
	err := c.cc.Invoke(ctx, "/petri.vault.v1beta1.Query/QueryPairsLockedAndMintedStatisticByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryVault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	QueryUserExtendedPairTotalData(context.Context, *QueryUserExtendedPairTotalDataRequest) (*QueryUserExtendedPairTotalDataResponse, error)
	QueryVaultInfoByVaultID(context.Context, *QueryVaultInfoByVaultIDRequest) (*QueryVaultInfoByVaultIDResponse, error)
	QueryVaultInfoOfOwnerByApp(context.Context, *QueryVaultInfoOfOwnerByAppRequest) (*QueryVaultInfoOfOwnerByAppResponse, error)
	QueryAllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	QueryAllVaultsByApp(context.Context, *QueryAllVaultsByAppRequest) (*QueryAllVaultsByAppResponse, error)
	QueryAllVaultsByAppAndExtendedPair(context.Context, *QueryAllVaultsByAppAndExtendedPairRequest) (*QueryAllVaultsByAppAndExtendedPairResponse, error)
	QueryVaultIDOfOwnerByExtendedPairAndApp(context.Context, *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse, error)
	QueryVaultIdsByAppInAllExtendedPairs(context.Context, *QueryVaultIdsByAppInAllExtendedPairsRequest) (*QueryVaultIdsByAppInAllExtendedPairsResponse, error)
	QueryAllVaultIdsByAnOwner(context.Context, *QueryAllVaultIdsByAnOwnerRequest) (*QueryAllVaultIdsByAnOwnerResponse, error)
	QueryTokenMintedByAppAndExtendedPair(context.Context, *QueryTokenMintedByAppAndExtendedPairRequest) (*QueryTokenMintedByAppAndExtendedPairResponse, error)
	QueryTokenMintedAssetWiseByApp(context.Context, *QueryTokenMintedAssetWiseByAppRequest) (*QueryTokenMintedAssetWiseByAppResponse, error)
	QueryVaultCountByApp(context.Context, *QueryVaultCountByAppRequest) (*QueryVaultCountByAppResponse, error)
	QueryVaultCountByAppAndExtendedPair(context.Context, *QueryVaultCountByAppAndExtendedPairRequest) (*QueryVaultCountByAppAndExtendedPairResponse, error)
	QueryTotalValueLockedByAppAndExtendedPair(context.Context, *QueryTotalValueLockedByAppAndExtendedPairRequest) (*QueryTotalValueLockedByAppAndExtendedPairResponse, error)
	QueryExtendedPairIDsByApp(context.Context, *QueryExtendedPairIDsByAppRequest) (*QueryExtendedPairIDsByAppResponse, error)
	QueryStableVaultByVaultID(context.Context, *QueryStableVaultByVaultIDRequest) (*QueryStableVaultByVaultIDResponse, error)
	QueryStableVaultByApp(context.Context, *QueryStableVaultByAppRequest) (*QueryStableVaultByAppResponse, error)
	QueryStableVaultByAppAndExtendedPair(context.Context, *QueryStableVaultByAppAndExtendedPairRequest) (*QueryStableVaultByAppAndExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByAppAndExtendedPair(context.Context, *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse, error)
	QueryExtendedPairVaultMappingByApp(context.Context, *QueryExtendedPairVaultMappingByAppRequest) (*QueryExtendedPairVaultMappingByAppResponse, error)
	QueryTVLByAppOfAllExtendedPairs(context.Context, *QueryTVLByAppOfAllExtendedPairsRequest) (*QueryTVLByAppOfAllExtendedPairsResponse, error)
	QueryTVLByApp(context.Context, *QueryTVLByAppRequest) (*QueryTVLByAppResponse, error)
	QueryUserMyPositionByApp(context.Context, *QueryUserMyPositionByAppRequest) (*QueryUserMyPositionByAppResponse, error)
	QueryPairsLockedAndMintedStatisticByApp(context.Context, *QueryPairsLockedAndMintedStatisticByAppRequest) (*QueryPairsLockedAndMintedStatisticByAppResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryVault(ctx context.Context, req *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVault not implemented")
}
func (*UnimplementedQueryServer) QueryUserExtendedPairTotalData(ctx context.Context, req *QueryUserExtendedPairTotalDataRequest) (*QueryUserExtendedPairTotalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserExtendedPairTotalData not implemented")
}
func (*UnimplementedQueryServer) QueryVaultInfoByVaultID(ctx context.Context, req *QueryVaultInfoByVaultIDRequest) (*QueryVaultInfoByVaultIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultInfoByVaultID not implemented")
}
func (*UnimplementedQueryServer) QueryVaultInfoOfOwnerByApp(ctx context.Context, req *QueryVaultInfoOfOwnerByAppRequest) (*QueryVaultInfoOfOwnerByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultInfoOfOwnerByApp not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaults(ctx context.Context, req *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaults not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultsByApp(ctx context.Context, req *QueryAllVaultsByAppRequest) (*QueryAllVaultsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultsByApp not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultsByAppAndExtendedPair(ctx context.Context, req *QueryAllVaultsByAppAndExtendedPairRequest) (*QueryAllVaultsByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultsByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryVaultIDOfOwnerByExtendedPairAndApp(ctx context.Context, req *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) (*QueryVaultIDOfOwnerByExtendedPairAndAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultIDOfOwnerByExtendedPairAndApp not implemented")
}
func (*UnimplementedQueryServer) QueryVaultIdsByAppInAllExtendedPairs(ctx context.Context, req *QueryVaultIdsByAppInAllExtendedPairsRequest) (*QueryVaultIdsByAppInAllExtendedPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultIdsByAppInAllExtendedPairs not implemented")
}
func (*UnimplementedQueryServer) QueryAllVaultIdsByAnOwner(ctx context.Context, req *QueryAllVaultIdsByAnOwnerRequest) (*QueryAllVaultIdsByAnOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllVaultIdsByAnOwner not implemented")
}
func (*UnimplementedQueryServer) QueryTokenMintedByAppAndExtendedPair(ctx context.Context, req *QueryTokenMintedByAppAndExtendedPairRequest) (*QueryTokenMintedByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryTokenMintedAssetWiseByApp(ctx context.Context, req *QueryTokenMintedAssetWiseByAppRequest) (*QueryTokenMintedAssetWiseByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTokenMintedAssetWiseByApp not implemented")
}
func (*UnimplementedQueryServer) QueryVaultCountByApp(ctx context.Context, req *QueryVaultCountByAppRequest) (*QueryVaultCountByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByApp not implemented")
}
func (*UnimplementedQueryServer) QueryVaultCountByAppAndExtendedPair(ctx context.Context, req *QueryVaultCountByAppAndExtendedPairRequest) (*QueryVaultCountByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVaultCountByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryTotalValueLockedByAppAndExtendedPair(ctx context.Context, req *QueryTotalValueLockedByAppAndExtendedPairRequest) (*QueryTotalValueLockedByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalValueLockedByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairIDsByApp(ctx context.Context, req *QueryExtendedPairIDsByAppRequest) (*QueryExtendedPairIDsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairIDsByApp not implemented")
}
func (*UnimplementedQueryServer) QueryStableVaultByVaultID(ctx context.Context, req *QueryStableVaultByVaultIDRequest) (*QueryStableVaultByVaultIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultByVaultID not implemented")
}
func (*UnimplementedQueryServer) QueryStableVaultByApp(ctx context.Context, req *QueryStableVaultByAppRequest) (*QueryStableVaultByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultByApp not implemented")
}
func (*UnimplementedQueryServer) QueryStableVaultByAppAndExtendedPair(ctx context.Context, req *QueryStableVaultByAppAndExtendedPairRequest) (*QueryStableVaultByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStableVaultByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByAppAndExtendedPair(ctx context.Context, req *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) (*QueryExtendedPairVaultMappingByAppAndExtendedPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByAppAndExtendedPair not implemented")
}
func (*UnimplementedQueryServer) QueryExtendedPairVaultMappingByApp(ctx context.Context, req *QueryExtendedPairVaultMappingByAppRequest) (*QueryExtendedPairVaultMappingByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExtendedPairVaultMappingByApp not implemented")
}
func (*UnimplementedQueryServer) QueryTVLByAppOfAllExtendedPairs(ctx context.Context, req *QueryTVLByAppOfAllExtendedPairsRequest) (*QueryTVLByAppOfAllExtendedPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTVLByAppOfAllExtendedPairs not implemented")
}
func (*UnimplementedQueryServer) QueryTVLByApp(ctx context.Context, req *QueryTVLByAppRequest) (*QueryTVLByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTVLByApp not implemented")
}
func (*UnimplementedQueryServer) QueryUserMyPositionByApp(ctx context.Context, req *QueryUserMyPositionByAppRequest) (*QueryUserMyPositionByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserMyPositionByApp not implemented")
}
func (*UnimplementedQueryServer) QueryPairsLockedAndMintedStatisticByApp(ctx context.Context, req *QueryPairsLockedAndMintedStatisticByAppRequest) (*QueryPairsLockedAndMintedStatisticByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPairsLockedAndMintedStatisticByApp not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUserExtendedPairTotalData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserExtendedPairTotalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUserExtendedPairTotalData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryUserExtendedPairTotalData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUserExtendedPairTotalData(ctx, req.(*QueryUserExtendedPairTotalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultInfoByVaultID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoByVaultIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultInfoByVaultID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultInfoByVaultID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultInfoByVaultID(ctx, req.(*QueryVaultInfoByVaultIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultInfoOfOwnerByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoOfOwnerByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultInfoOfOwnerByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultInfoOfOwnerByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultInfoOfOwnerByApp(ctx, req.(*QueryVaultInfoOfOwnerByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryAllVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryAllVaultsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultsByApp(ctx, req.(*QueryAllVaultsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultsByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultsByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryAllVaultsByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultsByAppAndExtendedPair(ctx, req.(*QueryAllVaultsByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultIDOfOwnerByExtendedPairAndApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultIDOfOwnerByExtendedPairAndAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultIDOfOwnerByExtendedPairAndApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultIDOfOwnerByExtendedPairAndApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultIDOfOwnerByExtendedPairAndApp(ctx, req.(*QueryVaultIDOfOwnerByExtendedPairAndAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultIdsByAppInAllExtendedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultIdsByAppInAllExtendedPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultIdsByAppInAllExtendedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultIdsByAppInAllExtendedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultIdsByAppInAllExtendedPairs(ctx, req.(*QueryVaultIdsByAppInAllExtendedPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllVaultIdsByAnOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultIdsByAnOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllVaultIdsByAnOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryAllVaultIdsByAnOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllVaultIdsByAnOwner(ctx, req.(*QueryAllVaultIdsByAnOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenMintedByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenMintedByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryTokenMintedByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenMintedByAppAndExtendedPair(ctx, req.(*QueryTokenMintedByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTokenMintedAssetWiseByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenMintedAssetWiseByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTokenMintedAssetWiseByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryTokenMintedAssetWiseByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTokenMintedAssetWiseByApp(ctx, req.(*QueryTokenMintedAssetWiseByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultCountByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultCountByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultCountByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultCountByApp(ctx, req.(*QueryVaultCountByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVaultCountByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultCountByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVaultCountByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryVaultCountByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVaultCountByAppAndExtendedPair(ctx, req.(*QueryVaultCountByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalValueLockedByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalValueLockedByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalValueLockedByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryTotalValueLockedByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalValueLockedByAppAndExtendedPair(ctx, req.(*QueryTotalValueLockedByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairIDsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairIDsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairIDsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryExtendedPairIDsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairIDsByApp(ctx, req.(*QueryExtendedPairIDsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStableVaultByVaultID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultByVaultIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStableVaultByVaultID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryStableVaultByVaultID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStableVaultByVaultID(ctx, req.(*QueryStableVaultByVaultIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStableVaultByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStableVaultByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryStableVaultByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStableVaultByApp(ctx, req.(*QueryStableVaultByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStableVaultByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableVaultByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStableVaultByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryStableVaultByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStableVaultByAppAndExtendedPair(ctx, req.(*QueryStableVaultByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByAppAndExtendedPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByAppAndExtendedPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByAppAndExtendedPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryExtendedPairVaultMappingByAppAndExtendedPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByAppAndExtendedPair(ctx, req.(*QueryExtendedPairVaultMappingByAppAndExtendedPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExtendedPairVaultMappingByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExtendedPairVaultMappingByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryExtendedPairVaultMappingByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExtendedPairVaultMappingByApp(ctx, req.(*QueryExtendedPairVaultMappingByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTVLByAppOfAllExtendedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTVLByAppOfAllExtendedPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTVLByAppOfAllExtendedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryTVLByAppOfAllExtendedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTVLByAppOfAllExtendedPairs(ctx, req.(*QueryTVLByAppOfAllExtendedPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTVLByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTVLByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTVLByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryTVLByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTVLByApp(ctx, req.(*QueryTVLByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUserMyPositionByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMyPositionByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUserMyPositionByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryUserMyPositionByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUserMyPositionByApp(ctx, req.(*QueryUserMyPositionByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPairsLockedAndMintedStatisticByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPairsLockedAndMintedStatisticByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPairsLockedAndMintedStatisticByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petri.vault.v1beta1.Query/QueryPairsLockedAndMintedStatisticByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPairsLockedAndMintedStatisticByApp(ctx, req.(*QueryPairsLockedAndMintedStatisticByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "petri.vault.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryVault",
			Handler:    _Query_QueryVault_Handler,
		},
		{
			MethodName: "QueryUserExtendedPairTotalData",
			Handler:    _Query_QueryUserExtendedPairTotalData_Handler,
		},
		{
			MethodName: "QueryVaultInfoByVaultID",
			Handler:    _Query_QueryVaultInfoByVaultID_Handler,
		},
		{
			MethodName: "QueryVaultInfoOfOwnerByApp",
			Handler:    _Query_QueryVaultInfoOfOwnerByApp_Handler,
		},
		{
			MethodName: "QueryAllVaults",
			Handler:    _Query_QueryAllVaults_Handler,
		},
		{
			MethodName: "QueryAllVaultsByApp",
			Handler:    _Query_QueryAllVaultsByApp_Handler,
		},
		{
			MethodName: "QueryAllVaultsByAppAndExtendedPair",
			Handler:    _Query_QueryAllVaultsByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryVaultIDOfOwnerByExtendedPairAndApp",
			Handler:    _Query_QueryVaultIDOfOwnerByExtendedPairAndApp_Handler,
		},
		{
			MethodName: "QueryVaultIdsByAppInAllExtendedPairs",
			Handler:    _Query_QueryVaultIdsByAppInAllExtendedPairs_Handler,
		},
		{
			MethodName: "QueryAllVaultIdsByAnOwner",
			Handler:    _Query_QueryAllVaultIdsByAnOwner_Handler,
		},
		{
			MethodName: "QueryTokenMintedByAppAndExtendedPair",
			Handler:    _Query_QueryTokenMintedByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryTokenMintedAssetWiseByApp",
			Handler:    _Query_QueryTokenMintedAssetWiseByApp_Handler,
		},
		{
			MethodName: "QueryVaultCountByApp",
			Handler:    _Query_QueryVaultCountByApp_Handler,
		},
		{
			MethodName: "QueryVaultCountByAppAndExtendedPair",
			Handler:    _Query_QueryVaultCountByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryTotalValueLockedByAppAndExtendedPair",
			Handler:    _Query_QueryTotalValueLockedByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairIDsByApp",
			Handler:    _Query_QueryExtendedPairIDsByApp_Handler,
		},
		{
			MethodName: "QueryStableVaultByVaultID",
			Handler:    _Query_QueryStableVaultByVaultID_Handler,
		},
		{
			MethodName: "QueryStableVaultByApp",
			Handler:    _Query_QueryStableVaultByApp_Handler,
		},
		{
			MethodName: "QueryStableVaultByAppAndExtendedPair",
			Handler:    _Query_QueryStableVaultByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByAppAndExtendedPair",
			Handler:    _Query_QueryExtendedPairVaultMappingByAppAndExtendedPair_Handler,
		},
		{
			MethodName: "QueryExtendedPairVaultMappingByApp",
			Handler:    _Query_QueryExtendedPairVaultMappingByApp_Handler,
		},
		{
			MethodName: "QueryTVLByAppOfAllExtendedPairs",
			Handler:    _Query_QueryTVLByAppOfAllExtendedPairs_Handler,
		},
		{
			MethodName: "QueryTVLByApp",
			Handler:    _Query_QueryTVLByApp_Handler,
		},
		{
			MethodName: "QueryUserMyPositionByApp",
			Handler:    _Query_QueryUserMyPositionByApp_Handler,
		},
		{
			MethodName: "QueryPairsLockedAndMintedStatisticByApp",
			Handler:    _Query_QueryPairsLockedAndMintedStatisticByApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petri/vault/v1beta1/query.proto",
}

func (m *VaultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinCr.Size()
		i -= size
		if _, err := m.MinCr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.AssetOutDenom) > 0 {
		i -= len(m.AssetOutDenom)
		copy(dAtA[i:], m.AssetOutDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetOutDenom)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AssetInDenom) > 0 {
		i -= len(m.AssetInDenom)
		copy(dAtA[i:], m.AssetInDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetInDenom)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ExtendedPairName) > 0 {
		i -= len(m.ExtendedPairName)
		copy(dAtA[i:], m.ExtendedPairName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtendedPairName)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.CollateralizationRatio.Size()
		i -= size
		if _, err := m.CollateralizationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Debt.Size()
		i -= size
		if _, err := m.Debt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Collateral.Size()
		i -= size
		if _, err := m.Collateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoByVaultIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoByVaultIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoByVaultIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoByVaultIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoByVaultIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoByVaultIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VaultsInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoOfOwnerByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoOfOwnerByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoOfOwnerByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoOfOwnerByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoOfOwnerByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoOfOwnerByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultsInfo) > 0 {
		for iNdEx := len(m.VaultsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VaultsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vault) > 0 {
		for iNdEx := len(m.Vault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vault_Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Vault_Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultIds) > 0 {
		dAtA15 := make([]byte, len(m.VaultIds)*10)
		var j14 int
		for _, num := range m.VaultIds {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintQuery(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultIdsByAnOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultIdsByAnOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultIdsByAnOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultIdsByAnOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultIdsByAnOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultIdsByAnOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VaultIds) > 0 {
		dAtA19 := make([]byte, len(m.VaultIds)*10)
		var j18 int
		for _, num := range m.VaultIds {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintQuery(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenMinted.Size()
		i -= size
		if _, err := m.TokenMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAssetWiseByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAssetWiseByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAssetWiseByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenMintedAssetWiseByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenMintedAssetWiseByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenMintedAssetWiseByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MintedData) > 0 {
		for iNdEx := len(m.MintedData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MintedData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultCountByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultCountByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultCountByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueLocked != nil {
		{
			size := m.ValueLocked.Size()
			i -= size
			if _, err := m.ValueLocked.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDsByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDsByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDsByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairIDsByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairIDsByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairIDsByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtendedPairIds) > 0 {
		dAtA28 := make([]byte, len(m.ExtendedPairIds)*10)
		var j27 int
		for _, num := range m.ExtendedPairIds {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintQuery(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByVaultIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByVaultIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByVaultIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableVaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StableVaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByVaultIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByVaultIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByVaultIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StableMintVault) > 0 {
		for iNdEx := len(m.StableMintVault) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StableMintVault[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableVaultByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableVaultByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableVaultByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StableMintVault != nil {
		{
			size, err := m.StableMintVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExtendedPairVaultMapping != nil {
		{
			size, err := m.ExtendedPairVaultMapping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExtendedPairVaultMappingByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExtendedPairVaultMappingByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExtendedPairVaultMapping) > 0 {
		for iNdEx := len(m.ExtendedPairVaultMapping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendedPairVaultMapping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLByAppOfAllExtendedPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLByAppOfAllExtendedPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLByAppOfAllExtendedPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLByAppOfAllExtendedPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLByAppOfAllExtendedPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLByAppOfAllExtendedPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tvldata) > 0 {
		for iNdEx := len(m.Tvldata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tvldata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTVLByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTVLByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTVLByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CollateralLocked.Size()
		i -= size
		if _, err := m.CollateralLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserMyPositionByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserMyPositionByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserMyPositionByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserMyPositionByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserMyPositionByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserMyPositionByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AverageCrRatio.Size()
		i -= size
		if _, err := m.AverageCrRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AvailableToBorrow.Size()
		i -= size
		if _, err := m.AvailableToBorrow.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalDue.Size()
		i -= size
		if _, err := m.TotalDue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CollateralLocked.Size()
		i -= size
		if _, err := m.CollateralLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserExtendedPairTotalDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExtendedPairTotalDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExtendedPairTotalDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserExtendedPairTotalDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExtendedPairTotalDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExtendedPairTotalDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserTotalData) > 0 {
		for iNdEx := len(m.UserTotalData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserTotalData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsLockedAndMintedStatisticByAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsLockedAndMintedStatisticByAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsLockedAndMintedStatisticByAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPairsLockedAndMintedStatisticByAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPairsLockedAndMintedStatisticByAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPairsLockedAndMintedStatisticByAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairStatisticData) > 0 {
		for iNdEx := len(m.PairStatisticData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairStatisticData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.ExtendedPairID != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Debt.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CollateralizationRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ExtendedPairName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.InterestRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.AssetInDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetOutDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.MinCr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultInfoByVaultIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryVaultInfoByVaultIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VaultsInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultInfoOfOwnerByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultInfoOfOwnerByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultsInfo) > 0 {
		for _, e := range m.VaultsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vault) > 0 {
		for _, e := range m.Vault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vault_Id != 0 {
		n += 1 + sovQuery(uint64(m.Vault_Id))
	}
	return n
}

func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		l = 0
		for _, e := range m.VaultIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultIdsByAnOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultIdsByAnOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		l = 0
		for _, e := range m.VaultIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenMinted.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenMintedAssetWiseByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenMintedAssetWiseByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MintedData) > 0 {
		for _, e := range m.MintedData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryVaultCountByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuery(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryVaultCountByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVaultCountByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultCount != 0 {
		n += 1 + sovQuery(uint64(m.VaultCount))
	}
	return n
}

func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueLocked != nil {
		l = m.ValueLocked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDsByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairIDsByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairIds) > 0 {
		l = 0
		for _, e := range m.ExtendedPairIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableVaultByVaultIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableVaultId != 0 {
		n += 1 + sovQuery(uint64(m.StableVaultId))
	}
	return n
}

func (m *QueryStableVaultByVaultIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableVaultByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableVaultByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StableMintVault) > 0 {
		for _, e := range m.StableMintVault {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableVaultByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	return n
}

func (m *QueryStableVaultByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableMintVault != nil {
		l = m.StableMintVault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovQuery(uint64(m.ExtendedPairId))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExtendedPairVaultMapping != nil {
		l = m.ExtendedPairVaultMapping.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExtendedPairVaultMappingByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtendedPairVaultMapping) > 0 {
		for _, e := range m.ExtendedPairVaultMapping {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTVLByAppOfAllExtendedPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTVLByAppOfAllExtendedPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tvldata) > 0 {
		for _, e := range m.Tvldata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTVLByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryTVLByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollateralLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserMyPositionByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserMyPositionByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollateralLocked.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalDue.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AvailableToBorrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.AverageCrRatio.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserExtendedPairTotalDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserExtendedPairTotalDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserTotalData) > 0 {
		for _, e := range m.UserTotalData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPairsLockedAndMintedStatisticByAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPairsLockedAndMintedStatisticByAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PairStatisticData) > 0 {
		for _, e := range m.PairStatisticData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairID", wireType)
			}
			m.ExtendedPairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Debt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralizationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoByVaultIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoByVaultIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoByVaultIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoByVaultIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoByVaultIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoByVaultIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoOfOwnerByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoOfOwnerByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoOfOwnerByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoOfOwnerByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoOfOwnerByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoOfOwnerByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultsInfo = append(m.VaultsInfo, VaultInfo{})
			if err := m.VaultsInfo[len(m.VaultsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vault = append(m.Vault, Vault{})
			if err := m.Vault[len(m.Vault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultIDOfOwnerByExtendedPairAndAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultIDOfOwnerByExtendedPairAndAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultIDOfOwnerByExtendedPairAndAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultIDOfOwnerByExtendedPairAndAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultIDOfOwnerByExtendedPairAndAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault_Id", wireType)
			}
			m.Vault_Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vault_Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultIdsByAppInAllExtendedPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultIdsByAppInAllExtendedPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultIdsByAppInAllExtendedPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultIdsByAppInAllExtendedPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultIdsByAppInAllExtendedPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultIdsByAppInAllExtendedPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultIds = append(m.VaultIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VaultIds) == 0 {
					m.VaultIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultIds = append(m.VaultIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultIdsByAnOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultIdsByAnOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultIdsByAnOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultIdsByAnOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultIdsByAnOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultIdsByAnOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultIds = append(m.VaultIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VaultIds) == 0 {
					m.VaultIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultIds = append(m.VaultIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAssetWiseByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAssetWiseByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAssetWiseByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenMintedAssetWiseByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenMintedAssetWiseByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenMintedAssetWiseByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintedData = append(m.MintedData, MintedDataMap{})
			if err := m.MintedData[len(m.MintedData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultCountByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultCountByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultCountByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultCount", wireType)
			}
			m.VaultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalValueLockedByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalValueLockedByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalValueLockedByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.ValueLocked = &v
			if err := m.ValueLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDsByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDsByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDsByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairIDsByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairIDsByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairIDsByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedPairIds = append(m.ExtendedPairIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtendedPairIds) == 0 {
					m.ExtendedPairIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedPairIds = append(m.ExtendedPairIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByVaultIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByVaultIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByVaultIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableVaultId", wireType)
			}
			m.StableVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StableVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByVaultIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByVaultIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByVaultIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StableMintVault = append(m.StableMintVault, StableMintVault{})
			if err := m.StableMintVault[len(m.StableMintVault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableVaultByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableVaultByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableVaultByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableMintVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableMintVault == nil {
				m.StableMintVault = &StableMintVault{}
			}
			if err := m.StableMintVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppAndExtendedPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppAndExtendedPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendedPairVaultMapping == nil {
				m.ExtendedPairVaultMapping = &AppExtendedPairVaultMappingData{}
			}
			if err := m.ExtendedPairVaultMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExtendedPairVaultMappingByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExtendedPairVaultMappingByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairVaultMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedPairVaultMapping = append(m.ExtendedPairVaultMapping, AppExtendedPairVaultMappingData{})
			if err := m.ExtendedPairVaultMapping[len(m.ExtendedPairVaultMapping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLByAppOfAllExtendedPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLByAppOfAllExtendedPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLByAppOfAllExtendedPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLByAppOfAllExtendedPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLByAppOfAllExtendedPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLByAppOfAllExtendedPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tvldata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tvldata = append(m.Tvldata, TvlLockedDataMap{})
			if err := m.Tvldata[len(m.Tvldata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTVLByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTVLByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTVLByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserMyPositionByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserMyPositionByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserMyPositionByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLocked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableToBorrow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvailableToBorrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageCrRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AverageCrRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExtendedPairTotalDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExtendedPairTotalDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExtendedPairTotalDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExtendedPairTotalDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExtendedPairTotalDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExtendedPairTotalDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTotalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTotalData = append(m.UserTotalData, OwnerAppExtendedPairVaultMappingData{})
			if err := m.UserTotalData[len(m.UserTotalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsLockedAndMintedStatisticByAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsLockedAndMintedStatisticByAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsLockedAndMintedStatisticByAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPairsLockedAndMintedStatisticByAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPairsLockedAndMintedStatisticByAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPairsLockedAndMintedStatisticByAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairStatisticData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairStatisticData = append(m.PairStatisticData, PairStatisticData{})
			if err := m.PairStatisticData[len(m.PairStatisticData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
